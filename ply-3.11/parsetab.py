
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CHAR COMMA CTEC CTEF CTEI CTESTRING DIV DO ELSE END EQUALS FLOAT FOR FROM FUNCTION GT GTE ID IF INT LBRACKET LCURLY LPAREN LT LTE MEDIA MINUS MODA MUL NE OR PLOTXY PLUS PRINCIPAL PROGRAM RBRACKET RCURLY READ RETURN RPAREN SEMMICOLON SIMPLEREGRESSION THEN TO TWOPOINTS VARIANZA VARS VOID WHILE WRITE\n    program : PROGRAM ID addProgram SEMMICOLON program1 \n    \n    addProgram :\n    \n    program1 : vars functions principal\n            | vars functions \n            | program2\n    \n    program2 : principal\n    \n    principal : PRINCIPAL LPAREN RPAREN LCURLY statements RCURLY \n    \n    statements : assign SEMMICOLON statements \n        | functionCall SEMMICOLON statements \n        | read statements SEMMICOLON statements\n        | write statements SEMMICOLON statements \n        | for statements \n        | while statements \n        | if statements \n        | return statements\n        | empty\n    \n    assign : ID EQUALS exp\n            | ID LBRACKET exp RBRACKET EQUALS exp \n    \n    functionCall : ID LPAREN exp RPAREN\n    \n    read : READ LPAREN read1 RPAREN \n    \n    read1 : ID read2 \n    \n    read2 : COMMA read1 \n        | empty\n    \n    media : MEDIA LPAREN arr RPAREN SEMMICOLON\n    \n    write : WRITE LPAREN write1 RPAREN\n    \n    write1 : write2 COMMA write2 \n            | write2 \n    \n    write2 : CTESTRING\n            | CTEI \n            | CTEF\n            | exp \n    \n    for : FOR assign TO CTEI DO LCURLY statements RCURLY \n    \n    while : WHILE LPAREN exp RPAREN DO LCURLY statements RCURLY \n    \n    if : IF LPAREN exp RPAREN THEN LCURLY statements RCURLY else \n    \n    else : ELSE LCURLY statements RCURLY\n            | empty \n    \n    exp : nexp \n        | nexp OR nexp \n    \n    nexp : compexp \n        | compexp AND compexp \n    \n    compexp : sumexp \n            | compexp1 sumexp \n    \n    compexp1 : sumexp GT sumexp \n             | sumexp LT sumexp \n             | sumexp GTE sumexp \n             | sumexp LTE sumexp \n             | sumexp NE sumexp \n    \n    sumexp : mulexp \n           | mulexp PLUS mulexp \n           | mulexp MINUS mulexp \n    \n    mulexp : pexp \n           | pexp MUL pexp \n           | pexp DIV pexp  \n    \n    pexp : var1 \n         | CTEI \n         | CTEF \n         | functionCall \n         | LPAREN exp RPAREN \n    \n    vars : var\n        | empty\n    \n    var : VARS var2 \n    \n    var2 : var2 type TWOPOINTS var1 SEMMICOLON \n         | empty \n    \n    var1 : ID \n         | ID COMMA var1 \n         | ID arr \n         | ID arr COMMA var1 \n         | empty \n    \n    type : INT \n        | CHAR \n        | FLOAT \n    \n    arr : LBRACKET CTEI RBRACKET \n        | LBRACKET exp RBRACKET\n    \n    functions : FUNCTION VOID functionVoid functions \n                | FUNCTION type functionType functions\n                | empty\n    \n    functionVoid : ID LPAREN args RPAREN vars LCURLY statements RCURLY \n    \n    functionType : ID saveFunction LPAREN args RPAREN vars LCURLY statements return SEMMICOLON RCURLY\n    \n    saveFunction : \n    \n    args : type TWOPOINTS ID MultipleArgs \n        | empty \n    \n    MultipleArgs : COMMA args \n        | empty \n    \n    return : RETURN LPAREN exp RPAREN SEMMICOLON\n            | RETURN LPAREN exp RPAREN \n    \n    empty :  \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,6,7,8,9,10,11,12,14,16,17,18,20,28,30,34,36,62,66,187,200,],[0,-86,-1,-86,-6,-5,-59,-60,-86,-4,-76,-61,-63,-3,-86,-86,-74,-75,-62,-7,-77,-78,]),'ID':([2,21,22,23,24,25,32,33,39,40,44,45,46,47,48,49,54,63,64,65,67,68,75,76,77,78,79,82,83,84,86,88,89,95,96,97,98,99,100,101,102,105,106,108,126,127,128,129,130,131,132,133,134,135,137,138,139,140,145,146,148,150,151,155,156,163,164,165,166,167,168,169,170,171,172,173,179,182,184,185,186,193,194,195,197,199,201,203,],[3,29,31,-69,-70,-71,39,51,-64,-68,51,51,51,51,51,51,81,39,-66,102,51,51,102,102,102,112,102,102,102,102,124,-65,39,102,-48,-51,-54,-56,-57,102,-64,51,51,-55,-67,-72,-73,102,102,102,102,102,102,102,102,102,102,102,-19,-20,112,-25,102,-85,51,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,102,-84,51,51,51,51,-32,-33,-86,-34,-36,51,-35,]),'SEMMICOLON':([3,4,32,38,39,40,42,43,44,45,46,47,48,49,50,63,64,67,68,69,70,71,72,73,74,75,88,89,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,142,143,145,146,150,155,161,162,163,164,165,166,167,168,169,170,171,172,173,179,183,192,193,194,195,197,199,203,],[-2,5,-86,62,-64,-68,67,68,-86,-86,-86,-86,-86,-86,-16,-86,-66,-86,-86,105,106,-12,-13,-14,-15,-86,-65,-86,-37,-39,-41,-86,-48,-51,-54,-56,-57,-64,-8,-9,-86,-86,-17,-55,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-42,-86,-86,-86,-86,-10,-11,-19,-20,-25,179,-38,-40,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-86,-84,-18,196,-32,-33,-86,-34,-36,-35,]),'VARS':([5,85,125,],[12,12,12,]),'FUNCTION':([5,7,10,11,12,17,18,28,30,62,187,200,],[-86,15,-59,-60,-86,-61,-63,15,15,-62,-77,-78,]),'PRINCIPAL':([5,7,10,11,12,14,16,17,18,28,30,34,36,62,187,200,],[13,-86,-59,-60,-86,13,-76,-61,-63,-86,-86,-74,-75,-62,-77,-78,]),'LCURLY':([10,11,12,17,18,27,62,85,123,125,160,176,177,178,198,],[-59,-60,-86,-61,-63,33,-62,-86,156,-86,182,184,185,186,201,]),'INT':([12,15,17,18,35,61,62,158,],[-86,23,23,-63,23,23,-62,23,]),'CHAR':([12,15,17,18,35,61,62,158,],[-86,24,24,-63,24,24,-62,24,]),'FLOAT':([12,15,17,18,35,61,62,158,],[-86,25,25,-63,25,25,-62,25,]),'LPAREN':([13,29,31,37,39,40,51,52,53,55,56,57,63,64,65,75,76,77,79,82,83,84,88,89,95,96,97,98,99,100,101,102,108,126,127,128,129,130,131,132,133,134,135,137,138,139,140,145,151,163,164,165,166,167,168,169,170,171,172,173,],[19,35,-79,61,-64,-68,77,78,79,82,83,84,-86,-66,101,101,101,101,101,101,101,101,-65,-86,101,-48,-51,-54,-56,-57,101,77,-55,-67,-72,-73,101,101,101,101,101,101,101,101,101,101,101,-19,101,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,101,]),'VOID':([15,],[21,]),'RPAREN':([19,35,39,40,58,60,61,63,64,77,79,82,83,84,87,88,89,92,93,94,95,96,97,98,99,100,101,102,108,110,111,112,113,114,115,116,117,118,120,121,122,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,145,147,149,151,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,174,175,181,],[27,-86,-64,-68,85,-81,-86,-86,-66,-86,-86,-86,-86,-86,125,-65,-86,-37,-39,-41,-86,-48,-51,-54,-56,-57,-86,-64,-55,145,146,-86,150,-27,-28,-29,-30,-31,153,154,155,-86,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-42,-86,-86,-86,-86,172,-19,-21,-23,-86,-80,-86,-83,-38,-40,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-22,-26,-82,]),'TWOPOINTS':([23,24,25,26,59,],[-69,-70,-71,32,86,]),'READ':([33,44,45,46,47,48,49,67,68,105,106,146,150,155,156,179,182,184,185,186,193,194,195,197,199,201,203,],[52,52,52,52,52,52,52,52,52,52,52,-20,-25,-85,52,-84,52,52,52,52,-32,-33,-86,-34,-36,52,-35,]),'WRITE':([33,44,45,46,47,48,49,67,68,105,106,146,150,155,156,179,182,184,185,186,193,194,195,197,199,201,203,],[53,53,53,53,53,53,53,53,53,53,53,-20,-25,-85,53,-84,53,53,53,53,-32,-33,-86,-34,-36,53,-35,]),'FOR':([33,44,45,46,47,48,49,67,68,105,106,146,150,155,156,179,182,184,185,186,193,194,195,197,199,201,203,],[54,54,54,54,54,54,54,54,54,54,54,-20,-25,-85,54,-84,54,54,54,54,-32,-33,-86,-34,-36,54,-35,]),'WHILE':([33,44,45,46,47,48,49,67,68,105,106,146,150,155,156,179,182,184,185,186,193,194,195,197,199,201,203,],[55,55,55,55,55,55,55,55,55,55,55,-20,-25,-85,55,-84,55,55,55,55,-32,-33,-86,-34,-36,55,-35,]),'IF':([33,44,45,46,47,48,49,67,68,105,106,146,150,155,156,179,182,184,185,186,193,194,195,197,199,201,203,],[56,56,56,56,56,56,56,56,56,56,56,-20,-25,-85,56,-84,56,56,56,56,-32,-33,-86,-34,-36,56,-35,]),'RETURN':([33,44,45,46,47,48,49,50,67,68,71,72,73,74,103,104,105,106,142,143,146,150,155,156,179,182,184,185,186,188,193,194,195,197,199,201,203,],[57,57,57,57,57,57,57,-16,57,57,-12,-13,-14,-15,-8,-9,57,57,-10,-11,-20,-25,-85,57,-84,57,57,57,57,57,-32,-33,-86,-34,-36,57,-35,]),'RCURLY':([33,41,46,47,48,49,50,67,68,71,72,73,74,103,104,105,106,142,143,155,156,179,180,184,185,186,189,190,191,193,194,195,196,197,199,201,202,203,],[-86,66,-86,-86,-86,-86,-16,-86,-86,-12,-13,-14,-15,-8,-9,-86,-86,-10,-11,-85,-86,-84,187,-86,-86,-86,193,194,195,-32,-33,-86,200,-34,-36,-86,203,-35,]),'MUL':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,95,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,131,132,133,134,135,137,138,139,140,145,151,163,164,165,166,167,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,-86,-48,139,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-19,-86,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-86,]),'DIV':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,95,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,131,132,133,134,135,137,138,139,140,145,151,163,164,165,166,167,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,-86,-48,140,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-19,-86,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-86,]),'PLUS':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,95,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,131,132,133,134,135,137,138,139,140,145,151,163,164,165,166,167,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,-86,137,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-19,-86,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-86,]),'MINUS':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,95,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,131,132,133,134,135,137,138,139,140,145,151,163,164,165,166,167,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,-86,138,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-86,-19,-86,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-86,]),'GT':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,94,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,137,138,139,140,145,151,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,131,-48,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-19,-86,-49,-50,-52,-53,-58,-86,]),'LT':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,94,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,137,138,139,140,145,151,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,132,-48,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-19,-86,-49,-50,-52,-53,-58,-86,]),'GTE':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,94,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,137,138,139,140,145,151,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,133,-48,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-19,-86,-49,-50,-52,-53,-58,-86,]),'LTE':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,94,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,137,138,139,140,145,151,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,134,-48,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-19,-86,-49,-50,-52,-53,-58,-86,]),'NE':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,94,96,97,98,99,100,101,102,108,116,117,126,127,128,129,130,137,138,139,140,145,151,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,135,-48,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-19,-86,-49,-50,-52,-53,-58,-86,]),'AND':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,93,94,95,96,97,98,99,100,101,102,108,116,117,126,127,128,129,131,132,133,134,135,136,137,138,139,140,145,151,163,164,165,166,167,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,130,-41,-86,-48,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-42,-86,-86,-86,-86,-19,-86,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-86,]),'OR':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,90,92,93,94,95,96,97,98,99,100,101,102,108,116,117,126,127,128,130,131,132,133,134,135,136,137,138,139,140,145,151,162,163,164,165,166,167,168,169,170,171,172,173,],[-64,-68,-86,-66,-86,-86,-86,-86,-86,-86,-86,-86,-65,-86,-55,129,-39,-41,-86,-48,-51,-54,-56,-57,-86,-64,-55,-55,-56,-67,-72,-73,-86,-86,-86,-86,-86,-86,-42,-86,-86,-86,-86,-19,-86,-40,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-86,]),'RBRACKET':([39,40,63,64,65,76,88,89,90,91,92,93,94,95,96,97,98,99,100,102,108,109,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,145,161,162,163,164,165,166,167,168,169,170,171,172,],[-64,-68,-86,-66,-86,-86,-65,-86,127,128,-37,-39,-41,-86,-48,-51,-54,-56,-57,-64,-55,144,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-42,-86,-86,-86,-86,-19,-38,-40,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,]),'TO':([39,40,63,64,75,80,88,89,92,93,94,95,96,97,98,99,100,102,107,108,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,145,161,162,163,164,165,166,167,168,169,170,171,172,173,183,],[-64,-68,-86,-66,-86,119,-65,-86,-37,-39,-41,-86,-48,-51,-54,-56,-57,-64,-17,-55,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-42,-86,-86,-86,-86,-19,-38,-40,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,-86,-18,]),'COMMA':([39,40,63,64,79,88,89,92,93,94,95,96,97,98,99,100,102,108,112,114,115,116,117,118,124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,145,161,162,163,164,165,166,167,168,169,170,171,172,],[63,-68,-86,89,-86,-65,-86,-37,-39,-41,-86,-48,-51,-54,-56,-57,63,-55,148,151,-28,-29,-30,-31,158,-67,-72,-73,-86,-86,-86,-86,-86,-86,-86,-42,-86,-86,-86,-86,-19,-38,-40,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,]),'CTEI':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,95,96,97,98,99,100,101,102,108,119,126,127,128,129,130,131,132,133,134,135,137,138,139,140,145,151,163,164,165,166,167,168,169,170,171,172,173,],[-64,-68,-86,-66,90,108,108,108,116,108,108,108,-65,-86,108,-48,-51,-54,-56,-57,108,-64,-55,152,-67,-72,-73,108,108,108,108,108,108,108,108,108,108,108,-19,116,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,108,]),'CTEF':([39,40,63,64,65,75,76,77,79,82,83,84,88,89,95,96,97,98,99,100,101,102,108,126,127,128,129,130,131,132,133,134,135,137,138,139,140,145,151,163,164,165,166,167,168,169,170,171,172,173,],[-64,-68,-86,-66,99,99,99,99,117,99,99,99,-65,-86,99,-48,-51,-54,-56,-57,99,-64,-55,-67,-72,-73,99,99,99,99,99,99,99,99,99,99,99,-19,117,-43,-44,-45,-46,-47,-49,-50,-52,-53,-58,99,]),'LBRACKET':([39,51,81,102,],[65,76,76,65,]),'EQUALS':([51,81,144,],[75,75,173,]),'CTESTRING':([79,151,],[115,115,]),'DO':([152,153,],[176,177,]),'THEN':([154,],[178,]),'ELSE':([195,],[198,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'addProgram':([3,],[4,]),'program1':([5,],[6,]),'vars':([5,85,125,],[7,123,160,]),'principal':([5,14,],[8,20,]),'program2':([5,],[9,]),'var':([5,85,125,],[10,10,10,]),'empty':([5,7,12,28,30,32,33,35,44,45,46,47,48,49,61,63,65,67,68,75,76,77,79,82,83,84,85,89,95,101,105,106,112,124,125,129,130,131,132,133,134,135,137,138,139,140,151,156,158,173,182,184,185,186,195,201,],[11,16,18,16,16,40,50,60,50,50,50,50,50,50,60,40,40,50,50,40,40,40,40,40,40,40,11,40,40,40,50,50,149,159,11,40,40,40,40,40,40,40,40,40,40,40,40,50,60,40,50,50,50,50,199,50,]),'functions':([7,28,30,],[14,34,36,]),'var2':([12,],[17,]),'type':([15,17,35,61,158,],[22,26,59,59,59,]),'functionVoid':([21,],[28,]),'functionType':([22,],[30,]),'saveFunction':([31,],[37,]),'var1':([32,63,65,75,76,77,79,82,83,84,89,95,101,129,130,131,132,133,134,135,137,138,139,140,151,173,],[38,88,98,98,98,98,98,98,98,98,126,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'statements':([33,44,45,46,47,48,49,67,68,105,106,156,182,184,185,186,201,],[41,69,70,71,72,73,74,103,104,142,143,180,188,189,190,191,202,]),'assign':([33,44,45,46,47,48,49,54,67,68,105,106,156,182,184,185,186,201,],[42,42,42,42,42,42,42,80,42,42,42,42,42,42,42,42,42,42,]),'functionCall':([33,44,45,46,47,48,49,65,67,68,75,76,77,79,82,83,84,95,101,105,106,129,130,131,132,133,134,135,137,138,139,140,151,156,173,182,184,185,186,201,],[43,43,43,43,43,43,43,100,43,43,100,100,100,100,100,100,100,100,100,43,43,100,100,100,100,100,100,100,100,100,100,100,100,43,100,43,43,43,43,43,]),'read':([33,44,45,46,47,48,49,67,68,105,106,156,182,184,185,186,201,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'write':([33,44,45,46,47,48,49,67,68,105,106,156,182,184,185,186,201,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'for':([33,44,45,46,47,48,49,67,68,105,106,156,182,184,185,186,201,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'while':([33,44,45,46,47,48,49,67,68,105,106,156,182,184,185,186,201,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'if':([33,44,45,46,47,48,49,67,68,105,106,156,182,184,185,186,201,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'return':([33,44,45,46,47,48,49,67,68,105,106,156,182,184,185,186,188,201,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,192,49,]),'args':([35,61,158,],[58,87,181,]),'arr':([39,102,],[64,64,]),'exp':([65,75,76,77,79,82,83,84,101,151,173,],[91,107,109,110,118,120,121,122,141,118,183,]),'nexp':([65,75,76,77,79,82,83,84,101,129,151,173,],[92,92,92,92,92,92,92,92,92,161,92,92,]),'compexp':([65,75,76,77,79,82,83,84,101,129,130,151,173,],[93,93,93,93,93,93,93,93,93,93,162,93,93,]),'sumexp':([65,75,76,77,79,82,83,84,95,101,129,130,131,132,133,134,135,151,173,],[94,94,94,94,94,94,94,94,136,94,94,94,163,164,165,166,167,94,94,]),'compexp1':([65,75,76,77,79,82,83,84,101,129,130,151,173,],[95,95,95,95,95,95,95,95,95,95,95,95,95,]),'mulexp':([65,75,76,77,79,82,83,84,95,101,129,130,131,132,133,134,135,137,138,151,173,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,168,169,96,96,]),'pexp':([65,75,76,77,79,82,83,84,95,101,129,130,131,132,133,134,135,137,138,139,140,151,173,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,170,171,97,97,]),'read1':([78,148,],[111,174,]),'write1':([79,],[113,]),'write2':([79,151,],[114,175,]),'read2':([112,],[147,]),'MultipleArgs':([124,],[157,]),'else':([195,],[197,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID addProgram SEMMICOLON program1','program',5,'p_program','main.py',139),
  ('addProgram -> <empty>','addProgram',0,'p_addProgram','main.py',145),
  ('program1 -> vars functions principal','program1',3,'p_program1','main.py',156),
  ('program1 -> vars functions','program1',2,'p_program1','main.py',157),
  ('program1 -> program2','program1',1,'p_program1','main.py',158),
  ('program2 -> principal','program2',1,'p_program2','main.py',163),
  ('principal -> PRINCIPAL LPAREN RPAREN LCURLY statements RCURLY','principal',6,'p_principal','main.py',168),
  ('statements -> assign SEMMICOLON statements','statements',3,'p_statements','main.py',177),
  ('statements -> functionCall SEMMICOLON statements','statements',3,'p_statements','main.py',178),
  ('statements -> read statements SEMMICOLON statements','statements',4,'p_statements','main.py',179),
  ('statements -> write statements SEMMICOLON statements','statements',4,'p_statements','main.py',180),
  ('statements -> for statements','statements',2,'p_statements','main.py',181),
  ('statements -> while statements','statements',2,'p_statements','main.py',182),
  ('statements -> if statements','statements',2,'p_statements','main.py',183),
  ('statements -> return statements','statements',2,'p_statements','main.py',184),
  ('statements -> empty','statements',1,'p_statements','main.py',185),
  ('assign -> ID EQUALS exp','assign',3,'p_assign','main.py',191),
  ('assign -> ID LBRACKET exp RBRACKET EQUALS exp','assign',6,'p_assign','main.py',192),
  ('functionCall -> ID LPAREN exp RPAREN','functionCall',4,'p_functionCall','main.py',197),
  ('read -> READ LPAREN read1 RPAREN','read',4,'p_read','main.py',202),
  ('read1 -> ID read2','read1',2,'p_read1','main.py',207),
  ('read2 -> COMMA read1','read2',2,'p_read2','main.py',212),
  ('read2 -> empty','read2',1,'p_read2','main.py',213),
  ('media -> MEDIA LPAREN arr RPAREN SEMMICOLON','media',5,'p_media','main.py',218),
  ('write -> WRITE LPAREN write1 RPAREN','write',4,'p_write','main.py',223),
  ('write1 -> write2 COMMA write2','write1',3,'p_write1','main.py',228),
  ('write1 -> write2','write1',1,'p_write1','main.py',229),
  ('write2 -> CTESTRING','write2',1,'p_write2','main.py',234),
  ('write2 -> CTEI','write2',1,'p_write2','main.py',235),
  ('write2 -> CTEF','write2',1,'p_write2','main.py',236),
  ('write2 -> exp','write2',1,'p_write2','main.py',237),
  ('for -> FOR assign TO CTEI DO LCURLY statements RCURLY','for',8,'p_for','main.py',244),
  ('while -> WHILE LPAREN exp RPAREN DO LCURLY statements RCURLY','while',8,'p_while','main.py',249),
  ('if -> IF LPAREN exp RPAREN THEN LCURLY statements RCURLY else','if',9,'p_if','main.py',257),
  ('else -> ELSE LCURLY statements RCURLY','else',4,'p_else','main.py',262),
  ('else -> empty','else',1,'p_else','main.py',263),
  ('exp -> nexp','exp',1,'p_exp','main.py',271),
  ('exp -> nexp OR nexp','exp',3,'p_exp','main.py',272),
  ('nexp -> compexp','nexp',1,'p_nexp','main.py',277),
  ('nexp -> compexp AND compexp','nexp',3,'p_nexp','main.py',278),
  ('compexp -> sumexp','compexp',1,'p_compexp','main.py',283),
  ('compexp -> compexp1 sumexp','compexp',2,'p_compexp','main.py',284),
  ('compexp1 -> sumexp GT sumexp','compexp1',3,'p_compexp1','main.py',289),
  ('compexp1 -> sumexp LT sumexp','compexp1',3,'p_compexp1','main.py',290),
  ('compexp1 -> sumexp GTE sumexp','compexp1',3,'p_compexp1','main.py',291),
  ('compexp1 -> sumexp LTE sumexp','compexp1',3,'p_compexp1','main.py',292),
  ('compexp1 -> sumexp NE sumexp','compexp1',3,'p_compexp1','main.py',293),
  ('sumexp -> mulexp','sumexp',1,'p_sumexp','main.py',298),
  ('sumexp -> mulexp PLUS mulexp','sumexp',3,'p_sumexp','main.py',299),
  ('sumexp -> mulexp MINUS mulexp','sumexp',3,'p_sumexp','main.py',300),
  ('mulexp -> pexp','mulexp',1,'p_mulexp','main.py',305),
  ('mulexp -> pexp MUL pexp','mulexp',3,'p_mulexp','main.py',306),
  ('mulexp -> pexp DIV pexp','mulexp',3,'p_mulexp','main.py',307),
  ('pexp -> var1','pexp',1,'p_pexp','main.py',312),
  ('pexp -> CTEI','pexp',1,'p_pexp','main.py',313),
  ('pexp -> CTEF','pexp',1,'p_pexp','main.py',314),
  ('pexp -> functionCall','pexp',1,'p_pexp','main.py',315),
  ('pexp -> LPAREN exp RPAREN','pexp',3,'p_pexp','main.py',316),
  ('vars -> var','vars',1,'p_vars','main.py',325),
  ('vars -> empty','vars',1,'p_vars','main.py',326),
  ('var -> VARS var2','var',2,'p_var','main.py',331),
  ('var2 -> var2 type TWOPOINTS var1 SEMMICOLON','var2',5,'p_var2','main.py',336),
  ('var2 -> empty','var2',1,'p_var2','main.py',337),
  ('var1 -> ID','var1',1,'p_var1','main.py',342),
  ('var1 -> ID COMMA var1','var1',3,'p_var1','main.py',343),
  ('var1 -> ID arr','var1',2,'p_var1','main.py',344),
  ('var1 -> ID arr COMMA var1','var1',4,'p_var1','main.py',345),
  ('var1 -> empty','var1',1,'p_var1','main.py',346),
  ('type -> INT','type',1,'p_type','main.py',353),
  ('type -> CHAR','type',1,'p_type','main.py',354),
  ('type -> FLOAT','type',1,'p_type','main.py',355),
  ('arr -> LBRACKET CTEI RBRACKET','arr',3,'p_arr','main.py',360),
  ('arr -> LBRACKET exp RBRACKET','arr',3,'p_arr','main.py',361),
  ('functions -> FUNCTION VOID functionVoid functions','functions',4,'p_functions','main.py',368),
  ('functions -> FUNCTION type functionType functions','functions',4,'p_functions','main.py',369),
  ('functions -> empty','functions',1,'p_functions','main.py',370),
  ('functionVoid -> ID LPAREN args RPAREN vars LCURLY statements RCURLY','functionVoid',8,'p_functionVoid','main.py',375),
  ('functionType -> ID saveFunction LPAREN args RPAREN vars LCURLY statements return SEMMICOLON RCURLY','functionType',11,'p_functionType','main.py',383),
  ('saveFunction -> <empty>','saveFunction',0,'p_saveFunction','main.py',388),
  ('args -> type TWOPOINTS ID MultipleArgs','args',4,'p_args','main.py',395),
  ('args -> empty','args',1,'p_args','main.py',396),
  ('MultipleArgs -> COMMA args','MultipleArgs',2,'p_MultipleArgs','main.py',401),
  ('MultipleArgs -> empty','MultipleArgs',1,'p_MultipleArgs','main.py',402),
  ('return -> RETURN LPAREN exp RPAREN SEMMICOLON','return',5,'p_return','main.py',407),
  ('return -> RETURN LPAREN exp RPAREN','return',4,'p_return','main.py',408),
  ('empty -> <empty>','empty',0,'p_empty','main.py',421),
]
