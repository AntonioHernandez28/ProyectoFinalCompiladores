Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA
    END
    FROM
    MODA
    PLOTXY
    SIMPLEREGRESSION
    VARIANZA

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMMICOLON addProgram program1
Rule 2     addProgram -> <empty>
Rule 3     program1 -> vars mainQuad functions mainEnd program2
Rule 4     program1 -> vars mainQuad functions
Rule 5     program1 -> program2
Rule 6     program2 -> principal
Rule 7     principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
Rule 8     mainQuad -> <empty>
Rule 9     mainEnd -> <empty>
Rule 10    statements -> assign SEMMICOLON statements
Rule 11    statements -> functionCall SEMMICOLON statements
Rule 12    statements -> read statements SEMMICOLON statements
Rule 13    statements -> write statements SEMMICOLON statements
Rule 14    statements -> for statements
Rule 15    statements -> while statements
Rule 16    statements -> if statements
Rule 17    statements -> return SEMMICOLON statements
Rule 18    statements -> sort statements SEMMICOLON statements
Rule 19    statements -> empty
Rule 20    assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad
Rule 21    assign -> ID arrStatement EQUALS saveOperator exp generateAssignQuad
Rule 22    assign -> ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
Rule 23    generateAssignQuad -> <empty>
Rule 24    add_id -> <empty>
Rule 25    add_id2 -> <empty>
Rule 26    add_id3 -> <empty>
Rule 27    media -> MEDIA LPAREN arr RPAREN SEMMICOLON
Rule 28    functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
Rule 29    validateFunctionID -> <empty>
Rule 30    verifyParams -> <empty>
Rule 31    paramsCount -> <empty>
Rule 32    generateQuadPARAM -> <empty>
Rule 33    expAux -> exp generateQuadPARAM paramsCount
Rule 34    expAux -> exp generateQuadPARAM COMMA paramsCount expAux
Rule 35    expAux -> empty
Rule 36    generateQuadGOSUB -> <empty>
Rule 37    fillEndProc -> <empty>
Rule 38    functionERA -> <empty>
Rule 39    read -> READ operatorRead LPAREN paramReadAux RPAREN
Rule 40    paramRead -> paramReadAux
Rule 41    paramRead -> empty
Rule 42    paramReadAux -> exp generateQuadREAD
Rule 43    paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux
Rule 44    operatorRead -> <empty>
Rule 45    generateQuadREAD -> <empty>
Rule 46    write -> WRITE writeOperator LPAREN paramWrite RPAREN
Rule 47    paramWrite -> paramWriteAux
Rule 48    paramWrite -> empty
Rule 49    paramWriteAux -> exp generateQuadPRINT
Rule 50    paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux
Rule 51    writeOperator -> <empty>
Rule 52    generateQuadPRINT -> <empty>
Rule 53    sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
Rule 54    sortOperator -> <empty>
Rule 55    verifyArray -> <empty>
Rule 56    generateQuadSORT -> <empty>
Rule 57    LoopEnd -> <empty>
Rule 58    for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
Rule 59    forOP -> <empty>
Rule 60    generateQuadFOR -> <empty>
Rule 61    while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
Rule 62    whileOP -> <empty>
Rule 63    generateQuadWHILE -> <empty>
Rule 64    if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
Rule 65    else -> ELSE generateQuadELSE LCURLY statements RCURLY
Rule 66    else -> empty
Rule 67    generateQuadIF -> <empty>
Rule 68    endIF -> <empty>
Rule 69    generateQuadELSE -> <empty>
Rule 70    exp -> nexp generateQuadOR
Rule 71    exp -> nexp generateQuadOR OR saveOperator nexp
Rule 72    generateQuadOR -> <empty>
Rule 73    nexp -> compexp generateQuadAND
Rule 74    nexp -> compexp generateQuadAND AND saveOperator compexp
Rule 75    generateQuadAND -> <empty>
Rule 76    compexp -> sumexp
Rule 77    compexp -> compexp1 sumexp
Rule 78    compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE
Rule 79    compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE
Rule 80    compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE
Rule 81    compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE
Rule 82    compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE
Rule 83    compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
Rule 84    generateQuadCOMPARE -> <empty>
Rule 85    sumexp -> mulexp
Rule 86    sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM
Rule 87    sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM
Rule 88    generateQuadSUM -> <empty>
Rule 89    mulexp -> pexp
Rule 90    mulexp -> pexp MUL saveOperator pexp generateQuadMUL
Rule 91    mulexp -> pexp DIV saveOperator pexp generateQuadMUL
Rule 92    generateQuadMUL -> <empty>
Rule 93    pexp -> ID add_id2
Rule 94    pexp -> CTEI saveCTE
Rule 95    pexp -> CTEF saveCTE
Rule 96    pexp -> CTEC saveCTE
Rule 97    pexp -> CTESTRING saveCTE
Rule 98    pexp -> functionCallExp
Rule 99    pexp -> LPAREN exp RPAREN
Rule 100   pexp -> ID arrStatement
Rule 101   pexp -> empty
Rule 102   functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
Rule 103   validateFunctionIDexp -> <empty>
Rule 104   arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
Rule 105   arrStatement -> empty
Rule 106   getArrFinalAddress -> <empty>
Rule 107   checkArray -> <empty>
Rule 108   generateQuadVER -> <empty>
Rule 109   saveCTE -> <empty>
Rule 110   saveOperator -> <empty>
Rule 111   vars -> var
Rule 112   vars -> empty
Rule 113   var -> VARS var2
Rule 114   var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar
Rule 115   var2 -> empty
Rule 116   var1 -> ID
Rule 117   var1 -> ID COMMA var1 addVar
Rule 118   var1 -> ID createArr arr
Rule 119   var1 -> ID createArr arr COMMA var1 addVar
Rule 120   var1 -> empty
Rule 121   createArr -> <empty>
Rule 122   addVar -> <empty>
Rule 123   saveTypeVar -> <empty>
Rule 124   type -> INT saveTypeVar
Rule 125   type -> CHAR saveTypeVar
Rule 126   type -> FLOAT saveTypeVar
Rule 127   arr -> LBRACKET CTEI setArraySize RBRACKET
Rule 128   setArraySize -> <empty>
Rule 129   functions -> FUNCTION INT saveFunType functions2 endFunc functions
Rule 130   functions -> FUNCTION CHAR saveFunType functions2 endFunc functions
Rule 131   functions -> FUNCTION FLOAT saveFunType functions2 endFunc functions
Rule 132   functions -> FUNCTION VOID saveFunType functions1 endFunc functions
Rule 133   functions -> empty
Rule 134   saveFunType -> <empty>
Rule 135   functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
Rule 136   functions1 -> empty
Rule 137   functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
Rule 138   functions2 -> empty
Rule 139   setStartDirection -> <empty>
Rule 140   addParameter -> <empty>
Rule 141   parameters -> paramsAux
Rule 142   parameters -> empty
Rule 143   paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 144   paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 145   paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 146   nextParam -> COMMA paramsAux
Rule 147   nextParam -> empty
Rule 148   endFunc -> <empty>
Rule 149   saveFunction -> <empty>
Rule 150   args -> args type TWOPOINTS var1 addVar
Rule 151   args -> empty
Rule 152   args1 -> ID addVar
Rule 153   args1 -> ID COMMA args1
Rule 154   args1 -> empty
Rule 155   return -> RETURN LPAREN exp generateQuadRETURN RPAREN
Rule 156   generateQuadRETURN -> <empty>
Rule 157   empty -> <empty>

Terminals, with rules where they appear

AND                  : 74
CHAR                 : 125 130 145
COMILLA              : 
COMMA                : 34 43 50 117 119 146 153
COMPARE              : 83
CTEC                 : 96
CTEF                 : 95
CTEI                 : 58 94 127
CTESTRING            : 97
DIV                  : 91
DO                   : 58 61
ELSE                 : 65
END                  : 
EQUALS               : 20 21 22
FLOAT                : 126 131 144
FOR                  : 58
FROM                 : 
FUNCTION             : 129 130 131 132
GT                   : 78
GTE                  : 80
ID                   : 1 20 21 22 28 53 93 100 102 116 117 118 119 135 137 143 144 145 152 153
IF                   : 64
INT                  : 124 129 143
LBRACKET             : 104 127
LCURLY               : 7 58 61 64 65 135 137
LPAREN               : 7 27 28 39 46 53 61 64 99 102 135 137 155
LT                   : 79
LTE                  : 81
MEDIA                : 27
MINUS                : 87
MODA                 : 
MUL                  : 90
NE                   : 82
OR                   : 71
PLOTXY               : 
PLUS                 : 86
PRINCIPAL            : 7
PROGRAM              : 1
RBRACKET             : 104 127
RCURLY               : 7 58 61 64 65 135 137
READ                 : 39
RETURN               : 155
RPAREN               : 7 27 28 39 46 53 61 64 99 102 135 137 155
SEMMICOLON           : 1 10 11 12 13 17 18 27 114
SIMPLEREGRESSION     : 
SORT                 : 53
THEN                 : 64
TO                   : 58
TWOPOINTS            : 114 143 144 145 150
VARIANZA             : 
VARS                 : 113
VOID                 : 132
WHILE                : 61
WRITE                : 46
error                : 

Nonterminals, with rules where they appear

LoopEnd              : 58 61
addParameter         : 143 144 145
addProgram           : 1
addVar               : 114 117 119 150 152
add_id               : 
add_id2              : 20 22 53 93
add_id3              : 
args                 : 150
args1                : 153
arr                  : 27 118 119
arrStatement         : 21 100
assign               : 10 58
checkArray           : 104
compexp              : 73 74 74
compexp1             : 77
createArr            : 118 119
else                 : 64
empty                : 19 35 41 48 66 101 105 112 115 120 133 136 138 142 147 151 154
endFunc              : 129 130 131 132
endIF                : 64
exp                  : 20 21 33 34 42 43 49 50 61 64 99 104 155
expAux               : 28 34 102
fillEndProc          : 
for                  : 14
forOP                : 58
functionCall         : 11 22
functionCallExp      : 98
functionERA          : 28 102
functions            : 3 4 129 130 131 132
functions1           : 132
functions2           : 129 130 131
generateAssignQuad   : 20 21 22
generateQuadAND      : 73 74
generateQuadCOMPARE  : 78 79 80 81 82 83
generateQuadELSE     : 65
generateQuadFOR      : 58
generateQuadGOSUB    : 28 102
generateQuadIF       : 64
generateQuadMUL      : 90 91
generateQuadOR       : 70 71
generateQuadPARAM    : 33 34
generateQuadPRINT    : 49 50
generateQuadREAD     : 42 43
generateQuadRETURN   : 155
generateQuadSORT     : 53
generateQuadSUM      : 86 87
generateQuadVER      : 104
generateQuadWHILE    : 61
getArrFinalAddress   : 104
if                   : 16
mainEnd              : 3
mainQuad             : 3 4
media                : 
mulexp               : 85 86 86 87 87
nexp                 : 70 71 71
nextParam            : 143 144 145
operatorRead         : 39 43
paramRead            : 
paramReadAux         : 39 40 43
paramWrite           : 46
paramWriteAux        : 47 50
parameters           : 135 137
paramsAux            : 141 146
paramsCount          : 33 34
pexp                 : 89 90 90 91 91
principal            : 6
program              : 0
program1             : 1
program2             : 3 5
read                 : 12
return               : 17
saveCTE              : 94 95 96 97
saveFunType          : 129 130 131 132
saveFunction         : 7 135 137
saveOperator         : 20 21 22 71 74 78 79 80 81 82 83 86 87 90 91
saveTypeVar          : 124 125 126 143 144 145
setArraySize         : 127
setStartDirection    : 135 137
sort                 : 18
sortOperator         : 53
statements           : 7 10 11 12 12 13 13 14 15 16 17 18 18 58 61 64 65 135 137
sumexp               : 76 77 78 78 79 79 80 80 81 81 82 82 83 83
type                 : 114 150
validateFunctionID   : 28
validateFunctionIDexp : 102
var                  : 111
var1                 : 114 117 119 150
var2                 : 113 114
vars                 : 3 4 7 135 137
verifyArray          : 53
verifyParams         : 28 102
while                : 15
whileOP              : 61
write                : 13
writeOperator        : 46 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMMICOLON addProgram program1

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMMICOLON addProgram program1

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMMICOLON addProgram program1

    SEMMICOLON      shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMMICOLON . addProgram program1
    (2) addProgram -> .

    VARS            reduce using rule 2 (addProgram -> .)
    PRINCIPAL       reduce using rule 2 (addProgram -> .)
    FUNCTION        reduce using rule 2 (addProgram -> .)
    $end            reduce using rule 2 (addProgram -> .)

    addProgram                     shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMMICOLON addProgram . program1
    (3) program1 -> . vars mainQuad functions mainEnd program2
    (4) program1 -> . vars mainQuad functions
    (5) program1 -> . program2
    (111) vars -> . var
    (112) vars -> . empty
    (6) program2 -> . principal
    (113) var -> . VARS var2
    (157) empty -> .
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

  ! shift/reduce conflict for PRINCIPAL resolved as shift
    VARS            shift and go to state 12
    FUNCTION        reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)
    PRINCIPAL       shift and go to state 13

  ! PRINCIPAL       [ reduce using rule 157 (empty -> .) ]

    program1                       shift and go to state 6
    vars                           shift and go to state 7
    program2                       shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    principal                      shift and go to state 11

state 6

    (1) program -> PROGRAM ID SEMMICOLON addProgram program1 .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMMICOLON addProgram program1 .)


state 7

    (3) program1 -> vars . mainQuad functions mainEnd program2
    (4) program1 -> vars . mainQuad functions
    (8) mainQuad -> .

    FUNCTION        reduce using rule 8 (mainQuad -> .)
    PRINCIPAL       reduce using rule 8 (mainQuad -> .)
    $end            reduce using rule 8 (mainQuad -> .)

    mainQuad                       shift and go to state 14

state 8

    (5) program1 -> program2 .

    $end            reduce using rule 5 (program1 -> program2 .)


state 9

    (111) vars -> var .

    FUNCTION        reduce using rule 111 (vars -> var .)
    PRINCIPAL       reduce using rule 111 (vars -> var .)
    $end            reduce using rule 111 (vars -> var .)
    ID              reduce using rule 111 (vars -> var .)
    READ            reduce using rule 111 (vars -> var .)
    WRITE           reduce using rule 111 (vars -> var .)
    FOR             reduce using rule 111 (vars -> var .)
    WHILE           reduce using rule 111 (vars -> var .)
    IF              reduce using rule 111 (vars -> var .)
    RETURN          reduce using rule 111 (vars -> var .)
    SORT            reduce using rule 111 (vars -> var .)
    RCURLY          reduce using rule 111 (vars -> var .)
    LCURLY          reduce using rule 111 (vars -> var .)


state 10

    (112) vars -> empty .

    FUNCTION        reduce using rule 112 (vars -> empty .)
    PRINCIPAL       reduce using rule 112 (vars -> empty .)
    $end            reduce using rule 112 (vars -> empty .)
    ID              reduce using rule 112 (vars -> empty .)
    READ            reduce using rule 112 (vars -> empty .)
    WRITE           reduce using rule 112 (vars -> empty .)
    FOR             reduce using rule 112 (vars -> empty .)
    WHILE           reduce using rule 112 (vars -> empty .)
    IF              reduce using rule 112 (vars -> empty .)
    RETURN          reduce using rule 112 (vars -> empty .)
    SORT            reduce using rule 112 (vars -> empty .)
    RCURLY          reduce using rule 112 (vars -> empty .)
    LCURLY          reduce using rule 112 (vars -> empty .)


state 11

    (6) program2 -> principal .

    $end            reduce using rule 6 (program2 -> principal .)


state 12

    (113) var -> VARS . var2
    (114) var2 -> . var2 type TWOPOINTS var1 SEMMICOLON addVar
    (115) var2 -> . empty
    (157) empty -> .

    INT             reduce using rule 157 (empty -> .)
    CHAR            reduce using rule 157 (empty -> .)
    FLOAT           reduce using rule 157 (empty -> .)
    FUNCTION        reduce using rule 157 (empty -> .)
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)
    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    SORT            reduce using rule 157 (empty -> .)
    RCURLY          reduce using rule 157 (empty -> .)
    LCURLY          reduce using rule 157 (empty -> .)

    var2                           shift and go to state 15
    empty                          shift and go to state 16

state 13

    (7) principal -> PRINCIPAL . saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
    (149) saveFunction -> .

    LPAREN          reduce using rule 149 (saveFunction -> .)

    saveFunction                   shift and go to state 17

state 14

    (3) program1 -> vars mainQuad . functions mainEnd program2
    (4) program1 -> vars mainQuad . functions
    (129) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (130) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (131) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (132) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (133) functions -> . empty
    (157) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions                      shift and go to state 18
    empty                          shift and go to state 20

state 15

    (113) var -> VARS var2 .
    (114) var2 -> var2 . type TWOPOINTS var1 SEMMICOLON addVar
    (124) type -> . INT saveTypeVar
    (125) type -> . CHAR saveTypeVar
    (126) type -> . FLOAT saveTypeVar

    FUNCTION        reduce using rule 113 (var -> VARS var2 .)
    PRINCIPAL       reduce using rule 113 (var -> VARS var2 .)
    $end            reduce using rule 113 (var -> VARS var2 .)
    ID              reduce using rule 113 (var -> VARS var2 .)
    READ            reduce using rule 113 (var -> VARS var2 .)
    WRITE           reduce using rule 113 (var -> VARS var2 .)
    FOR             reduce using rule 113 (var -> VARS var2 .)
    WHILE           reduce using rule 113 (var -> VARS var2 .)
    IF              reduce using rule 113 (var -> VARS var2 .)
    RETURN          reduce using rule 113 (var -> VARS var2 .)
    SORT            reduce using rule 113 (var -> VARS var2 .)
    RCURLY          reduce using rule 113 (var -> VARS var2 .)
    LCURLY          reduce using rule 113 (var -> VARS var2 .)
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    FLOAT           shift and go to state 24

    type                           shift and go to state 21

state 16

    (115) var2 -> empty .

    INT             reduce using rule 115 (var2 -> empty .)
    CHAR            reduce using rule 115 (var2 -> empty .)
    FLOAT           reduce using rule 115 (var2 -> empty .)
    FUNCTION        reduce using rule 115 (var2 -> empty .)
    PRINCIPAL       reduce using rule 115 (var2 -> empty .)
    $end            reduce using rule 115 (var2 -> empty .)
    ID              reduce using rule 115 (var2 -> empty .)
    READ            reduce using rule 115 (var2 -> empty .)
    WRITE           reduce using rule 115 (var2 -> empty .)
    FOR             reduce using rule 115 (var2 -> empty .)
    WHILE           reduce using rule 115 (var2 -> empty .)
    IF              reduce using rule 115 (var2 -> empty .)
    RETURN          reduce using rule 115 (var2 -> empty .)
    SORT            reduce using rule 115 (var2 -> empty .)
    RCURLY          reduce using rule 115 (var2 -> empty .)
    LCURLY          reduce using rule 115 (var2 -> empty .)


state 17

    (7) principal -> PRINCIPAL saveFunction . LPAREN RPAREN LCURLY vars statements RCURLY

    LPAREN          shift and go to state 25


state 18

    (3) program1 -> vars mainQuad functions . mainEnd program2
    (4) program1 -> vars mainQuad functions .
    (9) mainEnd -> .

    $end            reduce using rule 4 (program1 -> vars mainQuad functions .)
    PRINCIPAL       reduce using rule 9 (mainEnd -> .)

    mainEnd                        shift and go to state 26

state 19

    (129) functions -> FUNCTION . INT saveFunType functions2 endFunc functions
    (130) functions -> FUNCTION . CHAR saveFunType functions2 endFunc functions
    (131) functions -> FUNCTION . FLOAT saveFunType functions2 endFunc functions
    (132) functions -> FUNCTION . VOID saveFunType functions1 endFunc functions

    INT             shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30


state 20

    (133) functions -> empty .

    PRINCIPAL       reduce using rule 133 (functions -> empty .)
    $end            reduce using rule 133 (functions -> empty .)


state 21

    (114) var2 -> var2 type . TWOPOINTS var1 SEMMICOLON addVar

    TWOPOINTS       shift and go to state 31


state 22

    (124) type -> INT . saveTypeVar
    (123) saveTypeVar -> .

    TWOPOINTS       reduce using rule 123 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 32

state 23

    (125) type -> CHAR . saveTypeVar
    (123) saveTypeVar -> .

    TWOPOINTS       reduce using rule 123 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 33

state 24

    (126) type -> FLOAT . saveTypeVar
    (123) saveTypeVar -> .

    TWOPOINTS       reduce using rule 123 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 34

state 25

    (7) principal -> PRINCIPAL saveFunction LPAREN . RPAREN LCURLY vars statements RCURLY

    RPAREN          shift and go to state 35


state 26

    (3) program1 -> vars mainQuad functions mainEnd . program2
    (6) program2 -> . principal
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

    PRINCIPAL       shift and go to state 13

    program2                       shift and go to state 36
    principal                      shift and go to state 11

state 27

    (129) functions -> FUNCTION INT . saveFunType functions2 endFunc functions
    (134) saveFunType -> .

    ID              reduce using rule 134 (saveFunType -> .)
    FUNCTION        reduce using rule 134 (saveFunType -> .)
    PRINCIPAL       reduce using rule 134 (saveFunType -> .)
    $end            reduce using rule 134 (saveFunType -> .)

    saveFunType                    shift and go to state 37

state 28

    (130) functions -> FUNCTION CHAR . saveFunType functions2 endFunc functions
    (134) saveFunType -> .

    ID              reduce using rule 134 (saveFunType -> .)
    FUNCTION        reduce using rule 134 (saveFunType -> .)
    PRINCIPAL       reduce using rule 134 (saveFunType -> .)
    $end            reduce using rule 134 (saveFunType -> .)

    saveFunType                    shift and go to state 38

state 29

    (131) functions -> FUNCTION FLOAT . saveFunType functions2 endFunc functions
    (134) saveFunType -> .

    ID              reduce using rule 134 (saveFunType -> .)
    FUNCTION        reduce using rule 134 (saveFunType -> .)
    PRINCIPAL       reduce using rule 134 (saveFunType -> .)
    $end            reduce using rule 134 (saveFunType -> .)

    saveFunType                    shift and go to state 39

state 30

    (132) functions -> FUNCTION VOID . saveFunType functions1 endFunc functions
    (134) saveFunType -> .

    ID              reduce using rule 134 (saveFunType -> .)
    FUNCTION        reduce using rule 134 (saveFunType -> .)
    PRINCIPAL       reduce using rule 134 (saveFunType -> .)
    $end            reduce using rule 134 (saveFunType -> .)

    saveFunType                    shift and go to state 40

state 31

    (114) var2 -> var2 type TWOPOINTS . var1 SEMMICOLON addVar
    (116) var1 -> . ID
    (117) var1 -> . ID COMMA var1 addVar
    (118) var1 -> . ID createArr arr
    (119) var1 -> . ID createArr arr COMMA var1 addVar
    (120) var1 -> . empty
    (157) empty -> .

    ID              shift and go to state 42
    SEMMICOLON      reduce using rule 157 (empty -> .)

    var1                           shift and go to state 41
    empty                          shift and go to state 43

state 32

    (124) type -> INT saveTypeVar .

    TWOPOINTS       reduce using rule 124 (type -> INT saveTypeVar .)


state 33

    (125) type -> CHAR saveTypeVar .

    TWOPOINTS       reduce using rule 125 (type -> CHAR saveTypeVar .)


state 34

    (126) type -> FLOAT saveTypeVar .

    TWOPOINTS       reduce using rule 126 (type -> FLOAT saveTypeVar .)


state 35

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN . LCURLY vars statements RCURLY

    LCURLY          shift and go to state 44


state 36

    (3) program1 -> vars mainQuad functions mainEnd program2 .

    $end            reduce using rule 3 (program1 -> vars mainQuad functions mainEnd program2 .)


state 37

    (129) functions -> FUNCTION INT saveFunType . functions2 endFunc functions
    (137) functions2 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (138) functions2 -> . empty
    (157) empty -> .

    ID              shift and go to state 46
    FUNCTION        reduce using rule 157 (empty -> .)
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions2                     shift and go to state 45
    empty                          shift and go to state 47

state 38

    (130) functions -> FUNCTION CHAR saveFunType . functions2 endFunc functions
    (137) functions2 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (138) functions2 -> . empty
    (157) empty -> .

    ID              shift and go to state 46
    FUNCTION        reduce using rule 157 (empty -> .)
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions2                     shift and go to state 48
    empty                          shift and go to state 47

state 39

    (131) functions -> FUNCTION FLOAT saveFunType . functions2 endFunc functions
    (137) functions2 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (138) functions2 -> . empty
    (157) empty -> .

    ID              shift and go to state 46
    FUNCTION        reduce using rule 157 (empty -> .)
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions2                     shift and go to state 49
    empty                          shift and go to state 47

state 40

    (132) functions -> FUNCTION VOID saveFunType . functions1 endFunc functions
    (135) functions1 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (136) functions1 -> . empty
    (157) empty -> .

    ID              shift and go to state 51
    FUNCTION        reduce using rule 157 (empty -> .)
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions1                     shift and go to state 50
    empty                          shift and go to state 52

state 41

    (114) var2 -> var2 type TWOPOINTS var1 . SEMMICOLON addVar

    SEMMICOLON      shift and go to state 53


state 42

    (116) var1 -> ID .
    (117) var1 -> ID . COMMA var1 addVar
    (118) var1 -> ID . createArr arr
    (119) var1 -> ID . createArr arr COMMA var1 addVar
    (121) createArr -> .

    SEMMICOLON      reduce using rule 116 (var1 -> ID .)
    COMMA           shift and go to state 54
    LBRACKET        reduce using rule 121 (createArr -> .)

    createArr                      shift and go to state 55

state 43

    (120) var1 -> empty .

    SEMMICOLON      reduce using rule 120 (var1 -> empty .)


state 44

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY . vars statements RCURLY
    (111) vars -> . var
    (112) vars -> . empty
    (113) var -> . VARS var2
    (157) empty -> .

    VARS            shift and go to state 12
    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    SORT            reduce using rule 157 (empty -> .)
    RCURLY          reduce using rule 157 (empty -> .)

    vars                           shift and go to state 56
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 45

    (129) functions -> FUNCTION INT saveFunType functions2 . endFunc functions
    (148) endFunc -> .

    FUNCTION        reduce using rule 148 (endFunc -> .)
    PRINCIPAL       reduce using rule 148 (endFunc -> .)
    $end            reduce using rule 148 (endFunc -> .)

    endFunc                        shift and go to state 57

state 46

    (137) functions2 -> ID . saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (149) saveFunction -> .

    LPAREN          reduce using rule 149 (saveFunction -> .)

    saveFunction                   shift and go to state 58

state 47

    (138) functions2 -> empty .

    FUNCTION        reduce using rule 138 (functions2 -> empty .)
    PRINCIPAL       reduce using rule 138 (functions2 -> empty .)
    $end            reduce using rule 138 (functions2 -> empty .)


state 48

    (130) functions -> FUNCTION CHAR saveFunType functions2 . endFunc functions
    (148) endFunc -> .

    FUNCTION        reduce using rule 148 (endFunc -> .)
    PRINCIPAL       reduce using rule 148 (endFunc -> .)
    $end            reduce using rule 148 (endFunc -> .)

    endFunc                        shift and go to state 59

state 49

    (131) functions -> FUNCTION FLOAT saveFunType functions2 . endFunc functions
    (148) endFunc -> .

    FUNCTION        reduce using rule 148 (endFunc -> .)
    PRINCIPAL       reduce using rule 148 (endFunc -> .)
    $end            reduce using rule 148 (endFunc -> .)

    endFunc                        shift and go to state 60

state 50

    (132) functions -> FUNCTION VOID saveFunType functions1 . endFunc functions
    (148) endFunc -> .

    FUNCTION        reduce using rule 148 (endFunc -> .)
    PRINCIPAL       reduce using rule 148 (endFunc -> .)
    $end            reduce using rule 148 (endFunc -> .)

    endFunc                        shift and go to state 61

state 51

    (135) functions1 -> ID . saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (149) saveFunction -> .

    LPAREN          reduce using rule 149 (saveFunction -> .)

    saveFunction                   shift and go to state 62

state 52

    (136) functions1 -> empty .

    FUNCTION        reduce using rule 136 (functions1 -> empty .)
    PRINCIPAL       reduce using rule 136 (functions1 -> empty .)
    $end            reduce using rule 136 (functions1 -> empty .)


state 53

    (114) var2 -> var2 type TWOPOINTS var1 SEMMICOLON . addVar
    (122) addVar -> .

    INT             reduce using rule 122 (addVar -> .)
    CHAR            reduce using rule 122 (addVar -> .)
    FLOAT           reduce using rule 122 (addVar -> .)
    FUNCTION        reduce using rule 122 (addVar -> .)
    PRINCIPAL       reduce using rule 122 (addVar -> .)
    $end            reduce using rule 122 (addVar -> .)
    ID              reduce using rule 122 (addVar -> .)
    READ            reduce using rule 122 (addVar -> .)
    WRITE           reduce using rule 122 (addVar -> .)
    FOR             reduce using rule 122 (addVar -> .)
    WHILE           reduce using rule 122 (addVar -> .)
    IF              reduce using rule 122 (addVar -> .)
    RETURN          reduce using rule 122 (addVar -> .)
    SORT            reduce using rule 122 (addVar -> .)
    RCURLY          reduce using rule 122 (addVar -> .)
    LCURLY          reduce using rule 122 (addVar -> .)

    addVar                         shift and go to state 63

state 54

    (117) var1 -> ID COMMA . var1 addVar
    (116) var1 -> . ID
    (117) var1 -> . ID COMMA var1 addVar
    (118) var1 -> . ID createArr arr
    (119) var1 -> . ID createArr arr COMMA var1 addVar
    (120) var1 -> . empty
    (157) empty -> .

    ID              shift and go to state 42
    SEMMICOLON      reduce using rule 157 (empty -> .)

    var1                           shift and go to state 64
    empty                          shift and go to state 43

state 55

    (118) var1 -> ID createArr . arr
    (119) var1 -> ID createArr . arr COMMA var1 addVar
    (127) arr -> . LBRACKET CTEI setArraySize RBRACKET

    LBRACKET        shift and go to state 66

    arr                            shift and go to state 65

state 56

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)

    statements                     shift and go to state 67
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 57

    (129) functions -> FUNCTION INT saveFunType functions2 endFunc . functions
    (129) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (130) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (131) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (132) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (133) functions -> . empty
    (157) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions                      shift and go to state 86
    empty                          shift and go to state 20

state 58

    (137) functions2 -> ID saveFunction . LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY

    LPAREN          shift and go to state 87


state 59

    (130) functions -> FUNCTION CHAR saveFunType functions2 endFunc . functions
    (129) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (130) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (131) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (132) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (133) functions -> . empty
    (157) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions                      shift and go to state 88
    empty                          shift and go to state 20

state 60

    (131) functions -> FUNCTION FLOAT saveFunType functions2 endFunc . functions
    (129) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (130) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (131) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (132) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (133) functions -> . empty
    (157) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions                      shift and go to state 89
    empty                          shift and go to state 20

state 61

    (132) functions -> FUNCTION VOID saveFunType functions1 endFunc . functions
    (129) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (130) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (131) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (132) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (133) functions -> . empty
    (157) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 157 (empty -> .)
    $end            reduce using rule 157 (empty -> .)

    functions                      shift and go to state 90
    empty                          shift and go to state 20

state 62

    (135) functions1 -> ID saveFunction . LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY

    LPAREN          shift and go to state 91


state 63

    (114) var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .

    INT             reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    CHAR            reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FLOAT           reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FUNCTION        reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    PRINCIPAL       reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    $end            reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    ID              reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    READ            reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WRITE           reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FOR             reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WHILE           reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    IF              reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RETURN          reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    SORT            reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RCURLY          reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    LCURLY          reduce using rule 114 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)


state 64

    (117) var1 -> ID COMMA var1 . addVar
    (122) addVar -> .

    SEMMICOLON      reduce using rule 122 (addVar -> .)

    addVar                         shift and go to state 92

state 65

    (118) var1 -> ID createArr arr .
    (119) var1 -> ID createArr arr . COMMA var1 addVar

    SEMMICOLON      reduce using rule 118 (var1 -> ID createArr arr .)
    COMMA           shift and go to state 93


state 66

    (127) arr -> LBRACKET . CTEI setArraySize RBRACKET

    CTEI            shift and go to state 94


state 67

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements . RCURLY

    RCURLY          shift and go to state 95


state 68

    (10) statements -> assign . SEMMICOLON statements

    SEMMICOLON      shift and go to state 96


state 69

    (11) statements -> functionCall . SEMMICOLON statements

    SEMMICOLON      shift and go to state 97


state 70

    (12) statements -> read . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    SEMMICOLON      reduce using rule 157 (empty -> .)

    read                           shift and go to state 70
    statements                     shift and go to state 98
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 71

    (13) statements -> write . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    SEMMICOLON      reduce using rule 157 (empty -> .)

    write                          shift and go to state 71
    statements                     shift and go to state 99
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 72

    (14) statements -> for . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    for                            shift and go to state 72
    statements                     shift and go to state 100
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 73

    (15) statements -> while . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    while                          shift and go to state 73
    statements                     shift and go to state 101
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 74

    (16) statements -> if . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    if                             shift and go to state 74
    statements                     shift and go to state 102
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 75

    (17) statements -> return . SEMMICOLON statements

    SEMMICOLON      shift and go to state 103


state 76

    (18) statements -> sort . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    SEMMICOLON      reduce using rule 157 (empty -> .)

    sort                           shift and go to state 76
    statements                     shift and go to state 104
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    empty                          shift and go to state 77

state 77

    (19) statements -> empty .

    RCURLY          reduce using rule 19 (statements -> empty .)
    SEMMICOLON      reduce using rule 19 (statements -> empty .)


state 78

    (20) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> ID . arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> ID . add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> ID . validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (25) add_id2 -> .
    (104) arrStatement -> . LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (105) arrStatement -> . empty
    (29) validateFunctionID -> .
    (157) empty -> .

  ! reduce/reduce conflict for EQUALS resolved using rule 25 (add_id2 -> .)
    EQUALS          reduce using rule 25 (add_id2 -> .)
    LBRACKET        shift and go to state 108
    LPAREN          reduce using rule 29 (validateFunctionID -> .)

  ! EQUALS          [ reduce using rule 157 (empty -> .) ]

    add_id2                        shift and go to state 105
    arrStatement                   shift and go to state 106
    validateFunctionID             shift and go to state 107
    empty                          shift and go to state 109

state 79

    (39) read -> READ . operatorRead LPAREN paramReadAux RPAREN
    (44) operatorRead -> .

    LPAREN          reduce using rule 44 (operatorRead -> .)

    operatorRead                   shift and go to state 110

state 80

    (46) write -> WRITE . writeOperator LPAREN paramWrite RPAREN
    (51) writeOperator -> .

    LPAREN          reduce using rule 51 (writeOperator -> .)

    writeOperator                  shift and go to state 111

state 81

    (58) for -> FOR . forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (59) forOP -> .

    ID              reduce using rule 59 (forOP -> .)

    forOP                          shift and go to state 112

state 82

    (61) while -> WHILE . whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (62) whileOP -> .

    LPAREN          reduce using rule 62 (whileOP -> .)

    whileOP                        shift and go to state 113

state 83

    (64) if -> IF . LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    LPAREN          shift and go to state 114


state 84

    (155) return -> RETURN . LPAREN exp generateQuadRETURN RPAREN

    LPAREN          shift and go to state 115


state 85

    (53) sort -> SORT . sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (54) sortOperator -> .

    LPAREN          reduce using rule 54 (sortOperator -> .)

    sortOperator                   shift and go to state 116

state 86

    (129) functions -> FUNCTION INT saveFunType functions2 endFunc functions .

    PRINCIPAL       reduce using rule 129 (functions -> FUNCTION INT saveFunType functions2 endFunc functions .)
    $end            reduce using rule 129 (functions -> FUNCTION INT saveFunType functions2 endFunc functions .)


state 87

    (137) functions2 -> ID saveFunction LPAREN . parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (141) parameters -> . paramsAux
    (142) parameters -> . empty
    (143) paramsAux -> . INT saveTypeVar TWOPOINTS ID addParameter nextParam
    (144) paramsAux -> . FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
    (145) paramsAux -> . CHAR saveTypeVar TWOPOINTS ID addParameter nextParam
    (157) empty -> .

    INT             shift and go to state 120
    FLOAT           shift and go to state 121
    CHAR            shift and go to state 122
    RPAREN          reduce using rule 157 (empty -> .)

    parameters                     shift and go to state 117
    paramsAux                      shift and go to state 118
    empty                          shift and go to state 119

state 88

    (130) functions -> FUNCTION CHAR saveFunType functions2 endFunc functions .

    PRINCIPAL       reduce using rule 130 (functions -> FUNCTION CHAR saveFunType functions2 endFunc functions .)
    $end            reduce using rule 130 (functions -> FUNCTION CHAR saveFunType functions2 endFunc functions .)


state 89

    (131) functions -> FUNCTION FLOAT saveFunType functions2 endFunc functions .

    PRINCIPAL       reduce using rule 131 (functions -> FUNCTION FLOAT saveFunType functions2 endFunc functions .)
    $end            reduce using rule 131 (functions -> FUNCTION FLOAT saveFunType functions2 endFunc functions .)


state 90

    (132) functions -> FUNCTION VOID saveFunType functions1 endFunc functions .

    PRINCIPAL       reduce using rule 132 (functions -> FUNCTION VOID saveFunType functions1 endFunc functions .)
    $end            reduce using rule 132 (functions -> FUNCTION VOID saveFunType functions1 endFunc functions .)


state 91

    (135) functions1 -> ID saveFunction LPAREN . parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (141) parameters -> . paramsAux
    (142) parameters -> . empty
    (143) paramsAux -> . INT saveTypeVar TWOPOINTS ID addParameter nextParam
    (144) paramsAux -> . FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
    (145) paramsAux -> . CHAR saveTypeVar TWOPOINTS ID addParameter nextParam
    (157) empty -> .

    INT             shift and go to state 120
    FLOAT           shift and go to state 121
    CHAR            shift and go to state 122
    RPAREN          reduce using rule 157 (empty -> .)

    parameters                     shift and go to state 123
    paramsAux                      shift and go to state 118
    empty                          shift and go to state 119

state 92

    (117) var1 -> ID COMMA var1 addVar .

    SEMMICOLON      reduce using rule 117 (var1 -> ID COMMA var1 addVar .)


state 93

    (119) var1 -> ID createArr arr COMMA . var1 addVar
    (116) var1 -> . ID
    (117) var1 -> . ID COMMA var1 addVar
    (118) var1 -> . ID createArr arr
    (119) var1 -> . ID createArr arr COMMA var1 addVar
    (120) var1 -> . empty
    (157) empty -> .

    ID              shift and go to state 42
    SEMMICOLON      reduce using rule 157 (empty -> .)

    var1                           shift and go to state 124
    empty                          shift and go to state 43

state 94

    (127) arr -> LBRACKET CTEI . setArraySize RBRACKET
    (128) setArraySize -> .

    RBRACKET        reduce using rule 128 (setArraySize -> .)

    setArraySize                   shift and go to state 125

state 95

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .

    $end            reduce using rule 7 (principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .)


state 96

    (10) statements -> assign SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    assign                         shift and go to state 68
    statements                     shift and go to state 126
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 97

    (11) statements -> functionCall SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    functionCall                   shift and go to state 69
    statements                     shift and go to state 127
    assign                         shift and go to state 68
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 98

    (12) statements -> read statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 128


state 99

    (13) statements -> write statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 129


state 100

    (14) statements -> for statements .

    RCURLY          reduce using rule 14 (statements -> for statements .)
    SEMMICOLON      reduce using rule 14 (statements -> for statements .)


state 101

    (15) statements -> while statements .

    RCURLY          reduce using rule 15 (statements -> while statements .)
    SEMMICOLON      reduce using rule 15 (statements -> while statements .)


state 102

    (16) statements -> if statements .

    RCURLY          reduce using rule 16 (statements -> if statements .)
    SEMMICOLON      reduce using rule 16 (statements -> if statements .)


state 103

    (17) statements -> return SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    return                         shift and go to state 75
    statements                     shift and go to state 130
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 104

    (18) statements -> sort statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 131


state 105

    (20) assign -> ID add_id2 . EQUALS saveOperator exp generateAssignQuad
    (22) assign -> ID add_id2 . EQUALS saveOperator functionCall generateAssignQuad

    EQUALS          shift and go to state 132


state 106

    (21) assign -> ID arrStatement . EQUALS saveOperator exp generateAssignQuad

    EQUALS          shift and go to state 133


state 107

    (28) functionCall -> ID validateFunctionID . functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (38) functionERA -> .

    LPAREN          reduce using rule 38 (functionERA -> .)

    functionERA                    shift and go to state 134

state 108

    (104) arrStatement -> LBRACKET . checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (107) checkArray -> .

    ID              reduce using rule 107 (checkArray -> .)
    CTEI            reduce using rule 107 (checkArray -> .)
    CTEF            reduce using rule 107 (checkArray -> .)
    CTEC            reduce using rule 107 (checkArray -> .)
    CTESTRING       reduce using rule 107 (checkArray -> .)
    LPAREN          reduce using rule 107 (checkArray -> .)
    RBRACKET        reduce using rule 107 (checkArray -> .)
    OR              reduce using rule 107 (checkArray -> .)
    AND             reduce using rule 107 (checkArray -> .)
    GT              reduce using rule 107 (checkArray -> .)
    LT              reduce using rule 107 (checkArray -> .)
    GTE             reduce using rule 107 (checkArray -> .)
    LTE             reduce using rule 107 (checkArray -> .)
    NE              reduce using rule 107 (checkArray -> .)
    COMPARE         reduce using rule 107 (checkArray -> .)
    PLUS            reduce using rule 107 (checkArray -> .)
    MINUS           reduce using rule 107 (checkArray -> .)
    MUL             reduce using rule 107 (checkArray -> .)
    DIV             reduce using rule 107 (checkArray -> .)

    checkArray                     shift and go to state 135

state 109

    (105) arrStatement -> empty .

    EQUALS          reduce using rule 105 (arrStatement -> empty .)
    MUL             reduce using rule 105 (arrStatement -> empty .)
    DIV             reduce using rule 105 (arrStatement -> empty .)
    PLUS            reduce using rule 105 (arrStatement -> empty .)
    MINUS           reduce using rule 105 (arrStatement -> empty .)
    GT              reduce using rule 105 (arrStatement -> empty .)
    LT              reduce using rule 105 (arrStatement -> empty .)
    GTE             reduce using rule 105 (arrStatement -> empty .)
    LTE             reduce using rule 105 (arrStatement -> empty .)
    NE              reduce using rule 105 (arrStatement -> empty .)
    COMPARE         reduce using rule 105 (arrStatement -> empty .)
    AND             reduce using rule 105 (arrStatement -> empty .)
    OR              reduce using rule 105 (arrStatement -> empty .)
    RPAREN          reduce using rule 105 (arrStatement -> empty .)
    RBRACKET        reduce using rule 105 (arrStatement -> empty .)
    COMMA           reduce using rule 105 (arrStatement -> empty .)
    SEMMICOLON      reduce using rule 105 (arrStatement -> empty .)
    TO              reduce using rule 105 (arrStatement -> empty .)
    ID              reduce using rule 105 (arrStatement -> empty .)
    CTEI            reduce using rule 105 (arrStatement -> empty .)
    CTEF            reduce using rule 105 (arrStatement -> empty .)
    CTEC            reduce using rule 105 (arrStatement -> empty .)
    CTESTRING       reduce using rule 105 (arrStatement -> empty .)
    LPAREN          reduce using rule 105 (arrStatement -> empty .)


state 110

    (39) read -> READ operatorRead . LPAREN paramReadAux RPAREN

    LPAREN          shift and go to state 136


state 111

    (46) write -> WRITE writeOperator . LPAREN paramWrite RPAREN

    LPAREN          shift and go to state 137


state 112

    (58) for -> FOR forOP . assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad

    ID              shift and go to state 139

    assign                         shift and go to state 138

state 113

    (61) while -> WHILE whileOP . LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    LPAREN          shift and go to state 140


state 114

    (64) if -> IF LPAREN . exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)

    exp                            shift and go to state 142
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 115

    (155) return -> RETURN LPAREN . exp generateQuadRETURN RPAREN
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)

    exp                            shift and go to state 156
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 116

    (53) sort -> SORT sortOperator . LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT

    LPAREN          shift and go to state 157


state 117

    (137) functions2 -> ID saveFunction LPAREN parameters . RPAREN vars LCURLY setStartDirection statements RCURLY

    RPAREN          shift and go to state 158


state 118

    (141) parameters -> paramsAux .

    RPAREN          reduce using rule 141 (parameters -> paramsAux .)


state 119

    (142) parameters -> empty .

    RPAREN          reduce using rule 142 (parameters -> empty .)


state 120

    (143) paramsAux -> INT . saveTypeVar TWOPOINTS ID addParameter nextParam
    (123) saveTypeVar -> .

    TWOPOINTS       reduce using rule 123 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 159

state 121

    (144) paramsAux -> FLOAT . saveTypeVar TWOPOINTS ID addParameter nextParam
    (123) saveTypeVar -> .

    TWOPOINTS       reduce using rule 123 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 160

state 122

    (145) paramsAux -> CHAR . saveTypeVar TWOPOINTS ID addParameter nextParam
    (123) saveTypeVar -> .

    TWOPOINTS       reduce using rule 123 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 161

state 123

    (135) functions1 -> ID saveFunction LPAREN parameters . RPAREN vars LCURLY setStartDirection statements RCURLY

    RPAREN          shift and go to state 162


state 124

    (119) var1 -> ID createArr arr COMMA var1 . addVar
    (122) addVar -> .

    SEMMICOLON      reduce using rule 122 (addVar -> .)

    addVar                         shift and go to state 163

state 125

    (127) arr -> LBRACKET CTEI setArraySize . RBRACKET

    RBRACKET        shift and go to state 164


state 126

    (10) statements -> assign SEMMICOLON statements .

    RCURLY          reduce using rule 10 (statements -> assign SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 10 (statements -> assign SEMMICOLON statements .)


state 127

    (11) statements -> functionCall SEMMICOLON statements .

    RCURLY          reduce using rule 11 (statements -> functionCall SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 11 (statements -> functionCall SEMMICOLON statements .)


state 128

    (12) statements -> read statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    read                           shift and go to state 70
    statements                     shift and go to state 165
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 129

    (13) statements -> write statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    write                          shift and go to state 71
    statements                     shift and go to state 166
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 130

    (17) statements -> return SEMMICOLON statements .

    RCURLY          reduce using rule 17 (statements -> return SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 17 (statements -> return SEMMICOLON statements .)


state 131

    (18) statements -> sort statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    sort                           shift and go to state 76
    statements                     shift and go to state 167
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    empty                          shift and go to state 77

state 132

    (20) assign -> ID add_id2 EQUALS . saveOperator exp generateAssignQuad
    (22) assign -> ID add_id2 EQUALS . saveOperator functionCall generateAssignQuad
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    GT              reduce using rule 110 (saveOperator -> .)
    LT              reduce using rule 110 (saveOperator -> .)
    GTE             reduce using rule 110 (saveOperator -> .)
    LTE             reduce using rule 110 (saveOperator -> .)
    NE              reduce using rule 110 (saveOperator -> .)
    COMPARE         reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 168

state 133

    (21) assign -> ID arrStatement EQUALS . saveOperator exp generateAssignQuad
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    GT              reduce using rule 110 (saveOperator -> .)
    LT              reduce using rule 110 (saveOperator -> .)
    GTE             reduce using rule 110 (saveOperator -> .)
    LTE             reduce using rule 110 (saveOperator -> .)
    NE              reduce using rule 110 (saveOperator -> .)
    COMPARE         reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 169

state 134

    (28) functionCall -> ID validateFunctionID functionERA . LPAREN expAux verifyParams RPAREN generateQuadGOSUB

    LPAREN          shift and go to state 170


state 135

    (104) arrStatement -> LBRACKET checkArray . exp generateQuadVER RBRACKET getArrFinalAddress
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)

    exp                            shift and go to state 171
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 136

    (39) read -> READ operatorRead LPAREN . paramReadAux RPAREN
    (42) paramReadAux -> . exp generateQuadREAD
    (43) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)

    paramReadAux                   shift and go to state 172
    exp                            shift and go to state 173
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 137

    (46) write -> WRITE writeOperator LPAREN . paramWrite RPAREN
    (47) paramWrite -> . paramWriteAux
    (48) paramWrite -> . empty
    (49) paramWriteAux -> . exp generateQuadPRINT
    (50) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (157) empty -> .
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 157 (empty -> .)
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141

    paramWrite                     shift and go to state 174
    paramWriteAux                  shift and go to state 175
    empty                          shift and go to state 176
    exp                            shift and go to state 177
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154

state 138

    (58) for -> FOR forOP assign . TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    TO              shift and go to state 178


state 139

    (20) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> ID . arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> ID . add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (25) add_id2 -> .
    (104) arrStatement -> . LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (105) arrStatement -> . empty
    (157) empty -> .

  ! reduce/reduce conflict for EQUALS resolved using rule 25 (add_id2 -> .)
    EQUALS          reduce using rule 25 (add_id2 -> .)
    LBRACKET        shift and go to state 108

  ! EQUALS          [ reduce using rule 157 (empty -> .) ]

    add_id2                        shift and go to state 105
    arrStatement                   shift and go to state 106
    empty                          shift and go to state 109

state 140

    (61) while -> WHILE whileOP LPAREN . exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)

    exp                            shift and go to state 179
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 141

    (99) pexp -> LPAREN . exp RPAREN
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)

    exp                            shift and go to state 180
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 142

    (64) if -> IF LPAREN exp . RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    RPAREN          shift and go to state 181


state 143

    (70) exp -> nexp . generateQuadOR
    (71) exp -> nexp . generateQuadOR OR saveOperator nexp
    (72) generateQuadOR -> .

    OR              reduce using rule 72 (generateQuadOR -> .)
    RPAREN          reduce using rule 72 (generateQuadOR -> .)
    RBRACKET        reduce using rule 72 (generateQuadOR -> .)
    COMMA           reduce using rule 72 (generateQuadOR -> .)
    SEMMICOLON      reduce using rule 72 (generateQuadOR -> .)
    TO              reduce using rule 72 (generateQuadOR -> .)

    generateQuadOR                 shift and go to state 182

state 144

    (73) nexp -> compexp . generateQuadAND
    (74) nexp -> compexp . generateQuadAND AND saveOperator compexp
    (75) generateQuadAND -> .

    AND             reduce using rule 75 (generateQuadAND -> .)
    OR              reduce using rule 75 (generateQuadAND -> .)
    RPAREN          reduce using rule 75 (generateQuadAND -> .)
    RBRACKET        reduce using rule 75 (generateQuadAND -> .)
    COMMA           reduce using rule 75 (generateQuadAND -> .)
    SEMMICOLON      reduce using rule 75 (generateQuadAND -> .)
    TO              reduce using rule 75 (generateQuadAND -> .)

    generateQuadAND                shift and go to state 183

state 145

    (76) compexp -> sumexp .
    (78) compexp1 -> sumexp . GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> sumexp . LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> sumexp . GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> sumexp . LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> sumexp . NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> sumexp . COMPARE saveOperator sumexp generateQuadCOMPARE

    AND             reduce using rule 76 (compexp -> sumexp .)
    OR              reduce using rule 76 (compexp -> sumexp .)
    RPAREN          reduce using rule 76 (compexp -> sumexp .)
    RBRACKET        reduce using rule 76 (compexp -> sumexp .)
    COMMA           reduce using rule 76 (compexp -> sumexp .)
    SEMMICOLON      reduce using rule 76 (compexp -> sumexp .)
    TO              reduce using rule 76 (compexp -> sumexp .)
    GT              shift and go to state 184
    LT              shift and go to state 185
    GTE             shift and go to state 186
    LTE             shift and go to state 187
    NE              shift and go to state 188
    COMPARE         shift and go to state 189


state 146

    (77) compexp -> compexp1 . sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    sumexp                         shift and go to state 190
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 147

    (85) sumexp -> mulexp .
    (86) sumexp -> mulexp . PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> mulexp . MINUS saveOperator mulexp generateQuadSUM

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 85 (sumexp -> mulexp .)
    LT              reduce using rule 85 (sumexp -> mulexp .)
    GTE             reduce using rule 85 (sumexp -> mulexp .)
    LTE             reduce using rule 85 (sumexp -> mulexp .)
    NE              reduce using rule 85 (sumexp -> mulexp .)
    COMPARE         reduce using rule 85 (sumexp -> mulexp .)
    AND             reduce using rule 85 (sumexp -> mulexp .)
    OR              reduce using rule 85 (sumexp -> mulexp .)
    RPAREN          reduce using rule 85 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 85 (sumexp -> mulexp .)
    COMMA           reduce using rule 85 (sumexp -> mulexp .)
    SEMMICOLON      reduce using rule 85 (sumexp -> mulexp .)
    TO              reduce using rule 85 (sumexp -> mulexp .)
    ID              reduce using rule 85 (sumexp -> mulexp .)
    CTEI            reduce using rule 85 (sumexp -> mulexp .)
    CTEF            reduce using rule 85 (sumexp -> mulexp .)
    CTEC            reduce using rule 85 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 85 (sumexp -> mulexp .)
    LPAREN          reduce using rule 85 (sumexp -> mulexp .)
    MUL             reduce using rule 85 (sumexp -> mulexp .)
    DIV             reduce using rule 85 (sumexp -> mulexp .)
    PLUS            shift and go to state 191
    MINUS           shift and go to state 192

  ! PLUS            [ reduce using rule 85 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 85 (sumexp -> mulexp .) ]


state 148

    (89) mulexp -> pexp .
    (90) mulexp -> pexp . MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> pexp . DIV saveOperator pexp generateQuadMUL

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 89 (mulexp -> pexp .)
    MINUS           reduce using rule 89 (mulexp -> pexp .)
    GT              reduce using rule 89 (mulexp -> pexp .)
    LT              reduce using rule 89 (mulexp -> pexp .)
    GTE             reduce using rule 89 (mulexp -> pexp .)
    LTE             reduce using rule 89 (mulexp -> pexp .)
    NE              reduce using rule 89 (mulexp -> pexp .)
    COMPARE         reduce using rule 89 (mulexp -> pexp .)
    AND             reduce using rule 89 (mulexp -> pexp .)
    OR              reduce using rule 89 (mulexp -> pexp .)
    RPAREN          reduce using rule 89 (mulexp -> pexp .)
    RBRACKET        reduce using rule 89 (mulexp -> pexp .)
    COMMA           reduce using rule 89 (mulexp -> pexp .)
    SEMMICOLON      reduce using rule 89 (mulexp -> pexp .)
    TO              reduce using rule 89 (mulexp -> pexp .)
    ID              reduce using rule 89 (mulexp -> pexp .)
    CTEI            reduce using rule 89 (mulexp -> pexp .)
    CTEF            reduce using rule 89 (mulexp -> pexp .)
    CTEC            reduce using rule 89 (mulexp -> pexp .)
    CTESTRING       reduce using rule 89 (mulexp -> pexp .)
    LPAREN          reduce using rule 89 (mulexp -> pexp .)
    MUL             shift and go to state 193
    DIV             shift and go to state 194

  ! MUL             [ reduce using rule 89 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 89 (mulexp -> pexp .) ]


state 149

    (93) pexp -> ID . add_id2
    (100) pexp -> ID . arrStatement
    (102) functionCallExp -> ID . LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (25) add_id2 -> .
    (104) arrStatement -> . LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (105) arrStatement -> . empty
    (157) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for MUL resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for DIV resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for GT resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for LT resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for GTE resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for LTE resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for NE resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for COMPARE resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for AND resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for OR resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for SEMMICOLON resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for TO resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for ID resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for CTEI resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for CTEF resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for CTEC resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for CTESTRING resolved using rule 25 (add_id2 -> .)
  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 197
    MUL             reduce using rule 25 (add_id2 -> .)
    DIV             reduce using rule 25 (add_id2 -> .)
    PLUS            reduce using rule 25 (add_id2 -> .)
    MINUS           reduce using rule 25 (add_id2 -> .)
    GT              reduce using rule 25 (add_id2 -> .)
    LT              reduce using rule 25 (add_id2 -> .)
    GTE             reduce using rule 25 (add_id2 -> .)
    LTE             reduce using rule 25 (add_id2 -> .)
    NE              reduce using rule 25 (add_id2 -> .)
    COMPARE         reduce using rule 25 (add_id2 -> .)
    AND             reduce using rule 25 (add_id2 -> .)
    OR              reduce using rule 25 (add_id2 -> .)
    RPAREN          reduce using rule 25 (add_id2 -> .)
    RBRACKET        reduce using rule 25 (add_id2 -> .)
    COMMA           reduce using rule 25 (add_id2 -> .)
    SEMMICOLON      reduce using rule 25 (add_id2 -> .)
    TO              reduce using rule 25 (add_id2 -> .)
    ID              reduce using rule 25 (add_id2 -> .)
    CTEI            reduce using rule 25 (add_id2 -> .)
    CTEF            reduce using rule 25 (add_id2 -> .)
    CTEC            reduce using rule 25 (add_id2 -> .)
    CTESTRING       reduce using rule 25 (add_id2 -> .)
    LBRACKET        shift and go to state 108

  ! LPAREN          [ reduce using rule 25 (add_id2 -> .) ]
  ! MUL             [ reduce using rule 157 (empty -> .) ]
  ! DIV             [ reduce using rule 157 (empty -> .) ]
  ! PLUS            [ reduce using rule 157 (empty -> .) ]
  ! MINUS           [ reduce using rule 157 (empty -> .) ]
  ! GT              [ reduce using rule 157 (empty -> .) ]
  ! LT              [ reduce using rule 157 (empty -> .) ]
  ! GTE             [ reduce using rule 157 (empty -> .) ]
  ! LTE             [ reduce using rule 157 (empty -> .) ]
  ! NE              [ reduce using rule 157 (empty -> .) ]
  ! COMPARE         [ reduce using rule 157 (empty -> .) ]
  ! AND             [ reduce using rule 157 (empty -> .) ]
  ! OR              [ reduce using rule 157 (empty -> .) ]
  ! RPAREN          [ reduce using rule 157 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 157 (empty -> .) ]
  ! COMMA           [ reduce using rule 157 (empty -> .) ]
  ! SEMMICOLON      [ reduce using rule 157 (empty -> .) ]
  ! TO              [ reduce using rule 157 (empty -> .) ]
  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    add_id2                        shift and go to state 195
    arrStatement                   shift and go to state 196
    empty                          shift and go to state 109

state 150

    (94) pexp -> CTEI . saveCTE
    (109) saveCTE -> .

    MUL             reduce using rule 109 (saveCTE -> .)
    DIV             reduce using rule 109 (saveCTE -> .)
    PLUS            reduce using rule 109 (saveCTE -> .)
    MINUS           reduce using rule 109 (saveCTE -> .)
    GT              reduce using rule 109 (saveCTE -> .)
    LT              reduce using rule 109 (saveCTE -> .)
    GTE             reduce using rule 109 (saveCTE -> .)
    LTE             reduce using rule 109 (saveCTE -> .)
    NE              reduce using rule 109 (saveCTE -> .)
    COMPARE         reduce using rule 109 (saveCTE -> .)
    AND             reduce using rule 109 (saveCTE -> .)
    OR              reduce using rule 109 (saveCTE -> .)
    RPAREN          reduce using rule 109 (saveCTE -> .)
    RBRACKET        reduce using rule 109 (saveCTE -> .)
    COMMA           reduce using rule 109 (saveCTE -> .)
    SEMMICOLON      reduce using rule 109 (saveCTE -> .)
    TO              reduce using rule 109 (saveCTE -> .)
    ID              reduce using rule 109 (saveCTE -> .)
    CTEI            reduce using rule 109 (saveCTE -> .)
    CTEF            reduce using rule 109 (saveCTE -> .)
    CTEC            reduce using rule 109 (saveCTE -> .)
    CTESTRING       reduce using rule 109 (saveCTE -> .)
    LPAREN          reduce using rule 109 (saveCTE -> .)

    saveCTE                        shift and go to state 198

state 151

    (95) pexp -> CTEF . saveCTE
    (109) saveCTE -> .

    MUL             reduce using rule 109 (saveCTE -> .)
    DIV             reduce using rule 109 (saveCTE -> .)
    PLUS            reduce using rule 109 (saveCTE -> .)
    MINUS           reduce using rule 109 (saveCTE -> .)
    GT              reduce using rule 109 (saveCTE -> .)
    LT              reduce using rule 109 (saveCTE -> .)
    GTE             reduce using rule 109 (saveCTE -> .)
    LTE             reduce using rule 109 (saveCTE -> .)
    NE              reduce using rule 109 (saveCTE -> .)
    COMPARE         reduce using rule 109 (saveCTE -> .)
    AND             reduce using rule 109 (saveCTE -> .)
    OR              reduce using rule 109 (saveCTE -> .)
    RPAREN          reduce using rule 109 (saveCTE -> .)
    RBRACKET        reduce using rule 109 (saveCTE -> .)
    COMMA           reduce using rule 109 (saveCTE -> .)
    SEMMICOLON      reduce using rule 109 (saveCTE -> .)
    TO              reduce using rule 109 (saveCTE -> .)
    ID              reduce using rule 109 (saveCTE -> .)
    CTEI            reduce using rule 109 (saveCTE -> .)
    CTEF            reduce using rule 109 (saveCTE -> .)
    CTEC            reduce using rule 109 (saveCTE -> .)
    CTESTRING       reduce using rule 109 (saveCTE -> .)
    LPAREN          reduce using rule 109 (saveCTE -> .)

    saveCTE                        shift and go to state 199

state 152

    (96) pexp -> CTEC . saveCTE
    (109) saveCTE -> .

    MUL             reduce using rule 109 (saveCTE -> .)
    DIV             reduce using rule 109 (saveCTE -> .)
    PLUS            reduce using rule 109 (saveCTE -> .)
    MINUS           reduce using rule 109 (saveCTE -> .)
    GT              reduce using rule 109 (saveCTE -> .)
    LT              reduce using rule 109 (saveCTE -> .)
    GTE             reduce using rule 109 (saveCTE -> .)
    LTE             reduce using rule 109 (saveCTE -> .)
    NE              reduce using rule 109 (saveCTE -> .)
    COMPARE         reduce using rule 109 (saveCTE -> .)
    AND             reduce using rule 109 (saveCTE -> .)
    OR              reduce using rule 109 (saveCTE -> .)
    RPAREN          reduce using rule 109 (saveCTE -> .)
    RBRACKET        reduce using rule 109 (saveCTE -> .)
    COMMA           reduce using rule 109 (saveCTE -> .)
    SEMMICOLON      reduce using rule 109 (saveCTE -> .)
    TO              reduce using rule 109 (saveCTE -> .)
    ID              reduce using rule 109 (saveCTE -> .)
    CTEI            reduce using rule 109 (saveCTE -> .)
    CTEF            reduce using rule 109 (saveCTE -> .)
    CTEC            reduce using rule 109 (saveCTE -> .)
    CTESTRING       reduce using rule 109 (saveCTE -> .)
    LPAREN          reduce using rule 109 (saveCTE -> .)

    saveCTE                        shift and go to state 200

state 153

    (97) pexp -> CTESTRING . saveCTE
    (109) saveCTE -> .

    MUL             reduce using rule 109 (saveCTE -> .)
    DIV             reduce using rule 109 (saveCTE -> .)
    PLUS            reduce using rule 109 (saveCTE -> .)
    MINUS           reduce using rule 109 (saveCTE -> .)
    GT              reduce using rule 109 (saveCTE -> .)
    LT              reduce using rule 109 (saveCTE -> .)
    GTE             reduce using rule 109 (saveCTE -> .)
    LTE             reduce using rule 109 (saveCTE -> .)
    NE              reduce using rule 109 (saveCTE -> .)
    COMPARE         reduce using rule 109 (saveCTE -> .)
    AND             reduce using rule 109 (saveCTE -> .)
    OR              reduce using rule 109 (saveCTE -> .)
    RPAREN          reduce using rule 109 (saveCTE -> .)
    RBRACKET        reduce using rule 109 (saveCTE -> .)
    COMMA           reduce using rule 109 (saveCTE -> .)
    SEMMICOLON      reduce using rule 109 (saveCTE -> .)
    TO              reduce using rule 109 (saveCTE -> .)
    ID              reduce using rule 109 (saveCTE -> .)
    CTEI            reduce using rule 109 (saveCTE -> .)
    CTEF            reduce using rule 109 (saveCTE -> .)
    CTEC            reduce using rule 109 (saveCTE -> .)
    CTESTRING       reduce using rule 109 (saveCTE -> .)
    LPAREN          reduce using rule 109 (saveCTE -> .)

    saveCTE                        shift and go to state 201

state 154

    (98) pexp -> functionCallExp .

    MUL             reduce using rule 98 (pexp -> functionCallExp .)
    DIV             reduce using rule 98 (pexp -> functionCallExp .)
    PLUS            reduce using rule 98 (pexp -> functionCallExp .)
    MINUS           reduce using rule 98 (pexp -> functionCallExp .)
    GT              reduce using rule 98 (pexp -> functionCallExp .)
    LT              reduce using rule 98 (pexp -> functionCallExp .)
    GTE             reduce using rule 98 (pexp -> functionCallExp .)
    LTE             reduce using rule 98 (pexp -> functionCallExp .)
    NE              reduce using rule 98 (pexp -> functionCallExp .)
    COMPARE         reduce using rule 98 (pexp -> functionCallExp .)
    AND             reduce using rule 98 (pexp -> functionCallExp .)
    OR              reduce using rule 98 (pexp -> functionCallExp .)
    RPAREN          reduce using rule 98 (pexp -> functionCallExp .)
    RBRACKET        reduce using rule 98 (pexp -> functionCallExp .)
    COMMA           reduce using rule 98 (pexp -> functionCallExp .)
    SEMMICOLON      reduce using rule 98 (pexp -> functionCallExp .)
    TO              reduce using rule 98 (pexp -> functionCallExp .)
    ID              reduce using rule 98 (pexp -> functionCallExp .)
    CTEI            reduce using rule 98 (pexp -> functionCallExp .)
    CTEF            reduce using rule 98 (pexp -> functionCallExp .)
    CTEC            reduce using rule 98 (pexp -> functionCallExp .)
    CTESTRING       reduce using rule 98 (pexp -> functionCallExp .)
    LPAREN          reduce using rule 98 (pexp -> functionCallExp .)


state 155

    (101) pexp -> empty .

    MUL             reduce using rule 101 (pexp -> empty .)
    DIV             reduce using rule 101 (pexp -> empty .)
    PLUS            reduce using rule 101 (pexp -> empty .)
    MINUS           reduce using rule 101 (pexp -> empty .)
    GT              reduce using rule 101 (pexp -> empty .)
    LT              reduce using rule 101 (pexp -> empty .)
    GTE             reduce using rule 101 (pexp -> empty .)
    LTE             reduce using rule 101 (pexp -> empty .)
    NE              reduce using rule 101 (pexp -> empty .)
    COMPARE         reduce using rule 101 (pexp -> empty .)
    AND             reduce using rule 101 (pexp -> empty .)
    OR              reduce using rule 101 (pexp -> empty .)
    RPAREN          reduce using rule 101 (pexp -> empty .)
    RBRACKET        reduce using rule 101 (pexp -> empty .)
    COMMA           reduce using rule 101 (pexp -> empty .)
    SEMMICOLON      reduce using rule 101 (pexp -> empty .)
    TO              reduce using rule 101 (pexp -> empty .)
    ID              reduce using rule 101 (pexp -> empty .)
    CTEI            reduce using rule 101 (pexp -> empty .)
    CTEF            reduce using rule 101 (pexp -> empty .)
    CTEC            reduce using rule 101 (pexp -> empty .)
    CTESTRING       reduce using rule 101 (pexp -> empty .)
    LPAREN          reduce using rule 101 (pexp -> empty .)


state 156

    (155) return -> RETURN LPAREN exp . generateQuadRETURN RPAREN
    (156) generateQuadRETURN -> .

    RPAREN          reduce using rule 156 (generateQuadRETURN -> .)

    generateQuadRETURN             shift and go to state 202

state 157

    (53) sort -> SORT sortOperator LPAREN . ID add_id2 verifyArray RPAREN generateQuadSORT

    ID              shift and go to state 203


state 158

    (137) functions2 -> ID saveFunction LPAREN parameters RPAREN . vars LCURLY setStartDirection statements RCURLY
    (111) vars -> . var
    (112) vars -> . empty
    (113) var -> . VARS var2
    (157) empty -> .

    VARS            shift and go to state 12
    LCURLY          reduce using rule 157 (empty -> .)

    vars                           shift and go to state 204
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 159

    (143) paramsAux -> INT saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 205


state 160

    (144) paramsAux -> FLOAT saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 206


state 161

    (145) paramsAux -> CHAR saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 207


state 162

    (135) functions1 -> ID saveFunction LPAREN parameters RPAREN . vars LCURLY setStartDirection statements RCURLY
    (111) vars -> . var
    (112) vars -> . empty
    (113) var -> . VARS var2
    (157) empty -> .

    VARS            shift and go to state 12
    LCURLY          reduce using rule 157 (empty -> .)

    vars                           shift and go to state 208
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 163

    (119) var1 -> ID createArr arr COMMA var1 addVar .

    SEMMICOLON      reduce using rule 119 (var1 -> ID createArr arr COMMA var1 addVar .)


state 164

    (127) arr -> LBRACKET CTEI setArraySize RBRACKET .

    COMMA           reduce using rule 127 (arr -> LBRACKET CTEI setArraySize RBRACKET .)
    SEMMICOLON      reduce using rule 127 (arr -> LBRACKET CTEI setArraySize RBRACKET .)


state 165

    (12) statements -> read statements SEMMICOLON statements .

    RCURLY          reduce using rule 12 (statements -> read statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 12 (statements -> read statements SEMMICOLON statements .)


state 166

    (13) statements -> write statements SEMMICOLON statements .

    RCURLY          reduce using rule 13 (statements -> write statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 13 (statements -> write statements SEMMICOLON statements .)


state 167

    (18) statements -> sort statements SEMMICOLON statements .

    RCURLY          reduce using rule 18 (statements -> sort statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 18 (statements -> sort statements SEMMICOLON statements .)


state 168

    (20) assign -> ID add_id2 EQUALS saveOperator . exp generateAssignQuad
    (22) assign -> ID add_id2 EQUALS saveOperator . functionCall generateAssignQuad
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 209
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    exp                            shift and go to state 210
    functionCall                   shift and go to state 211
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 169

    (21) assign -> ID arrStatement EQUALS saveOperator . exp generateAssignQuad
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    exp                            shift and go to state 212
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 170

    (28) functionCall -> ID validateFunctionID functionERA LPAREN . expAux verifyParams RPAREN generateQuadGOSUB
    (33) expAux -> . exp generateQuadPARAM paramsCount
    (34) expAux -> . exp generateQuadPARAM COMMA paramsCount expAux
    (35) expAux -> . empty
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (157) empty -> .
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 157 (empty -> .)
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141

    expAux                         shift and go to state 213
    exp                            shift and go to state 214
    empty                          shift and go to state 215
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154

state 171

    (104) arrStatement -> LBRACKET checkArray exp . generateQuadVER RBRACKET getArrFinalAddress
    (108) generateQuadVER -> .

    RBRACKET        reduce using rule 108 (generateQuadVER -> .)

    generateQuadVER                shift and go to state 216

state 172

    (39) read -> READ operatorRead LPAREN paramReadAux . RPAREN

    RPAREN          shift and go to state 217


state 173

    (42) paramReadAux -> exp . generateQuadREAD
    (43) paramReadAux -> exp . generateQuadREAD COMMA operatorRead paramReadAux
    (45) generateQuadREAD -> .

    COMMA           reduce using rule 45 (generateQuadREAD -> .)
    RPAREN          reduce using rule 45 (generateQuadREAD -> .)

    generateQuadREAD               shift and go to state 218

state 174

    (46) write -> WRITE writeOperator LPAREN paramWrite . RPAREN

    RPAREN          shift and go to state 219


state 175

    (47) paramWrite -> paramWriteAux .

    RPAREN          reduce using rule 47 (paramWrite -> paramWriteAux .)


state 176

    (48) paramWrite -> empty .
    (101) pexp -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 48 (paramWrite -> empty .)
    RPAREN          reduce using rule 48 (paramWrite -> empty .)
    MUL             reduce using rule 101 (pexp -> empty .)
    DIV             reduce using rule 101 (pexp -> empty .)
    PLUS            reduce using rule 101 (pexp -> empty .)
    MINUS           reduce using rule 101 (pexp -> empty .)
    GT              reduce using rule 101 (pexp -> empty .)
    LT              reduce using rule 101 (pexp -> empty .)
    GTE             reduce using rule 101 (pexp -> empty .)
    LTE             reduce using rule 101 (pexp -> empty .)
    NE              reduce using rule 101 (pexp -> empty .)
    COMPARE         reduce using rule 101 (pexp -> empty .)
    AND             reduce using rule 101 (pexp -> empty .)
    OR              reduce using rule 101 (pexp -> empty .)
    COMMA           reduce using rule 101 (pexp -> empty .)

  ! RPAREN          [ reduce using rule 101 (pexp -> empty .) ]


state 177

    (49) paramWriteAux -> exp . generateQuadPRINT
    (50) paramWriteAux -> exp . generateQuadPRINT COMMA writeOperator paramWriteAux
    (52) generateQuadPRINT -> .

    COMMA           reduce using rule 52 (generateQuadPRINT -> .)
    RPAREN          reduce using rule 52 (generateQuadPRINT -> .)

    generateQuadPRINT              shift and go to state 220

state 178

    (58) for -> FOR forOP assign TO . CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    CTEI            shift and go to state 221


state 179

    (61) while -> WHILE whileOP LPAREN exp . RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    RPAREN          shift and go to state 222


state 180

    (99) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 223


state 181

    (64) if -> IF LPAREN exp RPAREN . generateQuadIF THEN LCURLY statements RCURLY else endIF
    (67) generateQuadIF -> .

    THEN            reduce using rule 67 (generateQuadIF -> .)

    generateQuadIF                 shift and go to state 224

state 182

    (70) exp -> nexp generateQuadOR .
    (71) exp -> nexp generateQuadOR . OR saveOperator nexp

    RPAREN          reduce using rule 70 (exp -> nexp generateQuadOR .)
    RBRACKET        reduce using rule 70 (exp -> nexp generateQuadOR .)
    COMMA           reduce using rule 70 (exp -> nexp generateQuadOR .)
    SEMMICOLON      reduce using rule 70 (exp -> nexp generateQuadOR .)
    TO              reduce using rule 70 (exp -> nexp generateQuadOR .)
    OR              shift and go to state 225


state 183

    (73) nexp -> compexp generateQuadAND .
    (74) nexp -> compexp generateQuadAND . AND saveOperator compexp

    OR              reduce using rule 73 (nexp -> compexp generateQuadAND .)
    RPAREN          reduce using rule 73 (nexp -> compexp generateQuadAND .)
    RBRACKET        reduce using rule 73 (nexp -> compexp generateQuadAND .)
    COMMA           reduce using rule 73 (nexp -> compexp generateQuadAND .)
    SEMMICOLON      reduce using rule 73 (nexp -> compexp generateQuadAND .)
    TO              reduce using rule 73 (nexp -> compexp generateQuadAND .)
    AND             shift and go to state 226


state 184

    (78) compexp1 -> sumexp GT . saveOperator sumexp generateQuadCOMPARE
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 227

state 185

    (79) compexp1 -> sumexp LT . saveOperator sumexp generateQuadCOMPARE
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 228

state 186

    (80) compexp1 -> sumexp GTE . saveOperator sumexp generateQuadCOMPARE
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 229

state 187

    (81) compexp1 -> sumexp LTE . saveOperator sumexp generateQuadCOMPARE
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 230

state 188

    (82) compexp1 -> sumexp NE . saveOperator sumexp generateQuadCOMPARE
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 231

state 189

    (83) compexp1 -> sumexp COMPARE . saveOperator sumexp generateQuadCOMPARE
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 232

state 190

    (77) compexp -> compexp1 sumexp .

    AND             reduce using rule 77 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 77 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 77 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 77 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 77 (compexp -> compexp1 sumexp .)
    SEMMICOLON      reduce using rule 77 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 77 (compexp -> compexp1 sumexp .)


state 191

    (86) sumexp -> mulexp PLUS . saveOperator mulexp generateQuadSUM
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    GT              reduce using rule 110 (saveOperator -> .)
    LT              reduce using rule 110 (saveOperator -> .)
    GTE             reduce using rule 110 (saveOperator -> .)
    LTE             reduce using rule 110 (saveOperator -> .)
    NE              reduce using rule 110 (saveOperator -> .)
    COMPARE         reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 233

state 192

    (87) sumexp -> mulexp MINUS . saveOperator mulexp generateQuadSUM
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    GT              reduce using rule 110 (saveOperator -> .)
    LT              reduce using rule 110 (saveOperator -> .)
    GTE             reduce using rule 110 (saveOperator -> .)
    LTE             reduce using rule 110 (saveOperator -> .)
    NE              reduce using rule 110 (saveOperator -> .)
    COMPARE         reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 234

state 193

    (90) mulexp -> pexp MUL . saveOperator pexp generateQuadMUL
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    GT              reduce using rule 110 (saveOperator -> .)
    LT              reduce using rule 110 (saveOperator -> .)
    GTE             reduce using rule 110 (saveOperator -> .)
    LTE             reduce using rule 110 (saveOperator -> .)
    NE              reduce using rule 110 (saveOperator -> .)
    COMPARE         reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 235

state 194

    (91) mulexp -> pexp DIV . saveOperator pexp generateQuadMUL
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    GT              reduce using rule 110 (saveOperator -> .)
    LT              reduce using rule 110 (saveOperator -> .)
    GTE             reduce using rule 110 (saveOperator -> .)
    LTE             reduce using rule 110 (saveOperator -> .)
    NE              reduce using rule 110 (saveOperator -> .)
    COMPARE         reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 236

state 195

    (93) pexp -> ID add_id2 .

    MUL             reduce using rule 93 (pexp -> ID add_id2 .)
    DIV             reduce using rule 93 (pexp -> ID add_id2 .)
    PLUS            reduce using rule 93 (pexp -> ID add_id2 .)
    MINUS           reduce using rule 93 (pexp -> ID add_id2 .)
    GT              reduce using rule 93 (pexp -> ID add_id2 .)
    LT              reduce using rule 93 (pexp -> ID add_id2 .)
    GTE             reduce using rule 93 (pexp -> ID add_id2 .)
    LTE             reduce using rule 93 (pexp -> ID add_id2 .)
    NE              reduce using rule 93 (pexp -> ID add_id2 .)
    COMPARE         reduce using rule 93 (pexp -> ID add_id2 .)
    AND             reduce using rule 93 (pexp -> ID add_id2 .)
    OR              reduce using rule 93 (pexp -> ID add_id2 .)
    RPAREN          reduce using rule 93 (pexp -> ID add_id2 .)
    RBRACKET        reduce using rule 93 (pexp -> ID add_id2 .)
    COMMA           reduce using rule 93 (pexp -> ID add_id2 .)
    SEMMICOLON      reduce using rule 93 (pexp -> ID add_id2 .)
    TO              reduce using rule 93 (pexp -> ID add_id2 .)
    ID              reduce using rule 93 (pexp -> ID add_id2 .)
    CTEI            reduce using rule 93 (pexp -> ID add_id2 .)
    CTEF            reduce using rule 93 (pexp -> ID add_id2 .)
    CTEC            reduce using rule 93 (pexp -> ID add_id2 .)
    CTESTRING       reduce using rule 93 (pexp -> ID add_id2 .)
    LPAREN          reduce using rule 93 (pexp -> ID add_id2 .)


state 196

    (100) pexp -> ID arrStatement .

    MUL             reduce using rule 100 (pexp -> ID arrStatement .)
    DIV             reduce using rule 100 (pexp -> ID arrStatement .)
    PLUS            reduce using rule 100 (pexp -> ID arrStatement .)
    MINUS           reduce using rule 100 (pexp -> ID arrStatement .)
    GT              reduce using rule 100 (pexp -> ID arrStatement .)
    LT              reduce using rule 100 (pexp -> ID arrStatement .)
    GTE             reduce using rule 100 (pexp -> ID arrStatement .)
    LTE             reduce using rule 100 (pexp -> ID arrStatement .)
    NE              reduce using rule 100 (pexp -> ID arrStatement .)
    COMPARE         reduce using rule 100 (pexp -> ID arrStatement .)
    AND             reduce using rule 100 (pexp -> ID arrStatement .)
    OR              reduce using rule 100 (pexp -> ID arrStatement .)
    RPAREN          reduce using rule 100 (pexp -> ID arrStatement .)
    RBRACKET        reduce using rule 100 (pexp -> ID arrStatement .)
    COMMA           reduce using rule 100 (pexp -> ID arrStatement .)
    SEMMICOLON      reduce using rule 100 (pexp -> ID arrStatement .)
    TO              reduce using rule 100 (pexp -> ID arrStatement .)
    ID              reduce using rule 100 (pexp -> ID arrStatement .)
    CTEI            reduce using rule 100 (pexp -> ID arrStatement .)
    CTEF            reduce using rule 100 (pexp -> ID arrStatement .)
    CTEC            reduce using rule 100 (pexp -> ID arrStatement .)
    CTESTRING       reduce using rule 100 (pexp -> ID arrStatement .)
    LPAREN          reduce using rule 100 (pexp -> ID arrStatement .)


state 197

    (102) functionCallExp -> ID LPAREN . validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (103) validateFunctionIDexp -> .

    ID              reduce using rule 103 (validateFunctionIDexp -> .)
    CTEI            reduce using rule 103 (validateFunctionIDexp -> .)
    CTEF            reduce using rule 103 (validateFunctionIDexp -> .)
    CTEC            reduce using rule 103 (validateFunctionIDexp -> .)
    CTESTRING       reduce using rule 103 (validateFunctionIDexp -> .)
    LPAREN          reduce using rule 103 (validateFunctionIDexp -> .)
    RPAREN          reduce using rule 103 (validateFunctionIDexp -> .)
    COMMA           reduce using rule 103 (validateFunctionIDexp -> .)
    OR              reduce using rule 103 (validateFunctionIDexp -> .)
    AND             reduce using rule 103 (validateFunctionIDexp -> .)
    GT              reduce using rule 103 (validateFunctionIDexp -> .)
    LT              reduce using rule 103 (validateFunctionIDexp -> .)
    GTE             reduce using rule 103 (validateFunctionIDexp -> .)
    LTE             reduce using rule 103 (validateFunctionIDexp -> .)
    NE              reduce using rule 103 (validateFunctionIDexp -> .)
    COMPARE         reduce using rule 103 (validateFunctionIDexp -> .)
    PLUS            reduce using rule 103 (validateFunctionIDexp -> .)
    MINUS           reduce using rule 103 (validateFunctionIDexp -> .)
    MUL             reduce using rule 103 (validateFunctionIDexp -> .)
    DIV             reduce using rule 103 (validateFunctionIDexp -> .)

    validateFunctionIDexp          shift and go to state 237

state 198

    (94) pexp -> CTEI saveCTE .

    MUL             reduce using rule 94 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 94 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 94 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 94 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 94 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 94 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 94 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 94 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 94 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 94 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 94 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 94 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 94 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 94 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 94 (pexp -> CTEI saveCTE .)
    SEMMICOLON      reduce using rule 94 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 94 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 94 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 94 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 94 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 94 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 94 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 94 (pexp -> CTEI saveCTE .)


state 199

    (95) pexp -> CTEF saveCTE .

    MUL             reduce using rule 95 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 95 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 95 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 95 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 95 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 95 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 95 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 95 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 95 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 95 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 95 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 95 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 95 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 95 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 95 (pexp -> CTEF saveCTE .)
    SEMMICOLON      reduce using rule 95 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 95 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 95 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 95 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 95 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 95 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 95 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 95 (pexp -> CTEF saveCTE .)


state 200

    (96) pexp -> CTEC saveCTE .

    MUL             reduce using rule 96 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 96 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 96 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 96 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 96 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 96 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 96 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 96 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 96 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 96 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 96 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 96 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 96 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 96 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 96 (pexp -> CTEC saveCTE .)
    SEMMICOLON      reduce using rule 96 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 96 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 96 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 96 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 96 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 96 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 96 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 96 (pexp -> CTEC saveCTE .)


state 201

    (97) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    SEMMICOLON      reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 97 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 97 (pexp -> CTESTRING saveCTE .)


state 202

    (155) return -> RETURN LPAREN exp generateQuadRETURN . RPAREN

    RPAREN          shift and go to state 238


state 203

    (53) sort -> SORT sortOperator LPAREN ID . add_id2 verifyArray RPAREN generateQuadSORT
    (25) add_id2 -> .

    RPAREN          reduce using rule 25 (add_id2 -> .)

    add_id2                        shift and go to state 239

state 204

    (137) functions2 -> ID saveFunction LPAREN parameters RPAREN vars . LCURLY setStartDirection statements RCURLY

    LCURLY          shift and go to state 240


state 205

    (143) paramsAux -> INT saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 241


state 206

    (144) paramsAux -> FLOAT saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 242


state 207

    (145) paramsAux -> CHAR saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 243


state 208

    (135) functions1 -> ID saveFunction LPAREN parameters RPAREN vars . LCURLY setStartDirection statements RCURLY

    LCURLY          shift and go to state 244


state 209

    (28) functionCall -> ID . validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (93) pexp -> ID . add_id2
    (100) pexp -> ID . arrStatement
    (102) functionCallExp -> ID . LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (29) validateFunctionID -> .
    (25) add_id2 -> .
    (104) arrStatement -> . LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (105) arrStatement -> . empty
    (157) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for MUL resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for DIV resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for GT resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for LT resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for GTE resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for LTE resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for NE resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for COMPARE resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for AND resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for OR resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for SEMMICOLON resolved using rule 25 (add_id2 -> .)
  ! reduce/reduce conflict for TO resolved using rule 25 (add_id2 -> .)
    LPAREN          shift and go to state 197
    MUL             reduce using rule 25 (add_id2 -> .)
    DIV             reduce using rule 25 (add_id2 -> .)
    PLUS            reduce using rule 25 (add_id2 -> .)
    MINUS           reduce using rule 25 (add_id2 -> .)
    GT              reduce using rule 25 (add_id2 -> .)
    LT              reduce using rule 25 (add_id2 -> .)
    GTE             reduce using rule 25 (add_id2 -> .)
    LTE             reduce using rule 25 (add_id2 -> .)
    NE              reduce using rule 25 (add_id2 -> .)
    COMPARE         reduce using rule 25 (add_id2 -> .)
    AND             reduce using rule 25 (add_id2 -> .)
    OR              reduce using rule 25 (add_id2 -> .)
    SEMMICOLON      reduce using rule 25 (add_id2 -> .)
    TO              reduce using rule 25 (add_id2 -> .)
    LBRACKET        shift and go to state 108

  ! LPAREN          [ reduce using rule 29 (validateFunctionID -> .) ]
  ! MUL             [ reduce using rule 157 (empty -> .) ]
  ! DIV             [ reduce using rule 157 (empty -> .) ]
  ! PLUS            [ reduce using rule 157 (empty -> .) ]
  ! MINUS           [ reduce using rule 157 (empty -> .) ]
  ! GT              [ reduce using rule 157 (empty -> .) ]
  ! LT              [ reduce using rule 157 (empty -> .) ]
  ! GTE             [ reduce using rule 157 (empty -> .) ]
  ! LTE             [ reduce using rule 157 (empty -> .) ]
  ! NE              [ reduce using rule 157 (empty -> .) ]
  ! COMPARE         [ reduce using rule 157 (empty -> .) ]
  ! AND             [ reduce using rule 157 (empty -> .) ]
  ! OR              [ reduce using rule 157 (empty -> .) ]
  ! SEMMICOLON      [ reduce using rule 157 (empty -> .) ]
  ! TO              [ reduce using rule 157 (empty -> .) ]

    validateFunctionID             shift and go to state 107
    add_id2                        shift and go to state 195
    arrStatement                   shift and go to state 196
    empty                          shift and go to state 109

state 210

    (20) assign -> ID add_id2 EQUALS saveOperator exp . generateAssignQuad
    (23) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 23 (generateAssignQuad -> .)
    TO              reduce using rule 23 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 245

state 211

    (22) assign -> ID add_id2 EQUALS saveOperator functionCall . generateAssignQuad
    (23) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 23 (generateAssignQuad -> .)
    TO              reduce using rule 23 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 246

state 212

    (21) assign -> ID arrStatement EQUALS saveOperator exp . generateAssignQuad
    (23) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 23 (generateAssignQuad -> .)
    TO              reduce using rule 23 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 247

state 213

    (28) functionCall -> ID validateFunctionID functionERA LPAREN expAux . verifyParams RPAREN generateQuadGOSUB
    (30) verifyParams -> .

    RPAREN          reduce using rule 30 (verifyParams -> .)

    verifyParams                   shift and go to state 248

state 214

    (33) expAux -> exp . generateQuadPARAM paramsCount
    (34) expAux -> exp . generateQuadPARAM COMMA paramsCount expAux
    (32) generateQuadPARAM -> .

    COMMA           reduce using rule 32 (generateQuadPARAM -> .)
    RPAREN          reduce using rule 32 (generateQuadPARAM -> .)

    generateQuadPARAM              shift and go to state 249

state 215

    (35) expAux -> empty .
    (101) pexp -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expAux -> empty .)
    RPAREN          reduce using rule 35 (expAux -> empty .)
    MUL             reduce using rule 101 (pexp -> empty .)
    DIV             reduce using rule 101 (pexp -> empty .)
    PLUS            reduce using rule 101 (pexp -> empty .)
    MINUS           reduce using rule 101 (pexp -> empty .)
    GT              reduce using rule 101 (pexp -> empty .)
    LT              reduce using rule 101 (pexp -> empty .)
    GTE             reduce using rule 101 (pexp -> empty .)
    LTE             reduce using rule 101 (pexp -> empty .)
    NE              reduce using rule 101 (pexp -> empty .)
    COMPARE         reduce using rule 101 (pexp -> empty .)
    AND             reduce using rule 101 (pexp -> empty .)
    OR              reduce using rule 101 (pexp -> empty .)
    COMMA           reduce using rule 101 (pexp -> empty .)

  ! RPAREN          [ reduce using rule 101 (pexp -> empty .) ]


state 216

    (104) arrStatement -> LBRACKET checkArray exp generateQuadVER . RBRACKET getArrFinalAddress

    RBRACKET        shift and go to state 250


state 217

    (39) read -> READ operatorRead LPAREN paramReadAux RPAREN .

    ID              reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    READ            reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    WRITE           reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    FOR             reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    WHILE           reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    IF              reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    RETURN          reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    SORT            reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    SEMMICOLON      reduce using rule 39 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)


state 218

    (42) paramReadAux -> exp generateQuadREAD .
    (43) paramReadAux -> exp generateQuadREAD . COMMA operatorRead paramReadAux

    RPAREN          reduce using rule 42 (paramReadAux -> exp generateQuadREAD .)
    COMMA           shift and go to state 251


state 219

    (46) write -> WRITE writeOperator LPAREN paramWrite RPAREN .

    ID              reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    READ            reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WRITE           reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    FOR             reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WHILE           reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    IF              reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    RETURN          reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    SORT            reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    SEMMICOLON      reduce using rule 46 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)


state 220

    (49) paramWriteAux -> exp generateQuadPRINT .
    (50) paramWriteAux -> exp generateQuadPRINT . COMMA writeOperator paramWriteAux

    RPAREN          reduce using rule 49 (paramWriteAux -> exp generateQuadPRINT .)
    COMMA           shift and go to state 252


state 221

    (58) for -> FOR forOP assign TO CTEI . DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 253


state 222

    (61) while -> WHILE whileOP LPAREN exp RPAREN . DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 254


state 223

    (99) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    SEMMICOLON      reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 99 (pexp -> LPAREN exp RPAREN .)


state 224

    (64) if -> IF LPAREN exp RPAREN generateQuadIF . THEN LCURLY statements RCURLY else endIF

    THEN            shift and go to state 255


state 225

    (71) exp -> nexp generateQuadOR OR . saveOperator nexp
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    AND             reduce using rule 110 (saveOperator -> .)
    GT              reduce using rule 110 (saveOperator -> .)
    LT              reduce using rule 110 (saveOperator -> .)
    GTE             reduce using rule 110 (saveOperator -> .)
    LTE             reduce using rule 110 (saveOperator -> .)
    NE              reduce using rule 110 (saveOperator -> .)
    COMPARE         reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 256

state 226

    (74) nexp -> compexp generateQuadAND AND . saveOperator compexp
    (110) saveOperator -> .

    ID              reduce using rule 110 (saveOperator -> .)
    CTEI            reduce using rule 110 (saveOperator -> .)
    CTEF            reduce using rule 110 (saveOperator -> .)
    CTEC            reduce using rule 110 (saveOperator -> .)
    CTESTRING       reduce using rule 110 (saveOperator -> .)
    LPAREN          reduce using rule 110 (saveOperator -> .)
    GT              reduce using rule 110 (saveOperator -> .)
    LT              reduce using rule 110 (saveOperator -> .)
    GTE             reduce using rule 110 (saveOperator -> .)
    LTE             reduce using rule 110 (saveOperator -> .)
    NE              reduce using rule 110 (saveOperator -> .)
    COMPARE         reduce using rule 110 (saveOperator -> .)
    PLUS            reduce using rule 110 (saveOperator -> .)
    MINUS           reduce using rule 110 (saveOperator -> .)
    MUL             reduce using rule 110 (saveOperator -> .)
    DIV             reduce using rule 110 (saveOperator -> .)
    OR              reduce using rule 110 (saveOperator -> .)
    RPAREN          reduce using rule 110 (saveOperator -> .)
    RBRACKET        reduce using rule 110 (saveOperator -> .)
    COMMA           reduce using rule 110 (saveOperator -> .)
    SEMMICOLON      reduce using rule 110 (saveOperator -> .)
    TO              reduce using rule 110 (saveOperator -> .)

    saveOperator                   shift and go to state 257

state 227

    (78) compexp1 -> sumexp GT saveOperator . sumexp generateQuadCOMPARE
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    sumexp                         shift and go to state 258
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 228

    (79) compexp1 -> sumexp LT saveOperator . sumexp generateQuadCOMPARE
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    sumexp                         shift and go to state 259
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 229

    (80) compexp1 -> sumexp GTE saveOperator . sumexp generateQuadCOMPARE
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    sumexp                         shift and go to state 260
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 230

    (81) compexp1 -> sumexp LTE saveOperator . sumexp generateQuadCOMPARE
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    sumexp                         shift and go to state 261
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 231

    (82) compexp1 -> sumexp NE saveOperator . sumexp generateQuadCOMPARE
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    sumexp                         shift and go to state 262
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 232

    (83) compexp1 -> sumexp COMPARE saveOperator . sumexp generateQuadCOMPARE
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    sumexp                         shift and go to state 263
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 233

    (86) sumexp -> mulexp PLUS saveOperator . mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    mulexp                         shift and go to state 264
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 234

    (87) sumexp -> mulexp MINUS saveOperator . mulexp generateQuadSUM
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    mulexp                         shift and go to state 265
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 235

    (90) mulexp -> pexp MUL saveOperator . pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    pexp                           shift and go to state 266
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 236

    (91) mulexp -> pexp DIV saveOperator . pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)

  ! ID              [ reduce using rule 157 (empty -> .) ]
  ! CTEI            [ reduce using rule 157 (empty -> .) ]
  ! CTEF            [ reduce using rule 157 (empty -> .) ]
  ! CTEC            [ reduce using rule 157 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 157 (empty -> .) ]
  ! LPAREN          [ reduce using rule 157 (empty -> .) ]

    pexp                           shift and go to state 267
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 237

    (102) functionCallExp -> ID LPAREN validateFunctionIDexp . functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (38) functionERA -> .

    ID              reduce using rule 38 (functionERA -> .)
    CTEI            reduce using rule 38 (functionERA -> .)
    CTEF            reduce using rule 38 (functionERA -> .)
    CTEC            reduce using rule 38 (functionERA -> .)
    CTESTRING       reduce using rule 38 (functionERA -> .)
    LPAREN          reduce using rule 38 (functionERA -> .)
    RPAREN          reduce using rule 38 (functionERA -> .)
    COMMA           reduce using rule 38 (functionERA -> .)
    OR              reduce using rule 38 (functionERA -> .)
    AND             reduce using rule 38 (functionERA -> .)
    GT              reduce using rule 38 (functionERA -> .)
    LT              reduce using rule 38 (functionERA -> .)
    GTE             reduce using rule 38 (functionERA -> .)
    LTE             reduce using rule 38 (functionERA -> .)
    NE              reduce using rule 38 (functionERA -> .)
    COMPARE         reduce using rule 38 (functionERA -> .)
    PLUS            reduce using rule 38 (functionERA -> .)
    MINUS           reduce using rule 38 (functionERA -> .)
    MUL             reduce using rule 38 (functionERA -> .)
    DIV             reduce using rule 38 (functionERA -> .)

    functionERA                    shift and go to state 268

state 238

    (155) return -> RETURN LPAREN exp generateQuadRETURN RPAREN .

    SEMMICOLON      reduce using rule 155 (return -> RETURN LPAREN exp generateQuadRETURN RPAREN .)


state 239

    (53) sort -> SORT sortOperator LPAREN ID add_id2 . verifyArray RPAREN generateQuadSORT
    (55) verifyArray -> .

    RPAREN          reduce using rule 55 (verifyArray -> .)

    verifyArray                    shift and go to state 269

state 240

    (137) functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY . setStartDirection statements RCURLY
    (139) setStartDirection -> .

    ID              reduce using rule 139 (setStartDirection -> .)
    READ            reduce using rule 139 (setStartDirection -> .)
    WRITE           reduce using rule 139 (setStartDirection -> .)
    FOR             reduce using rule 139 (setStartDirection -> .)
    WHILE           reduce using rule 139 (setStartDirection -> .)
    IF              reduce using rule 139 (setStartDirection -> .)
    RETURN          reduce using rule 139 (setStartDirection -> .)
    SORT            reduce using rule 139 (setStartDirection -> .)
    RCURLY          reduce using rule 139 (setStartDirection -> .)

    setStartDirection              shift and go to state 270

state 241

    (143) paramsAux -> INT saveTypeVar TWOPOINTS ID . addParameter nextParam
    (140) addParameter -> .

    COMMA           reduce using rule 140 (addParameter -> .)
    RPAREN          reduce using rule 140 (addParameter -> .)

    addParameter                   shift and go to state 271

state 242

    (144) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID . addParameter nextParam
    (140) addParameter -> .

    COMMA           reduce using rule 140 (addParameter -> .)
    RPAREN          reduce using rule 140 (addParameter -> .)

    addParameter                   shift and go to state 272

state 243

    (145) paramsAux -> CHAR saveTypeVar TWOPOINTS ID . addParameter nextParam
    (140) addParameter -> .

    COMMA           reduce using rule 140 (addParameter -> .)
    RPAREN          reduce using rule 140 (addParameter -> .)

    addParameter                   shift and go to state 273

state 244

    (135) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY . setStartDirection statements RCURLY
    (139) setStartDirection -> .

    ID              reduce using rule 139 (setStartDirection -> .)
    READ            reduce using rule 139 (setStartDirection -> .)
    WRITE           reduce using rule 139 (setStartDirection -> .)
    FOR             reduce using rule 139 (setStartDirection -> .)
    WHILE           reduce using rule 139 (setStartDirection -> .)
    IF              reduce using rule 139 (setStartDirection -> .)
    RETURN          reduce using rule 139 (setStartDirection -> .)
    SORT            reduce using rule 139 (setStartDirection -> .)
    RCURLY          reduce using rule 139 (setStartDirection -> .)

    setStartDirection              shift and go to state 274

state 245

    (20) assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 20 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 20 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)


state 246

    (22) assign -> ID add_id2 EQUALS saveOperator functionCall generateAssignQuad .

    SEMMICOLON      reduce using rule 22 (assign -> ID add_id2 EQUALS saveOperator functionCall generateAssignQuad .)
    TO              reduce using rule 22 (assign -> ID add_id2 EQUALS saveOperator functionCall generateAssignQuad .)


state 247

    (21) assign -> ID arrStatement EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 21 (assign -> ID arrStatement EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 21 (assign -> ID arrStatement EQUALS saveOperator exp generateAssignQuad .)


state 248

    (28) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams . RPAREN generateQuadGOSUB

    RPAREN          shift and go to state 275


state 249

    (33) expAux -> exp generateQuadPARAM . paramsCount
    (34) expAux -> exp generateQuadPARAM . COMMA paramsCount expAux
    (31) paramsCount -> .

    COMMA           shift and go to state 277
    RPAREN          reduce using rule 31 (paramsCount -> .)

    paramsCount                    shift and go to state 276

state 250

    (104) arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET . getArrFinalAddress
    (106) getArrFinalAddress -> .

    EQUALS          reduce using rule 106 (getArrFinalAddress -> .)
    MUL             reduce using rule 106 (getArrFinalAddress -> .)
    DIV             reduce using rule 106 (getArrFinalAddress -> .)
    PLUS            reduce using rule 106 (getArrFinalAddress -> .)
    MINUS           reduce using rule 106 (getArrFinalAddress -> .)
    GT              reduce using rule 106 (getArrFinalAddress -> .)
    LT              reduce using rule 106 (getArrFinalAddress -> .)
    GTE             reduce using rule 106 (getArrFinalAddress -> .)
    LTE             reduce using rule 106 (getArrFinalAddress -> .)
    NE              reduce using rule 106 (getArrFinalAddress -> .)
    COMPARE         reduce using rule 106 (getArrFinalAddress -> .)
    AND             reduce using rule 106 (getArrFinalAddress -> .)
    OR              reduce using rule 106 (getArrFinalAddress -> .)
    RPAREN          reduce using rule 106 (getArrFinalAddress -> .)
    RBRACKET        reduce using rule 106 (getArrFinalAddress -> .)
    COMMA           reduce using rule 106 (getArrFinalAddress -> .)
    SEMMICOLON      reduce using rule 106 (getArrFinalAddress -> .)
    TO              reduce using rule 106 (getArrFinalAddress -> .)
    ID              reduce using rule 106 (getArrFinalAddress -> .)
    CTEI            reduce using rule 106 (getArrFinalAddress -> .)
    CTEF            reduce using rule 106 (getArrFinalAddress -> .)
    CTEC            reduce using rule 106 (getArrFinalAddress -> .)
    CTESTRING       reduce using rule 106 (getArrFinalAddress -> .)
    LPAREN          reduce using rule 106 (getArrFinalAddress -> .)

    getArrFinalAddress             shift and go to state 278

state 251

    (43) paramReadAux -> exp generateQuadREAD COMMA . operatorRead paramReadAux
    (44) operatorRead -> .

    ID              reduce using rule 44 (operatorRead -> .)
    CTEI            reduce using rule 44 (operatorRead -> .)
    CTEF            reduce using rule 44 (operatorRead -> .)
    CTEC            reduce using rule 44 (operatorRead -> .)
    CTESTRING       reduce using rule 44 (operatorRead -> .)
    LPAREN          reduce using rule 44 (operatorRead -> .)
    COMMA           reduce using rule 44 (operatorRead -> .)
    OR              reduce using rule 44 (operatorRead -> .)
    AND             reduce using rule 44 (operatorRead -> .)
    GT              reduce using rule 44 (operatorRead -> .)
    LT              reduce using rule 44 (operatorRead -> .)
    GTE             reduce using rule 44 (operatorRead -> .)
    LTE             reduce using rule 44 (operatorRead -> .)
    NE              reduce using rule 44 (operatorRead -> .)
    COMPARE         reduce using rule 44 (operatorRead -> .)
    PLUS            reduce using rule 44 (operatorRead -> .)
    MINUS           reduce using rule 44 (operatorRead -> .)
    MUL             reduce using rule 44 (operatorRead -> .)
    DIV             reduce using rule 44 (operatorRead -> .)
    RPAREN          reduce using rule 44 (operatorRead -> .)

    operatorRead                   shift and go to state 279

state 252

    (50) paramWriteAux -> exp generateQuadPRINT COMMA . writeOperator paramWriteAux
    (51) writeOperator -> .

    ID              reduce using rule 51 (writeOperator -> .)
    CTEI            reduce using rule 51 (writeOperator -> .)
    CTEF            reduce using rule 51 (writeOperator -> .)
    CTEC            reduce using rule 51 (writeOperator -> .)
    CTESTRING       reduce using rule 51 (writeOperator -> .)
    LPAREN          reduce using rule 51 (writeOperator -> .)
    COMMA           reduce using rule 51 (writeOperator -> .)
    OR              reduce using rule 51 (writeOperator -> .)
    AND             reduce using rule 51 (writeOperator -> .)
    GT              reduce using rule 51 (writeOperator -> .)
    LT              reduce using rule 51 (writeOperator -> .)
    GTE             reduce using rule 51 (writeOperator -> .)
    LTE             reduce using rule 51 (writeOperator -> .)
    NE              reduce using rule 51 (writeOperator -> .)
    COMPARE         reduce using rule 51 (writeOperator -> .)
    PLUS            reduce using rule 51 (writeOperator -> .)
    MINUS           reduce using rule 51 (writeOperator -> .)
    MUL             reduce using rule 51 (writeOperator -> .)
    DIV             reduce using rule 51 (writeOperator -> .)
    RPAREN          reduce using rule 51 (writeOperator -> .)

    writeOperator                  shift and go to state 280

state 253

    (58) for -> FOR forOP assign TO CTEI DO . generateQuadFOR LCURLY statements RCURLY LoopEnd
    (60) generateQuadFOR -> .

    LCURLY          reduce using rule 60 (generateQuadFOR -> .)

    generateQuadFOR                shift and go to state 281

state 254

    (61) while -> WHILE whileOP LPAREN exp RPAREN DO . generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (63) generateQuadWHILE -> .

    LCURLY          reduce using rule 63 (generateQuadWHILE -> .)

    generateQuadWHILE              shift and go to state 282

state 255

    (64) if -> IF LPAREN exp RPAREN generateQuadIF THEN . LCURLY statements RCURLY else endIF

    LCURLY          shift and go to state 283


state 256

    (71) exp -> nexp generateQuadOR OR saveOperator . nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    nexp                           shift and go to state 284
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 257

    (74) nexp -> compexp generateQuadAND AND saveOperator . compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)
    RBRACKET        reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)
    TO              reduce using rule 157 (empty -> .)

    compexp                        shift and go to state 285
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 258

    (78) compexp1 -> sumexp GT saveOperator sumexp . generateQuadCOMPARE
    (84) generateQuadCOMPARE -> .

    ID              reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 84 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 84 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 84 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 84 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 84 (generateQuadCOMPARE -> .)
    AND             reduce using rule 84 (generateQuadCOMPARE -> .)
    OR              reduce using rule 84 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 84 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 84 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 84 (generateQuadCOMPARE -> .)
    TO              reduce using rule 84 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 286

state 259

    (79) compexp1 -> sumexp LT saveOperator sumexp . generateQuadCOMPARE
    (84) generateQuadCOMPARE -> .

    ID              reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 84 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 84 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 84 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 84 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 84 (generateQuadCOMPARE -> .)
    AND             reduce using rule 84 (generateQuadCOMPARE -> .)
    OR              reduce using rule 84 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 84 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 84 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 84 (generateQuadCOMPARE -> .)
    TO              reduce using rule 84 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 287

state 260

    (80) compexp1 -> sumexp GTE saveOperator sumexp . generateQuadCOMPARE
    (84) generateQuadCOMPARE -> .

    ID              reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 84 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 84 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 84 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 84 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 84 (generateQuadCOMPARE -> .)
    AND             reduce using rule 84 (generateQuadCOMPARE -> .)
    OR              reduce using rule 84 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 84 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 84 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 84 (generateQuadCOMPARE -> .)
    TO              reduce using rule 84 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 288

state 261

    (81) compexp1 -> sumexp LTE saveOperator sumexp . generateQuadCOMPARE
    (84) generateQuadCOMPARE -> .

    ID              reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 84 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 84 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 84 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 84 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 84 (generateQuadCOMPARE -> .)
    AND             reduce using rule 84 (generateQuadCOMPARE -> .)
    OR              reduce using rule 84 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 84 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 84 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 84 (generateQuadCOMPARE -> .)
    TO              reduce using rule 84 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 289

state 262

    (82) compexp1 -> sumexp NE saveOperator sumexp . generateQuadCOMPARE
    (84) generateQuadCOMPARE -> .

    ID              reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 84 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 84 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 84 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 84 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 84 (generateQuadCOMPARE -> .)
    AND             reduce using rule 84 (generateQuadCOMPARE -> .)
    OR              reduce using rule 84 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 84 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 84 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 84 (generateQuadCOMPARE -> .)
    TO              reduce using rule 84 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 290

state 263

    (83) compexp1 -> sumexp COMPARE saveOperator sumexp . generateQuadCOMPARE
    (84) generateQuadCOMPARE -> .

    ID              reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 84 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 84 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 84 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 84 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 84 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 84 (generateQuadCOMPARE -> .)
    AND             reduce using rule 84 (generateQuadCOMPARE -> .)
    OR              reduce using rule 84 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 84 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 84 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 84 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 84 (generateQuadCOMPARE -> .)
    TO              reduce using rule 84 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 291

state 264

    (86) sumexp -> mulexp PLUS saveOperator mulexp . generateQuadSUM
    (88) generateQuadSUM -> .

    GT              reduce using rule 88 (generateQuadSUM -> .)
    LT              reduce using rule 88 (generateQuadSUM -> .)
    GTE             reduce using rule 88 (generateQuadSUM -> .)
    LTE             reduce using rule 88 (generateQuadSUM -> .)
    NE              reduce using rule 88 (generateQuadSUM -> .)
    COMPARE         reduce using rule 88 (generateQuadSUM -> .)
    AND             reduce using rule 88 (generateQuadSUM -> .)
    OR              reduce using rule 88 (generateQuadSUM -> .)
    RPAREN          reduce using rule 88 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 88 (generateQuadSUM -> .)
    COMMA           reduce using rule 88 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 88 (generateQuadSUM -> .)
    TO              reduce using rule 88 (generateQuadSUM -> .)
    ID              reduce using rule 88 (generateQuadSUM -> .)
    CTEI            reduce using rule 88 (generateQuadSUM -> .)
    CTEF            reduce using rule 88 (generateQuadSUM -> .)
    CTEC            reduce using rule 88 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 88 (generateQuadSUM -> .)
    LPAREN          reduce using rule 88 (generateQuadSUM -> .)
    PLUS            reduce using rule 88 (generateQuadSUM -> .)
    MINUS           reduce using rule 88 (generateQuadSUM -> .)
    MUL             reduce using rule 88 (generateQuadSUM -> .)
    DIV             reduce using rule 88 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 292

state 265

    (87) sumexp -> mulexp MINUS saveOperator mulexp . generateQuadSUM
    (88) generateQuadSUM -> .

    GT              reduce using rule 88 (generateQuadSUM -> .)
    LT              reduce using rule 88 (generateQuadSUM -> .)
    GTE             reduce using rule 88 (generateQuadSUM -> .)
    LTE             reduce using rule 88 (generateQuadSUM -> .)
    NE              reduce using rule 88 (generateQuadSUM -> .)
    COMPARE         reduce using rule 88 (generateQuadSUM -> .)
    AND             reduce using rule 88 (generateQuadSUM -> .)
    OR              reduce using rule 88 (generateQuadSUM -> .)
    RPAREN          reduce using rule 88 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 88 (generateQuadSUM -> .)
    COMMA           reduce using rule 88 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 88 (generateQuadSUM -> .)
    TO              reduce using rule 88 (generateQuadSUM -> .)
    ID              reduce using rule 88 (generateQuadSUM -> .)
    CTEI            reduce using rule 88 (generateQuadSUM -> .)
    CTEF            reduce using rule 88 (generateQuadSUM -> .)
    CTEC            reduce using rule 88 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 88 (generateQuadSUM -> .)
    LPAREN          reduce using rule 88 (generateQuadSUM -> .)
    PLUS            reduce using rule 88 (generateQuadSUM -> .)
    MINUS           reduce using rule 88 (generateQuadSUM -> .)
    MUL             reduce using rule 88 (generateQuadSUM -> .)
    DIV             reduce using rule 88 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 293

state 266

    (90) mulexp -> pexp MUL saveOperator pexp . generateQuadMUL
    (92) generateQuadMUL -> .

    PLUS            reduce using rule 92 (generateQuadMUL -> .)
    MINUS           reduce using rule 92 (generateQuadMUL -> .)
    GT              reduce using rule 92 (generateQuadMUL -> .)
    LT              reduce using rule 92 (generateQuadMUL -> .)
    GTE             reduce using rule 92 (generateQuadMUL -> .)
    LTE             reduce using rule 92 (generateQuadMUL -> .)
    NE              reduce using rule 92 (generateQuadMUL -> .)
    COMPARE         reduce using rule 92 (generateQuadMUL -> .)
    AND             reduce using rule 92 (generateQuadMUL -> .)
    OR              reduce using rule 92 (generateQuadMUL -> .)
    RPAREN          reduce using rule 92 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 92 (generateQuadMUL -> .)
    COMMA           reduce using rule 92 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 92 (generateQuadMUL -> .)
    TO              reduce using rule 92 (generateQuadMUL -> .)
    ID              reduce using rule 92 (generateQuadMUL -> .)
    CTEI            reduce using rule 92 (generateQuadMUL -> .)
    CTEF            reduce using rule 92 (generateQuadMUL -> .)
    CTEC            reduce using rule 92 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 92 (generateQuadMUL -> .)
    LPAREN          reduce using rule 92 (generateQuadMUL -> .)
    MUL             reduce using rule 92 (generateQuadMUL -> .)
    DIV             reduce using rule 92 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 294

state 267

    (91) mulexp -> pexp DIV saveOperator pexp . generateQuadMUL
    (92) generateQuadMUL -> .

    PLUS            reduce using rule 92 (generateQuadMUL -> .)
    MINUS           reduce using rule 92 (generateQuadMUL -> .)
    GT              reduce using rule 92 (generateQuadMUL -> .)
    LT              reduce using rule 92 (generateQuadMUL -> .)
    GTE             reduce using rule 92 (generateQuadMUL -> .)
    LTE             reduce using rule 92 (generateQuadMUL -> .)
    NE              reduce using rule 92 (generateQuadMUL -> .)
    COMPARE         reduce using rule 92 (generateQuadMUL -> .)
    AND             reduce using rule 92 (generateQuadMUL -> .)
    OR              reduce using rule 92 (generateQuadMUL -> .)
    RPAREN          reduce using rule 92 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 92 (generateQuadMUL -> .)
    COMMA           reduce using rule 92 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 92 (generateQuadMUL -> .)
    TO              reduce using rule 92 (generateQuadMUL -> .)
    ID              reduce using rule 92 (generateQuadMUL -> .)
    CTEI            reduce using rule 92 (generateQuadMUL -> .)
    CTEF            reduce using rule 92 (generateQuadMUL -> .)
    CTEC            reduce using rule 92 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 92 (generateQuadMUL -> .)
    LPAREN          reduce using rule 92 (generateQuadMUL -> .)
    MUL             reduce using rule 92 (generateQuadMUL -> .)
    DIV             reduce using rule 92 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 295

state 268

    (102) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA . expAux verifyParams RPAREN generateQuadGOSUB
    (33) expAux -> . exp generateQuadPARAM paramsCount
    (34) expAux -> . exp generateQuadPARAM COMMA paramsCount expAux
    (35) expAux -> . empty
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (157) empty -> .
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 157 (empty -> .)
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141

    expAux                         shift and go to state 296
    exp                            shift and go to state 214
    empty                          shift and go to state 215
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154

state 269

    (53) sort -> SORT sortOperator LPAREN ID add_id2 verifyArray . RPAREN generateQuadSORT

    RPAREN          shift and go to state 297


state 270

    (137) functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)

    statements                     shift and go to state 298
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 271

    (143) paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter . nextParam
    (146) nextParam -> . COMMA paramsAux
    (147) nextParam -> . empty
    (157) empty -> .

    COMMA           shift and go to state 300
    RPAREN          reduce using rule 157 (empty -> .)

    nextParam                      shift and go to state 299
    empty                          shift and go to state 301

state 272

    (144) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter . nextParam
    (146) nextParam -> . COMMA paramsAux
    (147) nextParam -> . empty
    (157) empty -> .

    COMMA           shift and go to state 300
    RPAREN          reduce using rule 157 (empty -> .)

    nextParam                      shift and go to state 302
    empty                          shift and go to state 301

state 273

    (145) paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter . nextParam
    (146) nextParam -> . COMMA paramsAux
    (147) nextParam -> . empty
    (157) empty -> .

    COMMA           shift and go to state 300
    RPAREN          reduce using rule 157 (empty -> .)

    nextParam                      shift and go to state 303
    empty                          shift and go to state 301

state 274

    (135) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)

    statements                     shift and go to state 304
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 275

    (28) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN . generateQuadGOSUB
    (36) generateQuadGOSUB -> .

    SEMMICOLON      reduce using rule 36 (generateQuadGOSUB -> .)
    TO              reduce using rule 36 (generateQuadGOSUB -> .)

    generateQuadGOSUB              shift and go to state 305

state 276

    (33) expAux -> exp generateQuadPARAM paramsCount .

    RPAREN          reduce using rule 33 (expAux -> exp generateQuadPARAM paramsCount .)


state 277

    (34) expAux -> exp generateQuadPARAM COMMA . paramsCount expAux
    (31) paramsCount -> .

    ID              reduce using rule 31 (paramsCount -> .)
    CTEI            reduce using rule 31 (paramsCount -> .)
    CTEF            reduce using rule 31 (paramsCount -> .)
    CTEC            reduce using rule 31 (paramsCount -> .)
    CTESTRING       reduce using rule 31 (paramsCount -> .)
    LPAREN          reduce using rule 31 (paramsCount -> .)
    COMMA           reduce using rule 31 (paramsCount -> .)
    OR              reduce using rule 31 (paramsCount -> .)
    AND             reduce using rule 31 (paramsCount -> .)
    GT              reduce using rule 31 (paramsCount -> .)
    LT              reduce using rule 31 (paramsCount -> .)
    GTE             reduce using rule 31 (paramsCount -> .)
    LTE             reduce using rule 31 (paramsCount -> .)
    NE              reduce using rule 31 (paramsCount -> .)
    COMPARE         reduce using rule 31 (paramsCount -> .)
    PLUS            reduce using rule 31 (paramsCount -> .)
    MINUS           reduce using rule 31 (paramsCount -> .)
    MUL             reduce using rule 31 (paramsCount -> .)
    DIV             reduce using rule 31 (paramsCount -> .)
    RPAREN          reduce using rule 31 (paramsCount -> .)

    paramsCount                    shift and go to state 306

state 278

    (104) arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .

    EQUALS          reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    MUL             reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    DIV             reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    PLUS            reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    MINUS           reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    GT              reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    LT              reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    GTE             reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    LTE             reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    NE              reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    COMPARE         reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    AND             reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    OR              reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    RPAREN          reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    RBRACKET        reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    COMMA           reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    SEMMICOLON      reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    TO              reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    ID              reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    CTEI            reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    CTEF            reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    CTEC            reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    CTESTRING       reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    LPAREN          reduce using rule 104 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)


state 279

    (43) paramReadAux -> exp generateQuadREAD COMMA operatorRead . paramReadAux
    (42) paramReadAux -> . exp generateQuadREAD
    (43) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)

    exp                            shift and go to state 173
    paramReadAux                   shift and go to state 307
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 280

    (50) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator . paramWriteAux
    (49) paramWriteAux -> . exp generateQuadPRINT
    (50) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (157) empty -> .

    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    RPAREN          reduce using rule 157 (empty -> .)

    exp                            shift and go to state 177
    paramWriteAux                  shift and go to state 308
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154
    empty                          shift and go to state 155

state 281

    (58) for -> FOR forOP assign TO CTEI DO generateQuadFOR . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 309


state 282

    (61) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 310


state 283

    (64) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY . statements RCURLY else endIF
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)

    statements                     shift and go to state 311
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 284

    (71) exp -> nexp generateQuadOR OR saveOperator nexp .

    RPAREN          reduce using rule 71 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    RBRACKET        reduce using rule 71 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    COMMA           reduce using rule 71 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    SEMMICOLON      reduce using rule 71 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    TO              reduce using rule 71 (exp -> nexp generateQuadOR OR saveOperator nexp .)


state 285

    (74) nexp -> compexp generateQuadAND AND saveOperator compexp .

    OR              reduce using rule 74 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RPAREN          reduce using rule 74 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RBRACKET        reduce using rule 74 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    COMMA           reduce using rule 74 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    SEMMICOLON      reduce using rule 74 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    TO              reduce using rule 74 (nexp -> compexp generateQuadAND AND saveOperator compexp .)


state 286

    (78) compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 78 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)


state 287

    (79) compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 79 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)


state 288

    (80) compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 80 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)


state 289

    (81) compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 81 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)


state 290

    (82) compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 82 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)


state 291

    (83) compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 83 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)


state 292

    (86) sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    COMPARE         reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    PLUS            reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    MINUS           reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    MUL             reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    DIV             reduce using rule 86 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)


state 293

    (87) sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    COMPARE         reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    PLUS            reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    MINUS           reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    MUL             reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    DIV             reduce using rule 87 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)


state 294

    (90) mulexp -> pexp MUL saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    COMPARE         reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MUL             reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    DIV             reduce using rule 90 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)


state 295

    (91) mulexp -> pexp DIV saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    COMPARE         reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MUL             reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    DIV             reduce using rule 91 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)


state 296

    (102) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux . verifyParams RPAREN generateQuadGOSUB
    (30) verifyParams -> .

    RPAREN          reduce using rule 30 (verifyParams -> .)

    verifyParams                   shift and go to state 312

state 297

    (53) sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN . generateQuadSORT
    (56) generateQuadSORT -> .

    ID              reduce using rule 56 (generateQuadSORT -> .)
    READ            reduce using rule 56 (generateQuadSORT -> .)
    WRITE           reduce using rule 56 (generateQuadSORT -> .)
    FOR             reduce using rule 56 (generateQuadSORT -> .)
    WHILE           reduce using rule 56 (generateQuadSORT -> .)
    IF              reduce using rule 56 (generateQuadSORT -> .)
    RETURN          reduce using rule 56 (generateQuadSORT -> .)
    SORT            reduce using rule 56 (generateQuadSORT -> .)
    SEMMICOLON      reduce using rule 56 (generateQuadSORT -> .)

    generateQuadSORT               shift and go to state 313

state 298

    (137) functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements . RCURLY

    RCURLY          shift and go to state 314


state 299

    (143) paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 143 (paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 300

    (146) nextParam -> COMMA . paramsAux
    (143) paramsAux -> . INT saveTypeVar TWOPOINTS ID addParameter nextParam
    (144) paramsAux -> . FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
    (145) paramsAux -> . CHAR saveTypeVar TWOPOINTS ID addParameter nextParam

    INT             shift and go to state 120
    FLOAT           shift and go to state 121
    CHAR            shift and go to state 122

    paramsAux                      shift and go to state 315

state 301

    (147) nextParam -> empty .

    RPAREN          reduce using rule 147 (nextParam -> empty .)


state 302

    (144) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 144 (paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 303

    (145) paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 145 (paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 304

    (135) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements . RCURLY

    RCURLY          shift and go to state 316


state 305

    (28) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .

    SEMMICOLON      reduce using rule 28 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    TO              reduce using rule 28 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)


state 306

    (34) expAux -> exp generateQuadPARAM COMMA paramsCount . expAux
    (33) expAux -> . exp generateQuadPARAM paramsCount
    (34) expAux -> . exp generateQuadPARAM COMMA paramsCount expAux
    (35) expAux -> . empty
    (70) exp -> . nexp generateQuadOR
    (71) exp -> . nexp generateQuadOR OR saveOperator nexp
    (157) empty -> .
    (73) nexp -> . compexp generateQuadAND
    (74) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (76) compexp -> . sumexp
    (77) compexp -> . compexp1 sumexp
    (85) sumexp -> . mulexp
    (86) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (87) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (78) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (79) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (80) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (81) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (82) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (83) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (91) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (93) pexp -> . ID add_id2
    (94) pexp -> . CTEI saveCTE
    (95) pexp -> . CTEF saveCTE
    (96) pexp -> . CTEC saveCTE
    (97) pexp -> . CTESTRING saveCTE
    (98) pexp -> . functionCallExp
    (99) pexp -> . LPAREN exp RPAREN
    (100) pexp -> . ID arrStatement
    (101) pexp -> . empty
    (102) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 157 (empty -> .)
    MUL             reduce using rule 157 (empty -> .)
    DIV             reduce using rule 157 (empty -> .)
    PLUS            reduce using rule 157 (empty -> .)
    MINUS           reduce using rule 157 (empty -> .)
    GT              reduce using rule 157 (empty -> .)
    LT              reduce using rule 157 (empty -> .)
    GTE             reduce using rule 157 (empty -> .)
    LTE             reduce using rule 157 (empty -> .)
    NE              reduce using rule 157 (empty -> .)
    COMPARE         reduce using rule 157 (empty -> .)
    AND             reduce using rule 157 (empty -> .)
    OR              reduce using rule 157 (empty -> .)
    COMMA           reduce using rule 157 (empty -> .)
    ID              shift and go to state 149
    CTEI            shift and go to state 150
    CTEF            shift and go to state 151
    CTEC            shift and go to state 152
    CTESTRING       shift and go to state 153
    LPAREN          shift and go to state 141

    exp                            shift and go to state 214
    expAux                         shift and go to state 317
    empty                          shift and go to state 215
    nexp                           shift and go to state 143
    compexp                        shift and go to state 144
    sumexp                         shift and go to state 145
    compexp1                       shift and go to state 146
    mulexp                         shift and go to state 147
    pexp                           shift and go to state 148
    functionCallExp                shift and go to state 154

state 307

    (43) paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .

    RPAREN          reduce using rule 43 (paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .)


state 308

    (50) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .

    RPAREN          reduce using rule 50 (paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .)


state 309

    (58) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY . statements RCURLY LoopEnd
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)

    assign                         shift and go to state 68
    statements                     shift and go to state 318
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 310

    (61) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY . statements RCURLY LoopEnd
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)

    statements                     shift and go to state 319
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 311

    (64) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements . RCURLY else endIF

    RCURLY          shift and go to state 320


state 312

    (102) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams . RPAREN generateQuadGOSUB

    RPAREN          shift and go to state 321


state 313

    (53) sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .

    ID              reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    READ            reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    WRITE           reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    FOR             reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    WHILE           reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    IF              reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    RETURN          reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    SORT            reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    SEMMICOLON      reduce using rule 53 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)


state 314

    (137) functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .

    FUNCTION        reduce using rule 137 (functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    PRINCIPAL       reduce using rule 137 (functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    $end            reduce using rule 137 (functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)


state 315

    (146) nextParam -> COMMA paramsAux .

    RPAREN          reduce using rule 146 (nextParam -> COMMA paramsAux .)


state 316

    (135) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .

    FUNCTION        reduce using rule 135 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    PRINCIPAL       reduce using rule 135 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    $end            reduce using rule 135 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)


state 317

    (34) expAux -> exp generateQuadPARAM COMMA paramsCount expAux .

    RPAREN          reduce using rule 34 (expAux -> exp generateQuadPARAM COMMA paramsCount expAux .)


state 318

    (58) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 322


state 319

    (61) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 323


state 320

    (64) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY . else endIF
    (65) else -> . ELSE generateQuadELSE LCURLY statements RCURLY
    (66) else -> . empty
    (157) empty -> .

    ELSE            shift and go to state 325
    ID              reduce using rule 157 (empty -> .)
    READ            reduce using rule 157 (empty -> .)
    WRITE           reduce using rule 157 (empty -> .)
    FOR             reduce using rule 157 (empty -> .)
    WHILE           reduce using rule 157 (empty -> .)
    IF              reduce using rule 157 (empty -> .)
    RETURN          reduce using rule 157 (empty -> .)
    SORT            reduce using rule 157 (empty -> .)
    RCURLY          reduce using rule 157 (empty -> .)
    SEMMICOLON      reduce using rule 157 (empty -> .)

    else                           shift and go to state 324
    empty                          shift and go to state 326

state 321

    (102) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN . generateQuadGOSUB
    (36) generateQuadGOSUB -> .

    MUL             reduce using rule 36 (generateQuadGOSUB -> .)
    DIV             reduce using rule 36 (generateQuadGOSUB -> .)
    PLUS            reduce using rule 36 (generateQuadGOSUB -> .)
    MINUS           reduce using rule 36 (generateQuadGOSUB -> .)
    GT              reduce using rule 36 (generateQuadGOSUB -> .)
    LT              reduce using rule 36 (generateQuadGOSUB -> .)
    GTE             reduce using rule 36 (generateQuadGOSUB -> .)
    LTE             reduce using rule 36 (generateQuadGOSUB -> .)
    NE              reduce using rule 36 (generateQuadGOSUB -> .)
    COMPARE         reduce using rule 36 (generateQuadGOSUB -> .)
    AND             reduce using rule 36 (generateQuadGOSUB -> .)
    OR              reduce using rule 36 (generateQuadGOSUB -> .)
    RPAREN          reduce using rule 36 (generateQuadGOSUB -> .)
    RBRACKET        reduce using rule 36 (generateQuadGOSUB -> .)
    COMMA           reduce using rule 36 (generateQuadGOSUB -> .)
    SEMMICOLON      reduce using rule 36 (generateQuadGOSUB -> .)
    TO              reduce using rule 36 (generateQuadGOSUB -> .)
    ID              reduce using rule 36 (generateQuadGOSUB -> .)
    CTEI            reduce using rule 36 (generateQuadGOSUB -> .)
    CTEF            reduce using rule 36 (generateQuadGOSUB -> .)
    CTEC            reduce using rule 36 (generateQuadGOSUB -> .)
    CTESTRING       reduce using rule 36 (generateQuadGOSUB -> .)
    LPAREN          reduce using rule 36 (generateQuadGOSUB -> .)

    generateQuadGOSUB              shift and go to state 327

state 322

    (58) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY . LoopEnd
    (57) LoopEnd -> .

    ID              reduce using rule 57 (LoopEnd -> .)
    READ            reduce using rule 57 (LoopEnd -> .)
    WRITE           reduce using rule 57 (LoopEnd -> .)
    FOR             reduce using rule 57 (LoopEnd -> .)
    WHILE           reduce using rule 57 (LoopEnd -> .)
    IF              reduce using rule 57 (LoopEnd -> .)
    RETURN          reduce using rule 57 (LoopEnd -> .)
    SORT            reduce using rule 57 (LoopEnd -> .)
    RCURLY          reduce using rule 57 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 57 (LoopEnd -> .)

    LoopEnd                        shift and go to state 328

state 323

    (61) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY . LoopEnd
    (57) LoopEnd -> .

    ID              reduce using rule 57 (LoopEnd -> .)
    READ            reduce using rule 57 (LoopEnd -> .)
    WRITE           reduce using rule 57 (LoopEnd -> .)
    FOR             reduce using rule 57 (LoopEnd -> .)
    WHILE           reduce using rule 57 (LoopEnd -> .)
    IF              reduce using rule 57 (LoopEnd -> .)
    RETURN          reduce using rule 57 (LoopEnd -> .)
    SORT            reduce using rule 57 (LoopEnd -> .)
    RCURLY          reduce using rule 57 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 57 (LoopEnd -> .)

    LoopEnd                        shift and go to state 329

state 324

    (64) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else . endIF
    (68) endIF -> .

    ID              reduce using rule 68 (endIF -> .)
    READ            reduce using rule 68 (endIF -> .)
    WRITE           reduce using rule 68 (endIF -> .)
    FOR             reduce using rule 68 (endIF -> .)
    WHILE           reduce using rule 68 (endIF -> .)
    IF              reduce using rule 68 (endIF -> .)
    RETURN          reduce using rule 68 (endIF -> .)
    SORT            reduce using rule 68 (endIF -> .)
    RCURLY          reduce using rule 68 (endIF -> .)
    SEMMICOLON      reduce using rule 68 (endIF -> .)

    endIF                          shift and go to state 330

state 325

    (65) else -> ELSE . generateQuadELSE LCURLY statements RCURLY
    (69) generateQuadELSE -> .

    LCURLY          reduce using rule 69 (generateQuadELSE -> .)

    generateQuadELSE               shift and go to state 331

state 326

    (66) else -> empty .

    ID              reduce using rule 66 (else -> empty .)
    READ            reduce using rule 66 (else -> empty .)
    WRITE           reduce using rule 66 (else -> empty .)
    FOR             reduce using rule 66 (else -> empty .)
    WHILE           reduce using rule 66 (else -> empty .)
    IF              reduce using rule 66 (else -> empty .)
    RETURN          reduce using rule 66 (else -> empty .)
    SORT            reduce using rule 66 (else -> empty .)
    RCURLY          reduce using rule 66 (else -> empty .)
    SEMMICOLON      reduce using rule 66 (else -> empty .)


state 327

    (102) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .

    MUL             reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    DIV             reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    PLUS            reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    MINUS           reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    GT              reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    LT              reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    GTE             reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    LTE             reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    NE              reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    COMPARE         reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    AND             reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    OR              reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    RPAREN          reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    RBRACKET        reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    COMMA           reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    SEMMICOLON      reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    TO              reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    ID              reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEI            reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEF            reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEC            reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    CTESTRING       reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    LPAREN          reduce using rule 102 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)


state 328

    (58) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    SORT            reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 58 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)


state 329

    (61) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    SORT            reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 61 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)


state 330

    (64) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .

    ID              reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    READ            reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WRITE           reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    FOR             reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WHILE           reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    IF              reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RETURN          reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    SORT            reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RCURLY          reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    SEMMICOLON      reduce using rule 64 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)


state 331

    (65) else -> ELSE generateQuadELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 332


state 332

    (65) else -> ELSE generateQuadELSE LCURLY . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . empty
    (20) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (21) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (28) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (39) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (46) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (58) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (61) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (155) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (53) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (157) empty -> .

    ID              shift and go to state 78
    READ            shift and go to state 79
    WRITE           shift and go to state 80
    FOR             shift and go to state 81
    WHILE           shift and go to state 82
    IF              shift and go to state 83
    RETURN          shift and go to state 84
    SORT            shift and go to state 85
    RCURLY          reduce using rule 157 (empty -> .)

    statements                     shift and go to state 333
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 77

state 333

    (65) else -> ELSE generateQuadELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 334


state 334

    (65) else -> ELSE generateQuadELSE LCURLY statements RCURLY .

    ID              reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    READ            reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WRITE           reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WHILE           reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    IF              reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    SORT            reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    SEMMICOLON      reduce using rule 65 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINCIPAL in state 5 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for MUL in state 148 resolved as shift
WARNING: shift/reduce conflict for DIV in state 148 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 149 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 149 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 209 resolved as shift
WARNING: shift/reduce conflict for ID in state 227 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 227 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 227 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 227 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 227 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 227 resolved as shift
WARNING: shift/reduce conflict for ID in state 228 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 228 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 228 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 228 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 228 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 228 resolved as shift
WARNING: shift/reduce conflict for ID in state 229 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 229 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 229 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 229 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 229 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 229 resolved as shift
WARNING: shift/reduce conflict for ID in state 230 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 230 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 230 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 230 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 230 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 230 resolved as shift
WARNING: shift/reduce conflict for ID in state 231 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 231 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 231 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 231 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 231 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 231 resolved as shift
WARNING: shift/reduce conflict for ID in state 232 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 232 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 232 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 232 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 232 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 232 resolved as shift
WARNING: shift/reduce conflict for ID in state 233 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 233 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 233 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 233 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 233 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 233 resolved as shift
WARNING: shift/reduce conflict for ID in state 234 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 234 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 234 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 234 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 234 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 234 resolved as shift
WARNING: shift/reduce conflict for ID in state 235 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 235 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 235 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 235 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 235 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 235 resolved as shift
WARNING: shift/reduce conflict for ID in state 236 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 236 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 236 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 236 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 236 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 236 resolved as shift
WARNING: reduce/reduce conflict in state 78 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 78
WARNING: reduce/reduce conflict in state 139 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 139
WARNING: reduce/reduce conflict in state 149 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 149
WARNING: reduce/reduce conflict in state 176 resolved using rule (paramWrite -> empty)
WARNING: rejected rule (pexp -> empty) in state 176
WARNING: reduce/reduce conflict in state 209 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 209
WARNING: reduce/reduce conflict in state 215 resolved using rule (expAux -> empty)
WARNING: rejected rule (pexp -> empty) in state 215
