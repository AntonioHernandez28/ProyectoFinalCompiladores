Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA
    END
    FROM
    MODA
    PLOTXY
    SIMPLEREGRESSION
    VARIANZA

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMMICOLON addProgram program1
Rule 2     addProgram -> <empty>
Rule 3     program1 -> vars mainQuad functions mainEnd program2
Rule 4     program1 -> vars mainQuad functions
Rule 5     program1 -> program2
Rule 6     program2 -> principal
Rule 7     principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
Rule 8     mainQuad -> <empty>
Rule 9     mainEnd -> <empty>
Rule 10    statements -> assign SEMMICOLON statements
Rule 11    statements -> functionCall SEMMICOLON statements
Rule 12    statements -> read statements SEMMICOLON statements
Rule 13    statements -> write statements SEMMICOLON statements
Rule 14    statements -> for statements
Rule 15    statements -> while statements
Rule 16    statements -> if statements
Rule 17    statements -> return SEMMICOLON statements
Rule 18    statements -> sort statements SEMMICOLON statements
Rule 19    statements -> plot statements SEMMICOLON statements
Rule 20    statements -> empty
Rule 21    assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad
Rule 22    assign -> ID arrStatement EQUALS saveOperator exp generateAssignQuad
Rule 23    assign -> ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
Rule 24    assign -> ID add_id2 EQUALS saveOperator mean generateAssignQuad
Rule 25    assign -> ID add_id2 EQUALS saveOperator find generateAssignQuad
Rule 26    assign -> ID add_id2 EQUALS saveOperator mode generateAssignQuad
Rule 27    assign -> ID add_id2 EQUALS saveOperator variance generateAssignQuad
Rule 28    generateAssignQuad -> <empty>
Rule 29    add_id -> <empty>
Rule 30    add_id2 -> <empty>
Rule 31    add_id3 -> <empty>
Rule 32    media -> MEDIA LPAREN arr RPAREN SEMMICOLON
Rule 33    functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
Rule 34    validateFunctionID -> <empty>
Rule 35    verifyParams -> <empty>
Rule 36    paramsCount -> <empty>
Rule 37    generateQuadPARAM -> <empty>
Rule 38    expAux -> exp generateQuadPARAM paramsCount
Rule 39    expAux -> exp generateQuadPARAM COMMA paramsCount expAux
Rule 40    expAux -> empty
Rule 41    generateQuadGOSUB -> <empty>
Rule 42    fillEndProc -> <empty>
Rule 43    functionERA -> <empty>
Rule 44    read -> READ operatorRead LPAREN paramReadAux RPAREN
Rule 45    paramRead -> paramReadAux
Rule 46    paramRead -> empty
Rule 47    paramReadAux -> exp generateQuadREAD
Rule 48    paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux
Rule 49    operatorRead -> <empty>
Rule 50    generateQuadREAD -> <empty>
Rule 51    write -> WRITE writeOperator LPAREN paramWrite RPAREN
Rule 52    paramWrite -> paramWriteAux
Rule 53    paramWrite -> empty
Rule 54    paramWriteAux -> exp generateQuadPRINT
Rule 55    paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux
Rule 56    writeOperator -> <empty>
Rule 57    generateQuadPRINT -> <empty>
Rule 58    sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
Rule 59    sortOperator -> <empty>
Rule 60    verifyArray -> <empty>
Rule 61    generateQuadSORT -> <empty>
Rule 62    find -> FIND findOperator LPAREN ID add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND
Rule 63    findOperator -> <empty>
Rule 64    generateQuadFIND -> <empty>
Rule 65    mean -> MEAN meanOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMEAN
Rule 66    mean -> empty
Rule 67    meanOperator -> <empty>
Rule 68    generateQuadMEAN -> <empty>
Rule 69    mode -> MODE modeOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMODE
Rule 70    mode -> empty
Rule 71    modeOperator -> <empty>
Rule 72    generateQuadMODE -> <empty>
Rule 73    variance -> VARIANCE varianceOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadVARIANCE
Rule 74    variance -> empty
Rule 75    varianceOperator -> <empty>
Rule 76    generateQuadVARIANCE -> <empty>
Rule 77    plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
Rule 78    plotOperator -> <empty>
Rule 79    saveIDaux -> <empty>
Rule 80    verifyArrayForPlot -> <empty>
Rule 81    generateQuadPLOT -> <empty>
Rule 82    LoopEnd -> <empty>
Rule 83    for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
Rule 84    forOP -> <empty>
Rule 85    generateQuadFOR -> <empty>
Rule 86    while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
Rule 87    whileOP -> <empty>
Rule 88    generateQuadWHILE -> <empty>
Rule 89    if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
Rule 90    else -> ELSE generateQuadELSE LCURLY statements RCURLY
Rule 91    else -> empty
Rule 92    generateQuadIF -> <empty>
Rule 93    endIF -> <empty>
Rule 94    generateQuadELSE -> <empty>
Rule 95    exp -> nexp generateQuadOR
Rule 96    exp -> nexp generateQuadOR OR saveOperator nexp
Rule 97    generateQuadOR -> <empty>
Rule 98    nexp -> compexp generateQuadAND
Rule 99    nexp -> compexp generateQuadAND AND saveOperator compexp
Rule 100   generateQuadAND -> <empty>
Rule 101   compexp -> sumexp
Rule 102   compexp -> compexp1 sumexp
Rule 103   compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE
Rule 104   compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE
Rule 105   compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE
Rule 106   compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE
Rule 107   compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE
Rule 108   compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
Rule 109   generateQuadCOMPARE -> <empty>
Rule 110   sumexp -> mulexp
Rule 111   sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM
Rule 112   sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM
Rule 113   generateQuadSUM -> <empty>
Rule 114   mulexp -> pexp
Rule 115   mulexp -> pexp MUL saveOperator pexp generateQuadMUL
Rule 116   mulexp -> pexp DIV saveOperator pexp generateQuadMUL
Rule 117   generateQuadMUL -> <empty>
Rule 118   pexp -> ID add_id2
Rule 119   pexp -> CTEI saveCTE
Rule 120   pexp -> CTEF saveCTE
Rule 121   pexp -> CTEC saveCTE
Rule 122   pexp -> CTESTRING saveCTE
Rule 123   pexp -> functionCallExp
Rule 124   pexp -> LPAREN exp RPAREN
Rule 125   pexp -> ID arrStatement
Rule 126   pexp -> empty
Rule 127   functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
Rule 128   validateFunctionIDexp -> <empty>
Rule 129   arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
Rule 130   arrStatement -> empty
Rule 131   getArrFinalAddress -> <empty>
Rule 132   checkArray -> <empty>
Rule 133   generateQuadVER -> <empty>
Rule 134   saveCTE -> <empty>
Rule 135   saveOperator -> <empty>
Rule 136   vars -> var
Rule 137   vars -> empty
Rule 138   var -> VARS var2
Rule 139   var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar
Rule 140   var2 -> empty
Rule 141   var1 -> ID
Rule 142   var1 -> ID COMMA var1 addVar
Rule 143   var1 -> ID createArr arr
Rule 144   var1 -> ID createArr arr COMMA var1 addVar
Rule 145   var1 -> empty
Rule 146   createArr -> <empty>
Rule 147   addVar -> <empty>
Rule 148   saveTypeVar -> <empty>
Rule 149   type -> INT saveTypeVar
Rule 150   type -> CHAR saveTypeVar
Rule 151   type -> FLOAT saveTypeVar
Rule 152   arr -> LBRACKET CTEI setArraySize RBRACKET
Rule 153   setArraySize -> <empty>
Rule 154   functions -> FUNCTION INT saveFunType functions2 endFunc functions
Rule 155   functions -> FUNCTION CHAR saveFunType functions2 endFunc functions
Rule 156   functions -> FUNCTION FLOAT saveFunType functions2 endFunc functions
Rule 157   functions -> FUNCTION VOID saveFunType functions1 endFunc functions
Rule 158   functions -> empty
Rule 159   saveFunType -> <empty>
Rule 160   functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
Rule 161   functions1 -> empty
Rule 162   functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
Rule 163   functions2 -> empty
Rule 164   setStartDirection -> <empty>
Rule 165   addParameter -> <empty>
Rule 166   parameters -> paramsAux
Rule 167   parameters -> empty
Rule 168   paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 169   paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 170   paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 171   nextParam -> COMMA paramsAux
Rule 172   nextParam -> empty
Rule 173   endFunc -> <empty>
Rule 174   saveFunction -> <empty>
Rule 175   args -> args type TWOPOINTS var1 addVar
Rule 176   args -> empty
Rule 177   args1 -> ID addVar
Rule 178   args1 -> ID COMMA args1
Rule 179   args1 -> empty
Rule 180   return -> RETURN LPAREN exp generateQuadRETURN RPAREN
Rule 181   generateQuadRETURN -> <empty>
Rule 182   empty -> <empty>

Terminals, with rules where they appear

AND                  : 99
CHAR                 : 150 155 170
COMILLA              : 
COMMA                : 39 48 55 62 77 142 144 171 178
COMPARE              : 108
CTEC                 : 121
CTEF                 : 120
CTEI                 : 83 119 152
CTESTRING            : 122
DIV                  : 116
DO                   : 83 86
ELSE                 : 90
END                  : 
EQUALS               : 21 22 23 24 25 26 27
FIND                 : 62
FLOAT                : 151 156 169
FOR                  : 83
FROM                 : 
FUNCTION             : 154 155 156 157
GT                   : 103
GTE                  : 105
ID                   : 1 21 22 23 24 25 26 27 33 58 62 62 65 69 73 77 77 118 125 127 141 142 143 144 160 162 168 169 170 177 178
IF                   : 89
INT                  : 149 154 168
LBRACKET             : 129 152
LCURLY               : 7 83 86 89 90 160 162
LPAREN               : 7 32 33 44 51 58 62 65 69 73 77 86 89 124 127 160 162 180
LT                   : 104
LTE                  : 106
MEAN                 : 65
MEDIA                : 32
MINUS                : 112
MODA                 : 
MODE                 : 69
MUL                  : 115
NE                   : 107
OR                   : 96
PLOT                 : 77
PLOTXY               : 
PLUS                 : 111
PRINCIPAL            : 7
PROGRAM              : 1
RBRACKET             : 129 152
RCURLY               : 7 83 86 89 90 160 162
READ                 : 44
RETURN               : 180
RPAREN               : 7 32 33 44 51 58 62 65 69 73 77 86 89 124 127 160 162 180
SEMMICOLON           : 1 10 11 12 13 17 18 19 32 139
SIMPLEREGRESSION     : 
SORT                 : 58
THEN                 : 89
TO                   : 83
TWOPOINTS            : 139 168 169 170 175
VARIANCE             : 73
VARIANZA             : 
VARS                 : 138
VOID                 : 157
WHILE                : 86
WRITE                : 51
error                : 

Nonterminals, with rules where they appear

LoopEnd              : 83 86
addParameter         : 168 169 170
addProgram           : 1
addVar               : 139 142 144 175 177
add_id               : 
add_id2              : 21 23 24 25 26 27 58 62 62 65 69 73 77 77 118
add_id3              : 
args                 : 175
args1                : 178
arr                  : 32 143 144
arrStatement         : 22 125
assign               : 10 83
checkArray           : 129
compexp              : 98 99 99
compexp1             : 102
createArr            : 143 144
else                 : 89
empty                : 20 40 46 53 66 70 74 91 126 130 137 140 145 158 161 163 167 172 176 179
endFunc              : 154 155 156 157
endIF                : 89
exp                  : 21 22 38 39 47 48 54 55 86 89 124 129 180
expAux               : 33 39 127
fillEndProc          : 
find                 : 25
findOperator         : 62
for                  : 14
forOP                : 83
functionCall         : 11 23
functionCallExp      : 123
functionERA          : 33 127
functions            : 3 4 154 155 156 157
functions1           : 157
functions2           : 154 155 156
generateAssignQuad   : 21 22 23 24 25 26 27
generateQuadAND      : 98 99
generateQuadCOMPARE  : 103 104 105 106 107 108
generateQuadELSE     : 90
generateQuadFIND     : 62
generateQuadFOR      : 83
generateQuadGOSUB    : 33 127
generateQuadIF       : 89
generateQuadMEAN     : 65
generateQuadMODE     : 69
generateQuadMUL      : 115 116
generateQuadOR       : 95 96
generateQuadPARAM    : 38 39
generateQuadPLOT     : 77
generateQuadPRINT    : 54 55
generateQuadREAD     : 47 48
generateQuadRETURN   : 180
generateQuadSORT     : 58
generateQuadSUM      : 111 112
generateQuadVARIANCE : 73
generateQuadVER      : 129
generateQuadWHILE    : 86
getArrFinalAddress   : 129
if                   : 16
mainEnd              : 3
mainQuad             : 3 4
mean                 : 24
meanOperator         : 65
media                : 
mode                 : 26
modeOperator         : 69
mulexp               : 110 111 111 112 112
nexp                 : 95 96 96
nextParam            : 168 169 170
operatorRead         : 44 48
paramRead            : 
paramReadAux         : 44 45 48
paramWrite           : 51
paramWriteAux        : 52 55
parameters           : 160 162
paramsAux            : 166 171
paramsCount          : 38 39
pexp                 : 114 115 115 116 116
plot                 : 19
plotOperator         : 77
principal            : 6
program              : 0
program1             : 1
program2             : 3 5
read                 : 12
return               : 17
saveCTE              : 119 120 121 122
saveFunType          : 154 155 156 157
saveFunction         : 7 160 162
saveIDaux            : 77
saveOperator         : 21 22 23 24 25 26 27 96 99 103 104 105 106 107 108 111 112 115 116
saveTypeVar          : 149 150 151 168 169 170
setArraySize         : 152
setStartDirection    : 160 162
sort                 : 18
sortOperator         : 58
statements           : 7 10 11 12 12 13 13 14 15 16 17 18 18 19 19 83 86 89 90 160 162
sumexp               : 101 102 103 103 104 104 105 105 106 106 107 107 108 108
type                 : 139 175
validateFunctionID   : 33
validateFunctionIDexp : 127
var                  : 136
var1                 : 139 142 144 175
var2                 : 138 139
variance             : 27
varianceOperator     : 73
vars                 : 3 4 7 160 162
verifyArray          : 58 62 65 69 73 77
verifyArrayForPlot   : 77
verifyParams         : 33 127
while                : 15
whileOP              : 86
write                : 13
writeOperator        : 51 55

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMMICOLON addProgram program1

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMMICOLON addProgram program1

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMMICOLON addProgram program1

    SEMMICOLON      shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMMICOLON . addProgram program1
    (2) addProgram -> .

    VARS            reduce using rule 2 (addProgram -> .)
    PRINCIPAL       reduce using rule 2 (addProgram -> .)
    FUNCTION        reduce using rule 2 (addProgram -> .)
    $end            reduce using rule 2 (addProgram -> .)

    addProgram                     shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMMICOLON addProgram . program1
    (3) program1 -> . vars mainQuad functions mainEnd program2
    (4) program1 -> . vars mainQuad functions
    (5) program1 -> . program2
    (136) vars -> . var
    (137) vars -> . empty
    (6) program2 -> . principal
    (138) var -> . VARS var2
    (182) empty -> .
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

  ! shift/reduce conflict for PRINCIPAL resolved as shift
    VARS            shift and go to state 12
    FUNCTION        reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)
    PRINCIPAL       shift and go to state 13

  ! PRINCIPAL       [ reduce using rule 182 (empty -> .) ]

    program1                       shift and go to state 6
    vars                           shift and go to state 7
    program2                       shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    principal                      shift and go to state 11

state 6

    (1) program -> PROGRAM ID SEMMICOLON addProgram program1 .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMMICOLON addProgram program1 .)


state 7

    (3) program1 -> vars . mainQuad functions mainEnd program2
    (4) program1 -> vars . mainQuad functions
    (8) mainQuad -> .

    FUNCTION        reduce using rule 8 (mainQuad -> .)
    PRINCIPAL       reduce using rule 8 (mainQuad -> .)
    $end            reduce using rule 8 (mainQuad -> .)

    mainQuad                       shift and go to state 14

state 8

    (5) program1 -> program2 .

    $end            reduce using rule 5 (program1 -> program2 .)


state 9

    (136) vars -> var .

    FUNCTION        reduce using rule 136 (vars -> var .)
    PRINCIPAL       reduce using rule 136 (vars -> var .)
    $end            reduce using rule 136 (vars -> var .)
    ID              reduce using rule 136 (vars -> var .)
    READ            reduce using rule 136 (vars -> var .)
    WRITE           reduce using rule 136 (vars -> var .)
    FOR             reduce using rule 136 (vars -> var .)
    WHILE           reduce using rule 136 (vars -> var .)
    IF              reduce using rule 136 (vars -> var .)
    RETURN          reduce using rule 136 (vars -> var .)
    SORT            reduce using rule 136 (vars -> var .)
    PLOT            reduce using rule 136 (vars -> var .)
    RCURLY          reduce using rule 136 (vars -> var .)
    LCURLY          reduce using rule 136 (vars -> var .)


state 10

    (137) vars -> empty .

    FUNCTION        reduce using rule 137 (vars -> empty .)
    PRINCIPAL       reduce using rule 137 (vars -> empty .)
    $end            reduce using rule 137 (vars -> empty .)
    ID              reduce using rule 137 (vars -> empty .)
    READ            reduce using rule 137 (vars -> empty .)
    WRITE           reduce using rule 137 (vars -> empty .)
    FOR             reduce using rule 137 (vars -> empty .)
    WHILE           reduce using rule 137 (vars -> empty .)
    IF              reduce using rule 137 (vars -> empty .)
    RETURN          reduce using rule 137 (vars -> empty .)
    SORT            reduce using rule 137 (vars -> empty .)
    PLOT            reduce using rule 137 (vars -> empty .)
    RCURLY          reduce using rule 137 (vars -> empty .)
    LCURLY          reduce using rule 137 (vars -> empty .)


state 11

    (6) program2 -> principal .

    $end            reduce using rule 6 (program2 -> principal .)


state 12

    (138) var -> VARS . var2
    (139) var2 -> . var2 type TWOPOINTS var1 SEMMICOLON addVar
    (140) var2 -> . empty
    (182) empty -> .

    INT             reduce using rule 182 (empty -> .)
    CHAR            reduce using rule 182 (empty -> .)
    FLOAT           reduce using rule 182 (empty -> .)
    FUNCTION        reduce using rule 182 (empty -> .)
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)
    ID              reduce using rule 182 (empty -> .)
    READ            reduce using rule 182 (empty -> .)
    WRITE           reduce using rule 182 (empty -> .)
    FOR             reduce using rule 182 (empty -> .)
    WHILE           reduce using rule 182 (empty -> .)
    IF              reduce using rule 182 (empty -> .)
    RETURN          reduce using rule 182 (empty -> .)
    SORT            reduce using rule 182 (empty -> .)
    PLOT            reduce using rule 182 (empty -> .)
    RCURLY          reduce using rule 182 (empty -> .)
    LCURLY          reduce using rule 182 (empty -> .)

    var2                           shift and go to state 15
    empty                          shift and go to state 16

state 13

    (7) principal -> PRINCIPAL . saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
    (174) saveFunction -> .

    LPAREN          reduce using rule 174 (saveFunction -> .)

    saveFunction                   shift and go to state 17

state 14

    (3) program1 -> vars mainQuad . functions mainEnd program2
    (4) program1 -> vars mainQuad . functions
    (154) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (155) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (156) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (157) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (158) functions -> . empty
    (182) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions                      shift and go to state 18
    empty                          shift and go to state 20

state 15

    (138) var -> VARS var2 .
    (139) var2 -> var2 . type TWOPOINTS var1 SEMMICOLON addVar
    (149) type -> . INT saveTypeVar
    (150) type -> . CHAR saveTypeVar
    (151) type -> . FLOAT saveTypeVar

    FUNCTION        reduce using rule 138 (var -> VARS var2 .)
    PRINCIPAL       reduce using rule 138 (var -> VARS var2 .)
    $end            reduce using rule 138 (var -> VARS var2 .)
    ID              reduce using rule 138 (var -> VARS var2 .)
    READ            reduce using rule 138 (var -> VARS var2 .)
    WRITE           reduce using rule 138 (var -> VARS var2 .)
    FOR             reduce using rule 138 (var -> VARS var2 .)
    WHILE           reduce using rule 138 (var -> VARS var2 .)
    IF              reduce using rule 138 (var -> VARS var2 .)
    RETURN          reduce using rule 138 (var -> VARS var2 .)
    SORT            reduce using rule 138 (var -> VARS var2 .)
    PLOT            reduce using rule 138 (var -> VARS var2 .)
    RCURLY          reduce using rule 138 (var -> VARS var2 .)
    LCURLY          reduce using rule 138 (var -> VARS var2 .)
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    FLOAT           shift and go to state 24

    type                           shift and go to state 21

state 16

    (140) var2 -> empty .

    INT             reduce using rule 140 (var2 -> empty .)
    CHAR            reduce using rule 140 (var2 -> empty .)
    FLOAT           reduce using rule 140 (var2 -> empty .)
    FUNCTION        reduce using rule 140 (var2 -> empty .)
    PRINCIPAL       reduce using rule 140 (var2 -> empty .)
    $end            reduce using rule 140 (var2 -> empty .)
    ID              reduce using rule 140 (var2 -> empty .)
    READ            reduce using rule 140 (var2 -> empty .)
    WRITE           reduce using rule 140 (var2 -> empty .)
    FOR             reduce using rule 140 (var2 -> empty .)
    WHILE           reduce using rule 140 (var2 -> empty .)
    IF              reduce using rule 140 (var2 -> empty .)
    RETURN          reduce using rule 140 (var2 -> empty .)
    SORT            reduce using rule 140 (var2 -> empty .)
    PLOT            reduce using rule 140 (var2 -> empty .)
    RCURLY          reduce using rule 140 (var2 -> empty .)
    LCURLY          reduce using rule 140 (var2 -> empty .)


state 17

    (7) principal -> PRINCIPAL saveFunction . LPAREN RPAREN LCURLY vars statements RCURLY

    LPAREN          shift and go to state 25


state 18

    (3) program1 -> vars mainQuad functions . mainEnd program2
    (4) program1 -> vars mainQuad functions .
    (9) mainEnd -> .

    $end            reduce using rule 4 (program1 -> vars mainQuad functions .)
    PRINCIPAL       reduce using rule 9 (mainEnd -> .)

    mainEnd                        shift and go to state 26

state 19

    (154) functions -> FUNCTION . INT saveFunType functions2 endFunc functions
    (155) functions -> FUNCTION . CHAR saveFunType functions2 endFunc functions
    (156) functions -> FUNCTION . FLOAT saveFunType functions2 endFunc functions
    (157) functions -> FUNCTION . VOID saveFunType functions1 endFunc functions

    INT             shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30


state 20

    (158) functions -> empty .

    PRINCIPAL       reduce using rule 158 (functions -> empty .)
    $end            reduce using rule 158 (functions -> empty .)


state 21

    (139) var2 -> var2 type . TWOPOINTS var1 SEMMICOLON addVar

    TWOPOINTS       shift and go to state 31


state 22

    (149) type -> INT . saveTypeVar
    (148) saveTypeVar -> .

    TWOPOINTS       reduce using rule 148 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 32

state 23

    (150) type -> CHAR . saveTypeVar
    (148) saveTypeVar -> .

    TWOPOINTS       reduce using rule 148 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 33

state 24

    (151) type -> FLOAT . saveTypeVar
    (148) saveTypeVar -> .

    TWOPOINTS       reduce using rule 148 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 34

state 25

    (7) principal -> PRINCIPAL saveFunction LPAREN . RPAREN LCURLY vars statements RCURLY

    RPAREN          shift and go to state 35


state 26

    (3) program1 -> vars mainQuad functions mainEnd . program2
    (6) program2 -> . principal
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

    PRINCIPAL       shift and go to state 13

    program2                       shift and go to state 36
    principal                      shift and go to state 11

state 27

    (154) functions -> FUNCTION INT . saveFunType functions2 endFunc functions
    (159) saveFunType -> .

    ID              reduce using rule 159 (saveFunType -> .)
    FUNCTION        reduce using rule 159 (saveFunType -> .)
    PRINCIPAL       reduce using rule 159 (saveFunType -> .)
    $end            reduce using rule 159 (saveFunType -> .)

    saveFunType                    shift and go to state 37

state 28

    (155) functions -> FUNCTION CHAR . saveFunType functions2 endFunc functions
    (159) saveFunType -> .

    ID              reduce using rule 159 (saveFunType -> .)
    FUNCTION        reduce using rule 159 (saveFunType -> .)
    PRINCIPAL       reduce using rule 159 (saveFunType -> .)
    $end            reduce using rule 159 (saveFunType -> .)

    saveFunType                    shift and go to state 38

state 29

    (156) functions -> FUNCTION FLOAT . saveFunType functions2 endFunc functions
    (159) saveFunType -> .

    ID              reduce using rule 159 (saveFunType -> .)
    FUNCTION        reduce using rule 159 (saveFunType -> .)
    PRINCIPAL       reduce using rule 159 (saveFunType -> .)
    $end            reduce using rule 159 (saveFunType -> .)

    saveFunType                    shift and go to state 39

state 30

    (157) functions -> FUNCTION VOID . saveFunType functions1 endFunc functions
    (159) saveFunType -> .

    ID              reduce using rule 159 (saveFunType -> .)
    FUNCTION        reduce using rule 159 (saveFunType -> .)
    PRINCIPAL       reduce using rule 159 (saveFunType -> .)
    $end            reduce using rule 159 (saveFunType -> .)

    saveFunType                    shift and go to state 40

state 31

    (139) var2 -> var2 type TWOPOINTS . var1 SEMMICOLON addVar
    (141) var1 -> . ID
    (142) var1 -> . ID COMMA var1 addVar
    (143) var1 -> . ID createArr arr
    (144) var1 -> . ID createArr arr COMMA var1 addVar
    (145) var1 -> . empty
    (182) empty -> .

    ID              shift and go to state 42
    SEMMICOLON      reduce using rule 182 (empty -> .)

    var1                           shift and go to state 41
    empty                          shift and go to state 43

state 32

    (149) type -> INT saveTypeVar .

    TWOPOINTS       reduce using rule 149 (type -> INT saveTypeVar .)


state 33

    (150) type -> CHAR saveTypeVar .

    TWOPOINTS       reduce using rule 150 (type -> CHAR saveTypeVar .)


state 34

    (151) type -> FLOAT saveTypeVar .

    TWOPOINTS       reduce using rule 151 (type -> FLOAT saveTypeVar .)


state 35

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN . LCURLY vars statements RCURLY

    LCURLY          shift and go to state 44


state 36

    (3) program1 -> vars mainQuad functions mainEnd program2 .

    $end            reduce using rule 3 (program1 -> vars mainQuad functions mainEnd program2 .)


state 37

    (154) functions -> FUNCTION INT saveFunType . functions2 endFunc functions
    (162) functions2 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (163) functions2 -> . empty
    (182) empty -> .

    ID              shift and go to state 46
    FUNCTION        reduce using rule 182 (empty -> .)
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions2                     shift and go to state 45
    empty                          shift and go to state 47

state 38

    (155) functions -> FUNCTION CHAR saveFunType . functions2 endFunc functions
    (162) functions2 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (163) functions2 -> . empty
    (182) empty -> .

    ID              shift and go to state 46
    FUNCTION        reduce using rule 182 (empty -> .)
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions2                     shift and go to state 48
    empty                          shift and go to state 47

state 39

    (156) functions -> FUNCTION FLOAT saveFunType . functions2 endFunc functions
    (162) functions2 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (163) functions2 -> . empty
    (182) empty -> .

    ID              shift and go to state 46
    FUNCTION        reduce using rule 182 (empty -> .)
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions2                     shift and go to state 49
    empty                          shift and go to state 47

state 40

    (157) functions -> FUNCTION VOID saveFunType . functions1 endFunc functions
    (160) functions1 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (161) functions1 -> . empty
    (182) empty -> .

    ID              shift and go to state 51
    FUNCTION        reduce using rule 182 (empty -> .)
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions1                     shift and go to state 50
    empty                          shift and go to state 52

state 41

    (139) var2 -> var2 type TWOPOINTS var1 . SEMMICOLON addVar

    SEMMICOLON      shift and go to state 53


state 42

    (141) var1 -> ID .
    (142) var1 -> ID . COMMA var1 addVar
    (143) var1 -> ID . createArr arr
    (144) var1 -> ID . createArr arr COMMA var1 addVar
    (146) createArr -> .

    SEMMICOLON      reduce using rule 141 (var1 -> ID .)
    COMMA           shift and go to state 54
    LBRACKET        reduce using rule 146 (createArr -> .)

    createArr                      shift and go to state 55

state 43

    (145) var1 -> empty .

    SEMMICOLON      reduce using rule 145 (var1 -> empty .)


state 44

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY . vars statements RCURLY
    (136) vars -> . var
    (137) vars -> . empty
    (138) var -> . VARS var2
    (182) empty -> .

    VARS            shift and go to state 12
    ID              reduce using rule 182 (empty -> .)
    READ            reduce using rule 182 (empty -> .)
    WRITE           reduce using rule 182 (empty -> .)
    FOR             reduce using rule 182 (empty -> .)
    WHILE           reduce using rule 182 (empty -> .)
    IF              reduce using rule 182 (empty -> .)
    RETURN          reduce using rule 182 (empty -> .)
    SORT            reduce using rule 182 (empty -> .)
    PLOT            reduce using rule 182 (empty -> .)
    RCURLY          reduce using rule 182 (empty -> .)

    vars                           shift and go to state 56
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 45

    (154) functions -> FUNCTION INT saveFunType functions2 . endFunc functions
    (173) endFunc -> .

    FUNCTION        reduce using rule 173 (endFunc -> .)
    PRINCIPAL       reduce using rule 173 (endFunc -> .)
    $end            reduce using rule 173 (endFunc -> .)

    endFunc                        shift and go to state 57

state 46

    (162) functions2 -> ID . saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (174) saveFunction -> .

    LPAREN          reduce using rule 174 (saveFunction -> .)

    saveFunction                   shift and go to state 58

state 47

    (163) functions2 -> empty .

    FUNCTION        reduce using rule 163 (functions2 -> empty .)
    PRINCIPAL       reduce using rule 163 (functions2 -> empty .)
    $end            reduce using rule 163 (functions2 -> empty .)


state 48

    (155) functions -> FUNCTION CHAR saveFunType functions2 . endFunc functions
    (173) endFunc -> .

    FUNCTION        reduce using rule 173 (endFunc -> .)
    PRINCIPAL       reduce using rule 173 (endFunc -> .)
    $end            reduce using rule 173 (endFunc -> .)

    endFunc                        shift and go to state 59

state 49

    (156) functions -> FUNCTION FLOAT saveFunType functions2 . endFunc functions
    (173) endFunc -> .

    FUNCTION        reduce using rule 173 (endFunc -> .)
    PRINCIPAL       reduce using rule 173 (endFunc -> .)
    $end            reduce using rule 173 (endFunc -> .)

    endFunc                        shift and go to state 60

state 50

    (157) functions -> FUNCTION VOID saveFunType functions1 . endFunc functions
    (173) endFunc -> .

    FUNCTION        reduce using rule 173 (endFunc -> .)
    PRINCIPAL       reduce using rule 173 (endFunc -> .)
    $end            reduce using rule 173 (endFunc -> .)

    endFunc                        shift and go to state 61

state 51

    (160) functions1 -> ID . saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (174) saveFunction -> .

    LPAREN          reduce using rule 174 (saveFunction -> .)

    saveFunction                   shift and go to state 62

state 52

    (161) functions1 -> empty .

    FUNCTION        reduce using rule 161 (functions1 -> empty .)
    PRINCIPAL       reduce using rule 161 (functions1 -> empty .)
    $end            reduce using rule 161 (functions1 -> empty .)


state 53

    (139) var2 -> var2 type TWOPOINTS var1 SEMMICOLON . addVar
    (147) addVar -> .

    INT             reduce using rule 147 (addVar -> .)
    CHAR            reduce using rule 147 (addVar -> .)
    FLOAT           reduce using rule 147 (addVar -> .)
    FUNCTION        reduce using rule 147 (addVar -> .)
    PRINCIPAL       reduce using rule 147 (addVar -> .)
    $end            reduce using rule 147 (addVar -> .)
    ID              reduce using rule 147 (addVar -> .)
    READ            reduce using rule 147 (addVar -> .)
    WRITE           reduce using rule 147 (addVar -> .)
    FOR             reduce using rule 147 (addVar -> .)
    WHILE           reduce using rule 147 (addVar -> .)
    IF              reduce using rule 147 (addVar -> .)
    RETURN          reduce using rule 147 (addVar -> .)
    SORT            reduce using rule 147 (addVar -> .)
    PLOT            reduce using rule 147 (addVar -> .)
    RCURLY          reduce using rule 147 (addVar -> .)
    LCURLY          reduce using rule 147 (addVar -> .)

    addVar                         shift and go to state 63

state 54

    (142) var1 -> ID COMMA . var1 addVar
    (141) var1 -> . ID
    (142) var1 -> . ID COMMA var1 addVar
    (143) var1 -> . ID createArr arr
    (144) var1 -> . ID createArr arr COMMA var1 addVar
    (145) var1 -> . empty
    (182) empty -> .

    ID              shift and go to state 42
    SEMMICOLON      reduce using rule 182 (empty -> .)

    var1                           shift and go to state 64
    empty                          shift and go to state 43

state 55

    (143) var1 -> ID createArr . arr
    (144) var1 -> ID createArr . arr COMMA var1 addVar
    (152) arr -> . LBRACKET CTEI setArraySize RBRACKET

    LBRACKET        shift and go to state 66

    arr                            shift and go to state 65

state 56

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)

    statements                     shift and go to state 67
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 57

    (154) functions -> FUNCTION INT saveFunType functions2 endFunc . functions
    (154) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (155) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (156) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (157) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (158) functions -> . empty
    (182) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions                      shift and go to state 88
    empty                          shift and go to state 20

state 58

    (162) functions2 -> ID saveFunction . LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY

    LPAREN          shift and go to state 89


state 59

    (155) functions -> FUNCTION CHAR saveFunType functions2 endFunc . functions
    (154) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (155) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (156) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (157) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (158) functions -> . empty
    (182) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions                      shift and go to state 90
    empty                          shift and go to state 20

state 60

    (156) functions -> FUNCTION FLOAT saveFunType functions2 endFunc . functions
    (154) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (155) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (156) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (157) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (158) functions -> . empty
    (182) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions                      shift and go to state 91
    empty                          shift and go to state 20

state 61

    (157) functions -> FUNCTION VOID saveFunType functions1 endFunc . functions
    (154) functions -> . FUNCTION INT saveFunType functions2 endFunc functions
    (155) functions -> . FUNCTION CHAR saveFunType functions2 endFunc functions
    (156) functions -> . FUNCTION FLOAT saveFunType functions2 endFunc functions
    (157) functions -> . FUNCTION VOID saveFunType functions1 endFunc functions
    (158) functions -> . empty
    (182) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 182 (empty -> .)
    $end            reduce using rule 182 (empty -> .)

    functions                      shift and go to state 92
    empty                          shift and go to state 20

state 62

    (160) functions1 -> ID saveFunction . LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY

    LPAREN          shift and go to state 93


state 63

    (139) var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .

    INT             reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    CHAR            reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FLOAT           reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FUNCTION        reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    PRINCIPAL       reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    $end            reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    ID              reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    READ            reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WRITE           reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FOR             reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WHILE           reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    IF              reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RETURN          reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    SORT            reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    PLOT            reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RCURLY          reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    LCURLY          reduce using rule 139 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)


state 64

    (142) var1 -> ID COMMA var1 . addVar
    (147) addVar -> .

    SEMMICOLON      reduce using rule 147 (addVar -> .)

    addVar                         shift and go to state 94

state 65

    (143) var1 -> ID createArr arr .
    (144) var1 -> ID createArr arr . COMMA var1 addVar

    SEMMICOLON      reduce using rule 143 (var1 -> ID createArr arr .)
    COMMA           shift and go to state 95


state 66

    (152) arr -> LBRACKET . CTEI setArraySize RBRACKET

    CTEI            shift and go to state 96


state 67

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements . RCURLY

    RCURLY          shift and go to state 97


state 68

    (10) statements -> assign . SEMMICOLON statements

    SEMMICOLON      shift and go to state 98


state 69

    (11) statements -> functionCall . SEMMICOLON statements

    SEMMICOLON      shift and go to state 99


state 70

    (12) statements -> read . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    SEMMICOLON      reduce using rule 182 (empty -> .)

    read                           shift and go to state 70
    statements                     shift and go to state 100
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 71

    (13) statements -> write . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    SEMMICOLON      reduce using rule 182 (empty -> .)

    write                          shift and go to state 71
    statements                     shift and go to state 101
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 72

    (14) statements -> for . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    for                            shift and go to state 72
    statements                     shift and go to state 102
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 73

    (15) statements -> while . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    while                          shift and go to state 73
    statements                     shift and go to state 103
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 74

    (16) statements -> if . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    if                             shift and go to state 74
    statements                     shift and go to state 104
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 75

    (17) statements -> return . SEMMICOLON statements

    SEMMICOLON      shift and go to state 105


state 76

    (18) statements -> sort . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    SEMMICOLON      reduce using rule 182 (empty -> .)

    sort                           shift and go to state 76
    statements                     shift and go to state 106
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 77

    (19) statements -> plot . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    SEMMICOLON      reduce using rule 182 (empty -> .)

    plot                           shift and go to state 77
    statements                     shift and go to state 107
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 78

state 78

    (20) statements -> empty .

    RCURLY          reduce using rule 20 (statements -> empty .)
    SEMMICOLON      reduce using rule 20 (statements -> empty .)


state 79

    (21) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> ID . arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> ID . add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> ID . add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> ID . add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> ID . add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> ID . add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> ID . validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (30) add_id2 -> .
    (129) arrStatement -> . LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (130) arrStatement -> . empty
    (34) validateFunctionID -> .
    (182) empty -> .

  ! reduce/reduce conflict for EQUALS resolved using rule 30 (add_id2 -> .)
    EQUALS          reduce using rule 30 (add_id2 -> .)
    LBRACKET        shift and go to state 111
    LPAREN          reduce using rule 34 (validateFunctionID -> .)

  ! EQUALS          [ reduce using rule 182 (empty -> .) ]

    add_id2                        shift and go to state 108
    arrStatement                   shift and go to state 109
    validateFunctionID             shift and go to state 110
    empty                          shift and go to state 112

state 80

    (44) read -> READ . operatorRead LPAREN paramReadAux RPAREN
    (49) operatorRead -> .

    LPAREN          reduce using rule 49 (operatorRead -> .)

    operatorRead                   shift and go to state 113

state 81

    (51) write -> WRITE . writeOperator LPAREN paramWrite RPAREN
    (56) writeOperator -> .

    LPAREN          reduce using rule 56 (writeOperator -> .)

    writeOperator                  shift and go to state 114

state 82

    (83) for -> FOR . forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (84) forOP -> .

    ID              reduce using rule 84 (forOP -> .)

    forOP                          shift and go to state 115

state 83

    (86) while -> WHILE . whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (87) whileOP -> .

    LPAREN          reduce using rule 87 (whileOP -> .)

    whileOP                        shift and go to state 116

state 84

    (89) if -> IF . LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    LPAREN          shift and go to state 117


state 85

    (180) return -> RETURN . LPAREN exp generateQuadRETURN RPAREN

    LPAREN          shift and go to state 118


state 86

    (58) sort -> SORT . sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (59) sortOperator -> .

    LPAREN          reduce using rule 59 (sortOperator -> .)

    sortOperator                   shift and go to state 119

state 87

    (77) plot -> PLOT . plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (78) plotOperator -> .

    LPAREN          reduce using rule 78 (plotOperator -> .)

    plotOperator                   shift and go to state 120

state 88

    (154) functions -> FUNCTION INT saveFunType functions2 endFunc functions .

    PRINCIPAL       reduce using rule 154 (functions -> FUNCTION INT saveFunType functions2 endFunc functions .)
    $end            reduce using rule 154 (functions -> FUNCTION INT saveFunType functions2 endFunc functions .)


state 89

    (162) functions2 -> ID saveFunction LPAREN . parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (166) parameters -> . paramsAux
    (167) parameters -> . empty
    (168) paramsAux -> . INT saveTypeVar TWOPOINTS ID addParameter nextParam
    (169) paramsAux -> . FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
    (170) paramsAux -> . CHAR saveTypeVar TWOPOINTS ID addParameter nextParam
    (182) empty -> .

    INT             shift and go to state 124
    FLOAT           shift and go to state 125
    CHAR            shift and go to state 126
    RPAREN          reduce using rule 182 (empty -> .)

    parameters                     shift and go to state 121
    paramsAux                      shift and go to state 122
    empty                          shift and go to state 123

state 90

    (155) functions -> FUNCTION CHAR saveFunType functions2 endFunc functions .

    PRINCIPAL       reduce using rule 155 (functions -> FUNCTION CHAR saveFunType functions2 endFunc functions .)
    $end            reduce using rule 155 (functions -> FUNCTION CHAR saveFunType functions2 endFunc functions .)


state 91

    (156) functions -> FUNCTION FLOAT saveFunType functions2 endFunc functions .

    PRINCIPAL       reduce using rule 156 (functions -> FUNCTION FLOAT saveFunType functions2 endFunc functions .)
    $end            reduce using rule 156 (functions -> FUNCTION FLOAT saveFunType functions2 endFunc functions .)


state 92

    (157) functions -> FUNCTION VOID saveFunType functions1 endFunc functions .

    PRINCIPAL       reduce using rule 157 (functions -> FUNCTION VOID saveFunType functions1 endFunc functions .)
    $end            reduce using rule 157 (functions -> FUNCTION VOID saveFunType functions1 endFunc functions .)


state 93

    (160) functions1 -> ID saveFunction LPAREN . parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (166) parameters -> . paramsAux
    (167) parameters -> . empty
    (168) paramsAux -> . INT saveTypeVar TWOPOINTS ID addParameter nextParam
    (169) paramsAux -> . FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
    (170) paramsAux -> . CHAR saveTypeVar TWOPOINTS ID addParameter nextParam
    (182) empty -> .

    INT             shift and go to state 124
    FLOAT           shift and go to state 125
    CHAR            shift and go to state 126
    RPAREN          reduce using rule 182 (empty -> .)

    parameters                     shift and go to state 127
    paramsAux                      shift and go to state 122
    empty                          shift and go to state 123

state 94

    (142) var1 -> ID COMMA var1 addVar .

    SEMMICOLON      reduce using rule 142 (var1 -> ID COMMA var1 addVar .)


state 95

    (144) var1 -> ID createArr arr COMMA . var1 addVar
    (141) var1 -> . ID
    (142) var1 -> . ID COMMA var1 addVar
    (143) var1 -> . ID createArr arr
    (144) var1 -> . ID createArr arr COMMA var1 addVar
    (145) var1 -> . empty
    (182) empty -> .

    ID              shift and go to state 42
    SEMMICOLON      reduce using rule 182 (empty -> .)

    var1                           shift and go to state 128
    empty                          shift and go to state 43

state 96

    (152) arr -> LBRACKET CTEI . setArraySize RBRACKET
    (153) setArraySize -> .

    RBRACKET        reduce using rule 153 (setArraySize -> .)

    setArraySize                   shift and go to state 129

state 97

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .

    $end            reduce using rule 7 (principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .)


state 98

    (10) statements -> assign SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    assign                         shift and go to state 68
    statements                     shift and go to state 130
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 99

    (11) statements -> functionCall SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    functionCall                   shift and go to state 69
    statements                     shift and go to state 131
    assign                         shift and go to state 68
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 100

    (12) statements -> read statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 132


state 101

    (13) statements -> write statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 133


state 102

    (14) statements -> for statements .

    RCURLY          reduce using rule 14 (statements -> for statements .)
    SEMMICOLON      reduce using rule 14 (statements -> for statements .)


state 103

    (15) statements -> while statements .

    RCURLY          reduce using rule 15 (statements -> while statements .)
    SEMMICOLON      reduce using rule 15 (statements -> while statements .)


state 104

    (16) statements -> if statements .

    RCURLY          reduce using rule 16 (statements -> if statements .)
    SEMMICOLON      reduce using rule 16 (statements -> if statements .)


state 105

    (17) statements -> return SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    return                         shift and go to state 75
    statements                     shift and go to state 134
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 106

    (18) statements -> sort statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 135


state 107

    (19) statements -> plot statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 136


state 108

    (21) assign -> ID add_id2 . EQUALS saveOperator exp generateAssignQuad
    (23) assign -> ID add_id2 . EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> ID add_id2 . EQUALS saveOperator mean generateAssignQuad
    (25) assign -> ID add_id2 . EQUALS saveOperator find generateAssignQuad
    (26) assign -> ID add_id2 . EQUALS saveOperator mode generateAssignQuad
    (27) assign -> ID add_id2 . EQUALS saveOperator variance generateAssignQuad

    EQUALS          shift and go to state 137


state 109

    (22) assign -> ID arrStatement . EQUALS saveOperator exp generateAssignQuad

    EQUALS          shift and go to state 138


state 110

    (33) functionCall -> ID validateFunctionID . functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (43) functionERA -> .

    LPAREN          reduce using rule 43 (functionERA -> .)

    functionERA                    shift and go to state 139

state 111

    (129) arrStatement -> LBRACKET . checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (132) checkArray -> .

    ID              reduce using rule 132 (checkArray -> .)
    CTEI            reduce using rule 132 (checkArray -> .)
    CTEF            reduce using rule 132 (checkArray -> .)
    CTEC            reduce using rule 132 (checkArray -> .)
    CTESTRING       reduce using rule 132 (checkArray -> .)
    LPAREN          reduce using rule 132 (checkArray -> .)
    RBRACKET        reduce using rule 132 (checkArray -> .)
    OR              reduce using rule 132 (checkArray -> .)
    AND             reduce using rule 132 (checkArray -> .)
    GT              reduce using rule 132 (checkArray -> .)
    LT              reduce using rule 132 (checkArray -> .)
    GTE             reduce using rule 132 (checkArray -> .)
    LTE             reduce using rule 132 (checkArray -> .)
    NE              reduce using rule 132 (checkArray -> .)
    COMPARE         reduce using rule 132 (checkArray -> .)
    PLUS            reduce using rule 132 (checkArray -> .)
    MINUS           reduce using rule 132 (checkArray -> .)
    MUL             reduce using rule 132 (checkArray -> .)
    DIV             reduce using rule 132 (checkArray -> .)

    checkArray                     shift and go to state 140

state 112

    (130) arrStatement -> empty .

    EQUALS          reduce using rule 130 (arrStatement -> empty .)
    MUL             reduce using rule 130 (arrStatement -> empty .)
    DIV             reduce using rule 130 (arrStatement -> empty .)
    PLUS            reduce using rule 130 (arrStatement -> empty .)
    MINUS           reduce using rule 130 (arrStatement -> empty .)
    GT              reduce using rule 130 (arrStatement -> empty .)
    LT              reduce using rule 130 (arrStatement -> empty .)
    GTE             reduce using rule 130 (arrStatement -> empty .)
    LTE             reduce using rule 130 (arrStatement -> empty .)
    NE              reduce using rule 130 (arrStatement -> empty .)
    COMPARE         reduce using rule 130 (arrStatement -> empty .)
    AND             reduce using rule 130 (arrStatement -> empty .)
    OR              reduce using rule 130 (arrStatement -> empty .)
    RPAREN          reduce using rule 130 (arrStatement -> empty .)
    RBRACKET        reduce using rule 130 (arrStatement -> empty .)
    COMMA           reduce using rule 130 (arrStatement -> empty .)
    SEMMICOLON      reduce using rule 130 (arrStatement -> empty .)
    TO              reduce using rule 130 (arrStatement -> empty .)
    ID              reduce using rule 130 (arrStatement -> empty .)
    CTEI            reduce using rule 130 (arrStatement -> empty .)
    CTEF            reduce using rule 130 (arrStatement -> empty .)
    CTEC            reduce using rule 130 (arrStatement -> empty .)
    CTESTRING       reduce using rule 130 (arrStatement -> empty .)
    LPAREN          reduce using rule 130 (arrStatement -> empty .)


state 113

    (44) read -> READ operatorRead . LPAREN paramReadAux RPAREN

    LPAREN          shift and go to state 141


state 114

    (51) write -> WRITE writeOperator . LPAREN paramWrite RPAREN

    LPAREN          shift and go to state 142


state 115

    (83) for -> FOR forOP . assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad

    ID              shift and go to state 144

    assign                         shift and go to state 143

state 116

    (86) while -> WHILE whileOP . LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    LPAREN          shift and go to state 145


state 117

    (89) if -> IF LPAREN . exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)

    exp                            shift and go to state 147
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 118

    (180) return -> RETURN LPAREN . exp generateQuadRETURN RPAREN
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)

    exp                            shift and go to state 161
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 119

    (58) sort -> SORT sortOperator . LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT

    LPAREN          shift and go to state 162


state 120

    (77) plot -> PLOT plotOperator . LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT

    LPAREN          shift and go to state 163


state 121

    (162) functions2 -> ID saveFunction LPAREN parameters . RPAREN vars LCURLY setStartDirection statements RCURLY

    RPAREN          shift and go to state 164


state 122

    (166) parameters -> paramsAux .

    RPAREN          reduce using rule 166 (parameters -> paramsAux .)


state 123

    (167) parameters -> empty .

    RPAREN          reduce using rule 167 (parameters -> empty .)


state 124

    (168) paramsAux -> INT . saveTypeVar TWOPOINTS ID addParameter nextParam
    (148) saveTypeVar -> .

    TWOPOINTS       reduce using rule 148 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 165

state 125

    (169) paramsAux -> FLOAT . saveTypeVar TWOPOINTS ID addParameter nextParam
    (148) saveTypeVar -> .

    TWOPOINTS       reduce using rule 148 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 166

state 126

    (170) paramsAux -> CHAR . saveTypeVar TWOPOINTS ID addParameter nextParam
    (148) saveTypeVar -> .

    TWOPOINTS       reduce using rule 148 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 167

state 127

    (160) functions1 -> ID saveFunction LPAREN parameters . RPAREN vars LCURLY setStartDirection statements RCURLY

    RPAREN          shift and go to state 168


state 128

    (144) var1 -> ID createArr arr COMMA var1 . addVar
    (147) addVar -> .

    SEMMICOLON      reduce using rule 147 (addVar -> .)

    addVar                         shift and go to state 169

state 129

    (152) arr -> LBRACKET CTEI setArraySize . RBRACKET

    RBRACKET        shift and go to state 170


state 130

    (10) statements -> assign SEMMICOLON statements .

    RCURLY          reduce using rule 10 (statements -> assign SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 10 (statements -> assign SEMMICOLON statements .)


state 131

    (11) statements -> functionCall SEMMICOLON statements .

    RCURLY          reduce using rule 11 (statements -> functionCall SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 11 (statements -> functionCall SEMMICOLON statements .)


state 132

    (12) statements -> read statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    read                           shift and go to state 70
    statements                     shift and go to state 171
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 133

    (13) statements -> write statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    write                          shift and go to state 71
    statements                     shift and go to state 172
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 134

    (17) statements -> return SEMMICOLON statements .

    RCURLY          reduce using rule 17 (statements -> return SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 17 (statements -> return SEMMICOLON statements .)


state 135

    (18) statements -> sort statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    sort                           shift and go to state 76
    statements                     shift and go to state 173
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 136

    (19) statements -> plot statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    plot                           shift and go to state 77
    statements                     shift and go to state 174
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    empty                          shift and go to state 78

state 137

    (21) assign -> ID add_id2 EQUALS . saveOperator exp generateAssignQuad
    (23) assign -> ID add_id2 EQUALS . saveOperator functionCall generateAssignQuad
    (24) assign -> ID add_id2 EQUALS . saveOperator mean generateAssignQuad
    (25) assign -> ID add_id2 EQUALS . saveOperator find generateAssignQuad
    (26) assign -> ID add_id2 EQUALS . saveOperator mode generateAssignQuad
    (27) assign -> ID add_id2 EQUALS . saveOperator variance generateAssignQuad
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    MEAN            reduce using rule 135 (saveOperator -> .)
    FIND            reduce using rule 135 (saveOperator -> .)
    MODE            reduce using rule 135 (saveOperator -> .)
    VARIANCE        reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    GT              reduce using rule 135 (saveOperator -> .)
    LT              reduce using rule 135 (saveOperator -> .)
    GTE             reduce using rule 135 (saveOperator -> .)
    LTE             reduce using rule 135 (saveOperator -> .)
    NE              reduce using rule 135 (saveOperator -> .)
    COMPARE         reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 175

state 138

    (22) assign -> ID arrStatement EQUALS . saveOperator exp generateAssignQuad
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    GT              reduce using rule 135 (saveOperator -> .)
    LT              reduce using rule 135 (saveOperator -> .)
    GTE             reduce using rule 135 (saveOperator -> .)
    LTE             reduce using rule 135 (saveOperator -> .)
    NE              reduce using rule 135 (saveOperator -> .)
    COMPARE         reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 176

state 139

    (33) functionCall -> ID validateFunctionID functionERA . LPAREN expAux verifyParams RPAREN generateQuadGOSUB

    LPAREN          shift and go to state 177


state 140

    (129) arrStatement -> LBRACKET checkArray . exp generateQuadVER RBRACKET getArrFinalAddress
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)

    exp                            shift and go to state 178
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 141

    (44) read -> READ operatorRead LPAREN . paramReadAux RPAREN
    (47) paramReadAux -> . exp generateQuadREAD
    (48) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)

    paramReadAux                   shift and go to state 179
    exp                            shift and go to state 180
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 142

    (51) write -> WRITE writeOperator LPAREN . paramWrite RPAREN
    (52) paramWrite -> . paramWriteAux
    (53) paramWrite -> . empty
    (54) paramWriteAux -> . exp generateQuadPRINT
    (55) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (182) empty -> .
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 182 (empty -> .)
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146

    paramWrite                     shift and go to state 181
    paramWriteAux                  shift and go to state 182
    empty                          shift and go to state 183
    exp                            shift and go to state 184
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159

state 143

    (83) for -> FOR forOP assign . TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    TO              shift and go to state 185


state 144

    (21) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> ID . arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> ID . add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> ID . add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> ID . add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> ID . add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> ID . add_id2 EQUALS saveOperator variance generateAssignQuad
    (30) add_id2 -> .
    (129) arrStatement -> . LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (130) arrStatement -> . empty
    (182) empty -> .

  ! reduce/reduce conflict for EQUALS resolved using rule 30 (add_id2 -> .)
    EQUALS          reduce using rule 30 (add_id2 -> .)
    LBRACKET        shift and go to state 111

  ! EQUALS          [ reduce using rule 182 (empty -> .) ]

    add_id2                        shift and go to state 108
    arrStatement                   shift and go to state 109
    empty                          shift and go to state 112

state 145

    (86) while -> WHILE whileOP LPAREN . exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)

    exp                            shift and go to state 186
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 146

    (124) pexp -> LPAREN . exp RPAREN
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)

    exp                            shift and go to state 187
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 147

    (89) if -> IF LPAREN exp . RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    RPAREN          shift and go to state 188


state 148

    (95) exp -> nexp . generateQuadOR
    (96) exp -> nexp . generateQuadOR OR saveOperator nexp
    (97) generateQuadOR -> .

    OR              reduce using rule 97 (generateQuadOR -> .)
    RPAREN          reduce using rule 97 (generateQuadOR -> .)
    RBRACKET        reduce using rule 97 (generateQuadOR -> .)
    COMMA           reduce using rule 97 (generateQuadOR -> .)
    SEMMICOLON      reduce using rule 97 (generateQuadOR -> .)
    TO              reduce using rule 97 (generateQuadOR -> .)

    generateQuadOR                 shift and go to state 189

state 149

    (98) nexp -> compexp . generateQuadAND
    (99) nexp -> compexp . generateQuadAND AND saveOperator compexp
    (100) generateQuadAND -> .

    AND             reduce using rule 100 (generateQuadAND -> .)
    OR              reduce using rule 100 (generateQuadAND -> .)
    RPAREN          reduce using rule 100 (generateQuadAND -> .)
    RBRACKET        reduce using rule 100 (generateQuadAND -> .)
    COMMA           reduce using rule 100 (generateQuadAND -> .)
    SEMMICOLON      reduce using rule 100 (generateQuadAND -> .)
    TO              reduce using rule 100 (generateQuadAND -> .)

    generateQuadAND                shift and go to state 190

state 150

    (101) compexp -> sumexp .
    (103) compexp1 -> sumexp . GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> sumexp . LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> sumexp . GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> sumexp . LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> sumexp . NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> sumexp . COMPARE saveOperator sumexp generateQuadCOMPARE

    AND             reduce using rule 101 (compexp -> sumexp .)
    OR              reduce using rule 101 (compexp -> sumexp .)
    RPAREN          reduce using rule 101 (compexp -> sumexp .)
    RBRACKET        reduce using rule 101 (compexp -> sumexp .)
    COMMA           reduce using rule 101 (compexp -> sumexp .)
    SEMMICOLON      reduce using rule 101 (compexp -> sumexp .)
    TO              reduce using rule 101 (compexp -> sumexp .)
    GT              shift and go to state 191
    LT              shift and go to state 192
    GTE             shift and go to state 193
    LTE             shift and go to state 194
    NE              shift and go to state 195
    COMPARE         shift and go to state 196


state 151

    (102) compexp -> compexp1 . sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

    sumexp                         shift and go to state 197
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 152

    (110) sumexp -> mulexp .
    (111) sumexp -> mulexp . PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> mulexp . MINUS saveOperator mulexp generateQuadSUM

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 110 (sumexp -> mulexp .)
    LT              reduce using rule 110 (sumexp -> mulexp .)
    GTE             reduce using rule 110 (sumexp -> mulexp .)
    LTE             reduce using rule 110 (sumexp -> mulexp .)
    NE              reduce using rule 110 (sumexp -> mulexp .)
    COMPARE         reduce using rule 110 (sumexp -> mulexp .)
    AND             reduce using rule 110 (sumexp -> mulexp .)
    OR              reduce using rule 110 (sumexp -> mulexp .)
    RPAREN          reduce using rule 110 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 110 (sumexp -> mulexp .)
    COMMA           reduce using rule 110 (sumexp -> mulexp .)
    SEMMICOLON      reduce using rule 110 (sumexp -> mulexp .)
    TO              reduce using rule 110 (sumexp -> mulexp .)
    ID              reduce using rule 110 (sumexp -> mulexp .)
    CTEI            reduce using rule 110 (sumexp -> mulexp .)
    CTEF            reduce using rule 110 (sumexp -> mulexp .)
    CTEC            reduce using rule 110 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 110 (sumexp -> mulexp .)
    LPAREN          reduce using rule 110 (sumexp -> mulexp .)
    MUL             reduce using rule 110 (sumexp -> mulexp .)
    DIV             reduce using rule 110 (sumexp -> mulexp .)
    PLUS            shift and go to state 198
    MINUS           shift and go to state 199

  ! PLUS            [ reduce using rule 110 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 110 (sumexp -> mulexp .) ]


state 153

    (114) mulexp -> pexp .
    (115) mulexp -> pexp . MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> pexp . DIV saveOperator pexp generateQuadMUL

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 114 (mulexp -> pexp .)
    MINUS           reduce using rule 114 (mulexp -> pexp .)
    GT              reduce using rule 114 (mulexp -> pexp .)
    LT              reduce using rule 114 (mulexp -> pexp .)
    GTE             reduce using rule 114 (mulexp -> pexp .)
    LTE             reduce using rule 114 (mulexp -> pexp .)
    NE              reduce using rule 114 (mulexp -> pexp .)
    COMPARE         reduce using rule 114 (mulexp -> pexp .)
    AND             reduce using rule 114 (mulexp -> pexp .)
    OR              reduce using rule 114 (mulexp -> pexp .)
    RPAREN          reduce using rule 114 (mulexp -> pexp .)
    RBRACKET        reduce using rule 114 (mulexp -> pexp .)
    COMMA           reduce using rule 114 (mulexp -> pexp .)
    SEMMICOLON      reduce using rule 114 (mulexp -> pexp .)
    TO              reduce using rule 114 (mulexp -> pexp .)
    ID              reduce using rule 114 (mulexp -> pexp .)
    CTEI            reduce using rule 114 (mulexp -> pexp .)
    CTEF            reduce using rule 114 (mulexp -> pexp .)
    CTEC            reduce using rule 114 (mulexp -> pexp .)
    CTESTRING       reduce using rule 114 (mulexp -> pexp .)
    LPAREN          reduce using rule 114 (mulexp -> pexp .)
    MUL             shift and go to state 200
    DIV             shift and go to state 201

  ! MUL             [ reduce using rule 114 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 114 (mulexp -> pexp .) ]


state 154

    (118) pexp -> ID . add_id2
    (125) pexp -> ID . arrStatement
    (127) functionCallExp -> ID . LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (30) add_id2 -> .
    (129) arrStatement -> . LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (130) arrStatement -> . empty
    (182) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for MUL resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for DIV resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for GT resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for LT resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for GTE resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for LTE resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for NE resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for COMPARE resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for AND resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for OR resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for COMMA resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for SEMMICOLON resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for TO resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for ID resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for CTEI resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for CTEF resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for CTEC resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for CTESTRING resolved using rule 30 (add_id2 -> .)
  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 204
    MUL             reduce using rule 30 (add_id2 -> .)
    DIV             reduce using rule 30 (add_id2 -> .)
    PLUS            reduce using rule 30 (add_id2 -> .)
    MINUS           reduce using rule 30 (add_id2 -> .)
    GT              reduce using rule 30 (add_id2 -> .)
    LT              reduce using rule 30 (add_id2 -> .)
    GTE             reduce using rule 30 (add_id2 -> .)
    LTE             reduce using rule 30 (add_id2 -> .)
    NE              reduce using rule 30 (add_id2 -> .)
    COMPARE         reduce using rule 30 (add_id2 -> .)
    AND             reduce using rule 30 (add_id2 -> .)
    OR              reduce using rule 30 (add_id2 -> .)
    RPAREN          reduce using rule 30 (add_id2 -> .)
    RBRACKET        reduce using rule 30 (add_id2 -> .)
    COMMA           reduce using rule 30 (add_id2 -> .)
    SEMMICOLON      reduce using rule 30 (add_id2 -> .)
    TO              reduce using rule 30 (add_id2 -> .)
    ID              reduce using rule 30 (add_id2 -> .)
    CTEI            reduce using rule 30 (add_id2 -> .)
    CTEF            reduce using rule 30 (add_id2 -> .)
    CTEC            reduce using rule 30 (add_id2 -> .)
    CTESTRING       reduce using rule 30 (add_id2 -> .)
    LBRACKET        shift and go to state 111

  ! LPAREN          [ reduce using rule 30 (add_id2 -> .) ]
  ! MUL             [ reduce using rule 182 (empty -> .) ]
  ! DIV             [ reduce using rule 182 (empty -> .) ]
  ! PLUS            [ reduce using rule 182 (empty -> .) ]
  ! MINUS           [ reduce using rule 182 (empty -> .) ]
  ! GT              [ reduce using rule 182 (empty -> .) ]
  ! LT              [ reduce using rule 182 (empty -> .) ]
  ! GTE             [ reduce using rule 182 (empty -> .) ]
  ! LTE             [ reduce using rule 182 (empty -> .) ]
  ! NE              [ reduce using rule 182 (empty -> .) ]
  ! COMPARE         [ reduce using rule 182 (empty -> .) ]
  ! AND             [ reduce using rule 182 (empty -> .) ]
  ! OR              [ reduce using rule 182 (empty -> .) ]
  ! RPAREN          [ reduce using rule 182 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 182 (empty -> .) ]
  ! COMMA           [ reduce using rule 182 (empty -> .) ]
  ! SEMMICOLON      [ reduce using rule 182 (empty -> .) ]
  ! TO              [ reduce using rule 182 (empty -> .) ]
  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    add_id2                        shift and go to state 202
    arrStatement                   shift and go to state 203
    empty                          shift and go to state 112

state 155

    (119) pexp -> CTEI . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    RBRACKET        reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMMICOLON      reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 205

state 156

    (120) pexp -> CTEF . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    RBRACKET        reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMMICOLON      reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 206

state 157

    (121) pexp -> CTEC . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    RBRACKET        reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMMICOLON      reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 207

state 158

    (122) pexp -> CTESTRING . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    RBRACKET        reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMMICOLON      reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 208

state 159

    (123) pexp -> functionCallExp .

    MUL             reduce using rule 123 (pexp -> functionCallExp .)
    DIV             reduce using rule 123 (pexp -> functionCallExp .)
    PLUS            reduce using rule 123 (pexp -> functionCallExp .)
    MINUS           reduce using rule 123 (pexp -> functionCallExp .)
    GT              reduce using rule 123 (pexp -> functionCallExp .)
    LT              reduce using rule 123 (pexp -> functionCallExp .)
    GTE             reduce using rule 123 (pexp -> functionCallExp .)
    LTE             reduce using rule 123 (pexp -> functionCallExp .)
    NE              reduce using rule 123 (pexp -> functionCallExp .)
    COMPARE         reduce using rule 123 (pexp -> functionCallExp .)
    AND             reduce using rule 123 (pexp -> functionCallExp .)
    OR              reduce using rule 123 (pexp -> functionCallExp .)
    RPAREN          reduce using rule 123 (pexp -> functionCallExp .)
    RBRACKET        reduce using rule 123 (pexp -> functionCallExp .)
    COMMA           reduce using rule 123 (pexp -> functionCallExp .)
    SEMMICOLON      reduce using rule 123 (pexp -> functionCallExp .)
    TO              reduce using rule 123 (pexp -> functionCallExp .)
    ID              reduce using rule 123 (pexp -> functionCallExp .)
    CTEI            reduce using rule 123 (pexp -> functionCallExp .)
    CTEF            reduce using rule 123 (pexp -> functionCallExp .)
    CTEC            reduce using rule 123 (pexp -> functionCallExp .)
    CTESTRING       reduce using rule 123 (pexp -> functionCallExp .)
    LPAREN          reduce using rule 123 (pexp -> functionCallExp .)


state 160

    (126) pexp -> empty .

    MUL             reduce using rule 126 (pexp -> empty .)
    DIV             reduce using rule 126 (pexp -> empty .)
    PLUS            reduce using rule 126 (pexp -> empty .)
    MINUS           reduce using rule 126 (pexp -> empty .)
    GT              reduce using rule 126 (pexp -> empty .)
    LT              reduce using rule 126 (pexp -> empty .)
    GTE             reduce using rule 126 (pexp -> empty .)
    LTE             reduce using rule 126 (pexp -> empty .)
    NE              reduce using rule 126 (pexp -> empty .)
    COMPARE         reduce using rule 126 (pexp -> empty .)
    AND             reduce using rule 126 (pexp -> empty .)
    OR              reduce using rule 126 (pexp -> empty .)
    RPAREN          reduce using rule 126 (pexp -> empty .)
    RBRACKET        reduce using rule 126 (pexp -> empty .)
    COMMA           reduce using rule 126 (pexp -> empty .)
    SEMMICOLON      reduce using rule 126 (pexp -> empty .)
    TO              reduce using rule 126 (pexp -> empty .)
    ID              reduce using rule 126 (pexp -> empty .)
    CTEI            reduce using rule 126 (pexp -> empty .)
    CTEF            reduce using rule 126 (pexp -> empty .)
    CTEC            reduce using rule 126 (pexp -> empty .)
    CTESTRING       reduce using rule 126 (pexp -> empty .)
    LPAREN          reduce using rule 126 (pexp -> empty .)


state 161

    (180) return -> RETURN LPAREN exp . generateQuadRETURN RPAREN
    (181) generateQuadRETURN -> .

    RPAREN          reduce using rule 181 (generateQuadRETURN -> .)

    generateQuadRETURN             shift and go to state 209

state 162

    (58) sort -> SORT sortOperator LPAREN . ID add_id2 verifyArray RPAREN generateQuadSORT

    ID              shift and go to state 210


state 163

    (77) plot -> PLOT plotOperator LPAREN . ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT

    ID              shift and go to state 211


state 164

    (162) functions2 -> ID saveFunction LPAREN parameters RPAREN . vars LCURLY setStartDirection statements RCURLY
    (136) vars -> . var
    (137) vars -> . empty
    (138) var -> . VARS var2
    (182) empty -> .

    VARS            shift and go to state 12
    LCURLY          reduce using rule 182 (empty -> .)

    vars                           shift and go to state 212
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 165

    (168) paramsAux -> INT saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 213


state 166

    (169) paramsAux -> FLOAT saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 214


state 167

    (170) paramsAux -> CHAR saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 215


state 168

    (160) functions1 -> ID saveFunction LPAREN parameters RPAREN . vars LCURLY setStartDirection statements RCURLY
    (136) vars -> . var
    (137) vars -> . empty
    (138) var -> . VARS var2
    (182) empty -> .

    VARS            shift and go to state 12
    LCURLY          reduce using rule 182 (empty -> .)

    vars                           shift and go to state 216
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 169

    (144) var1 -> ID createArr arr COMMA var1 addVar .

    SEMMICOLON      reduce using rule 144 (var1 -> ID createArr arr COMMA var1 addVar .)


state 170

    (152) arr -> LBRACKET CTEI setArraySize RBRACKET .

    COMMA           reduce using rule 152 (arr -> LBRACKET CTEI setArraySize RBRACKET .)
    SEMMICOLON      reduce using rule 152 (arr -> LBRACKET CTEI setArraySize RBRACKET .)


state 171

    (12) statements -> read statements SEMMICOLON statements .

    RCURLY          reduce using rule 12 (statements -> read statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 12 (statements -> read statements SEMMICOLON statements .)


state 172

    (13) statements -> write statements SEMMICOLON statements .

    RCURLY          reduce using rule 13 (statements -> write statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 13 (statements -> write statements SEMMICOLON statements .)


state 173

    (18) statements -> sort statements SEMMICOLON statements .

    RCURLY          reduce using rule 18 (statements -> sort statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 18 (statements -> sort statements SEMMICOLON statements .)


state 174

    (19) statements -> plot statements SEMMICOLON statements .

    RCURLY          reduce using rule 19 (statements -> plot statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 19 (statements -> plot statements SEMMICOLON statements .)


state 175

    (21) assign -> ID add_id2 EQUALS saveOperator . exp generateAssignQuad
    (23) assign -> ID add_id2 EQUALS saveOperator . functionCall generateAssignQuad
    (24) assign -> ID add_id2 EQUALS saveOperator . mean generateAssignQuad
    (25) assign -> ID add_id2 EQUALS saveOperator . find generateAssignQuad
    (26) assign -> ID add_id2 EQUALS saveOperator . mode generateAssignQuad
    (27) assign -> ID add_id2 EQUALS saveOperator . variance generateAssignQuad
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (65) mean -> . MEAN meanOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMEAN
    (66) mean -> . empty
    (62) find -> . FIND findOperator LPAREN ID add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND
    (69) mode -> . MODE modeOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMODE
    (70) mode -> . empty
    (73) variance -> . VARIANCE varianceOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadVARIANCE
    (74) variance -> . empty
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (182) empty -> .
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    ID              shift and go to state 217
    MEAN            shift and go to state 224
    FIND            shift and go to state 226
    MODE            shift and go to state 227
    VARIANCE        shift and go to state 228
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146

    exp                            shift and go to state 218
    functionCall                   shift and go to state 219
    mean                           shift and go to state 220
    find                           shift and go to state 221
    mode                           shift and go to state 222
    variance                       shift and go to state 223
    nexp                           shift and go to state 148
    empty                          shift and go to state 225
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159

state 176

    (22) assign -> ID arrStatement EQUALS saveOperator . exp generateAssignQuad
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

    exp                            shift and go to state 229
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 177

    (33) functionCall -> ID validateFunctionID functionERA LPAREN . expAux verifyParams RPAREN generateQuadGOSUB
    (38) expAux -> . exp generateQuadPARAM paramsCount
    (39) expAux -> . exp generateQuadPARAM COMMA paramsCount expAux
    (40) expAux -> . empty
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (182) empty -> .
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 182 (empty -> .)
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146

    expAux                         shift and go to state 230
    exp                            shift and go to state 231
    empty                          shift and go to state 232
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159

state 178

    (129) arrStatement -> LBRACKET checkArray exp . generateQuadVER RBRACKET getArrFinalAddress
    (133) generateQuadVER -> .

    RBRACKET        reduce using rule 133 (generateQuadVER -> .)

    generateQuadVER                shift and go to state 233

state 179

    (44) read -> READ operatorRead LPAREN paramReadAux . RPAREN

    RPAREN          shift and go to state 234


state 180

    (47) paramReadAux -> exp . generateQuadREAD
    (48) paramReadAux -> exp . generateQuadREAD COMMA operatorRead paramReadAux
    (50) generateQuadREAD -> .

    COMMA           reduce using rule 50 (generateQuadREAD -> .)
    RPAREN          reduce using rule 50 (generateQuadREAD -> .)

    generateQuadREAD               shift and go to state 235

state 181

    (51) write -> WRITE writeOperator LPAREN paramWrite . RPAREN

    RPAREN          shift and go to state 236


state 182

    (52) paramWrite -> paramWriteAux .

    RPAREN          reduce using rule 52 (paramWrite -> paramWriteAux .)


state 183

    (53) paramWrite -> empty .
    (126) pexp -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 53 (paramWrite -> empty .)
    RPAREN          reduce using rule 53 (paramWrite -> empty .)
    MUL             reduce using rule 126 (pexp -> empty .)
    DIV             reduce using rule 126 (pexp -> empty .)
    PLUS            reduce using rule 126 (pexp -> empty .)
    MINUS           reduce using rule 126 (pexp -> empty .)
    GT              reduce using rule 126 (pexp -> empty .)
    LT              reduce using rule 126 (pexp -> empty .)
    GTE             reduce using rule 126 (pexp -> empty .)
    LTE             reduce using rule 126 (pexp -> empty .)
    NE              reduce using rule 126 (pexp -> empty .)
    COMPARE         reduce using rule 126 (pexp -> empty .)
    AND             reduce using rule 126 (pexp -> empty .)
    OR              reduce using rule 126 (pexp -> empty .)
    COMMA           reduce using rule 126 (pexp -> empty .)

  ! RPAREN          [ reduce using rule 126 (pexp -> empty .) ]


state 184

    (54) paramWriteAux -> exp . generateQuadPRINT
    (55) paramWriteAux -> exp . generateQuadPRINT COMMA writeOperator paramWriteAux
    (57) generateQuadPRINT -> .

    COMMA           reduce using rule 57 (generateQuadPRINT -> .)
    RPAREN          reduce using rule 57 (generateQuadPRINT -> .)

    generateQuadPRINT              shift and go to state 237

state 185

    (83) for -> FOR forOP assign TO . CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    CTEI            shift and go to state 238


state 186

    (86) while -> WHILE whileOP LPAREN exp . RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    RPAREN          shift and go to state 239


state 187

    (124) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 240


state 188

    (89) if -> IF LPAREN exp RPAREN . generateQuadIF THEN LCURLY statements RCURLY else endIF
    (92) generateQuadIF -> .

    THEN            reduce using rule 92 (generateQuadIF -> .)

    generateQuadIF                 shift and go to state 241

state 189

    (95) exp -> nexp generateQuadOR .
    (96) exp -> nexp generateQuadOR . OR saveOperator nexp

    RPAREN          reduce using rule 95 (exp -> nexp generateQuadOR .)
    RBRACKET        reduce using rule 95 (exp -> nexp generateQuadOR .)
    COMMA           reduce using rule 95 (exp -> nexp generateQuadOR .)
    SEMMICOLON      reduce using rule 95 (exp -> nexp generateQuadOR .)
    TO              reduce using rule 95 (exp -> nexp generateQuadOR .)
    OR              shift and go to state 242


state 190

    (98) nexp -> compexp generateQuadAND .
    (99) nexp -> compexp generateQuadAND . AND saveOperator compexp

    OR              reduce using rule 98 (nexp -> compexp generateQuadAND .)
    RPAREN          reduce using rule 98 (nexp -> compexp generateQuadAND .)
    RBRACKET        reduce using rule 98 (nexp -> compexp generateQuadAND .)
    COMMA           reduce using rule 98 (nexp -> compexp generateQuadAND .)
    SEMMICOLON      reduce using rule 98 (nexp -> compexp generateQuadAND .)
    TO              reduce using rule 98 (nexp -> compexp generateQuadAND .)
    AND             shift and go to state 243


state 191

    (103) compexp1 -> sumexp GT . saveOperator sumexp generateQuadCOMPARE
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 244

state 192

    (104) compexp1 -> sumexp LT . saveOperator sumexp generateQuadCOMPARE
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 245

state 193

    (105) compexp1 -> sumexp GTE . saveOperator sumexp generateQuadCOMPARE
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 246

state 194

    (106) compexp1 -> sumexp LTE . saveOperator sumexp generateQuadCOMPARE
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 247

state 195

    (107) compexp1 -> sumexp NE . saveOperator sumexp generateQuadCOMPARE
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 248

state 196

    (108) compexp1 -> sumexp COMPARE . saveOperator sumexp generateQuadCOMPARE
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 249

state 197

    (102) compexp -> compexp1 sumexp .

    AND             reduce using rule 102 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 102 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 102 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 102 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 102 (compexp -> compexp1 sumexp .)
    SEMMICOLON      reduce using rule 102 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 102 (compexp -> compexp1 sumexp .)


state 198

    (111) sumexp -> mulexp PLUS . saveOperator mulexp generateQuadSUM
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    GT              reduce using rule 135 (saveOperator -> .)
    LT              reduce using rule 135 (saveOperator -> .)
    GTE             reduce using rule 135 (saveOperator -> .)
    LTE             reduce using rule 135 (saveOperator -> .)
    NE              reduce using rule 135 (saveOperator -> .)
    COMPARE         reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 250

state 199

    (112) sumexp -> mulexp MINUS . saveOperator mulexp generateQuadSUM
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    GT              reduce using rule 135 (saveOperator -> .)
    LT              reduce using rule 135 (saveOperator -> .)
    GTE             reduce using rule 135 (saveOperator -> .)
    LTE             reduce using rule 135 (saveOperator -> .)
    NE              reduce using rule 135 (saveOperator -> .)
    COMPARE         reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 251

state 200

    (115) mulexp -> pexp MUL . saveOperator pexp generateQuadMUL
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    GT              reduce using rule 135 (saveOperator -> .)
    LT              reduce using rule 135 (saveOperator -> .)
    GTE             reduce using rule 135 (saveOperator -> .)
    LTE             reduce using rule 135 (saveOperator -> .)
    NE              reduce using rule 135 (saveOperator -> .)
    COMPARE         reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 252

state 201

    (116) mulexp -> pexp DIV . saveOperator pexp generateQuadMUL
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    GT              reduce using rule 135 (saveOperator -> .)
    LT              reduce using rule 135 (saveOperator -> .)
    GTE             reduce using rule 135 (saveOperator -> .)
    LTE             reduce using rule 135 (saveOperator -> .)
    NE              reduce using rule 135 (saveOperator -> .)
    COMPARE         reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 253

state 202

    (118) pexp -> ID add_id2 .

    MUL             reduce using rule 118 (pexp -> ID add_id2 .)
    DIV             reduce using rule 118 (pexp -> ID add_id2 .)
    PLUS            reduce using rule 118 (pexp -> ID add_id2 .)
    MINUS           reduce using rule 118 (pexp -> ID add_id2 .)
    GT              reduce using rule 118 (pexp -> ID add_id2 .)
    LT              reduce using rule 118 (pexp -> ID add_id2 .)
    GTE             reduce using rule 118 (pexp -> ID add_id2 .)
    LTE             reduce using rule 118 (pexp -> ID add_id2 .)
    NE              reduce using rule 118 (pexp -> ID add_id2 .)
    COMPARE         reduce using rule 118 (pexp -> ID add_id2 .)
    AND             reduce using rule 118 (pexp -> ID add_id2 .)
    OR              reduce using rule 118 (pexp -> ID add_id2 .)
    RPAREN          reduce using rule 118 (pexp -> ID add_id2 .)
    RBRACKET        reduce using rule 118 (pexp -> ID add_id2 .)
    COMMA           reduce using rule 118 (pexp -> ID add_id2 .)
    SEMMICOLON      reduce using rule 118 (pexp -> ID add_id2 .)
    TO              reduce using rule 118 (pexp -> ID add_id2 .)
    ID              reduce using rule 118 (pexp -> ID add_id2 .)
    CTEI            reduce using rule 118 (pexp -> ID add_id2 .)
    CTEF            reduce using rule 118 (pexp -> ID add_id2 .)
    CTEC            reduce using rule 118 (pexp -> ID add_id2 .)
    CTESTRING       reduce using rule 118 (pexp -> ID add_id2 .)
    LPAREN          reduce using rule 118 (pexp -> ID add_id2 .)


state 203

    (125) pexp -> ID arrStatement .

    MUL             reduce using rule 125 (pexp -> ID arrStatement .)
    DIV             reduce using rule 125 (pexp -> ID arrStatement .)
    PLUS            reduce using rule 125 (pexp -> ID arrStatement .)
    MINUS           reduce using rule 125 (pexp -> ID arrStatement .)
    GT              reduce using rule 125 (pexp -> ID arrStatement .)
    LT              reduce using rule 125 (pexp -> ID arrStatement .)
    GTE             reduce using rule 125 (pexp -> ID arrStatement .)
    LTE             reduce using rule 125 (pexp -> ID arrStatement .)
    NE              reduce using rule 125 (pexp -> ID arrStatement .)
    COMPARE         reduce using rule 125 (pexp -> ID arrStatement .)
    AND             reduce using rule 125 (pexp -> ID arrStatement .)
    OR              reduce using rule 125 (pexp -> ID arrStatement .)
    RPAREN          reduce using rule 125 (pexp -> ID arrStatement .)
    RBRACKET        reduce using rule 125 (pexp -> ID arrStatement .)
    COMMA           reduce using rule 125 (pexp -> ID arrStatement .)
    SEMMICOLON      reduce using rule 125 (pexp -> ID arrStatement .)
    TO              reduce using rule 125 (pexp -> ID arrStatement .)
    ID              reduce using rule 125 (pexp -> ID arrStatement .)
    CTEI            reduce using rule 125 (pexp -> ID arrStatement .)
    CTEF            reduce using rule 125 (pexp -> ID arrStatement .)
    CTEC            reduce using rule 125 (pexp -> ID arrStatement .)
    CTESTRING       reduce using rule 125 (pexp -> ID arrStatement .)
    LPAREN          reduce using rule 125 (pexp -> ID arrStatement .)


state 204

    (127) functionCallExp -> ID LPAREN . validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (128) validateFunctionIDexp -> .

    ID              reduce using rule 128 (validateFunctionIDexp -> .)
    CTEI            reduce using rule 128 (validateFunctionIDexp -> .)
    CTEF            reduce using rule 128 (validateFunctionIDexp -> .)
    CTEC            reduce using rule 128 (validateFunctionIDexp -> .)
    CTESTRING       reduce using rule 128 (validateFunctionIDexp -> .)
    LPAREN          reduce using rule 128 (validateFunctionIDexp -> .)
    RPAREN          reduce using rule 128 (validateFunctionIDexp -> .)
    COMMA           reduce using rule 128 (validateFunctionIDexp -> .)
    OR              reduce using rule 128 (validateFunctionIDexp -> .)
    AND             reduce using rule 128 (validateFunctionIDexp -> .)
    GT              reduce using rule 128 (validateFunctionIDexp -> .)
    LT              reduce using rule 128 (validateFunctionIDexp -> .)
    GTE             reduce using rule 128 (validateFunctionIDexp -> .)
    LTE             reduce using rule 128 (validateFunctionIDexp -> .)
    NE              reduce using rule 128 (validateFunctionIDexp -> .)
    COMPARE         reduce using rule 128 (validateFunctionIDexp -> .)
    PLUS            reduce using rule 128 (validateFunctionIDexp -> .)
    MINUS           reduce using rule 128 (validateFunctionIDexp -> .)
    MUL             reduce using rule 128 (validateFunctionIDexp -> .)
    DIV             reduce using rule 128 (validateFunctionIDexp -> .)

    validateFunctionIDexp          shift and go to state 254

state 205

    (119) pexp -> CTEI saveCTE .

    MUL             reduce using rule 119 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 119 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 119 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 119 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 119 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 119 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 119 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 119 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 119 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 119 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 119 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 119 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 119 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 119 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 119 (pexp -> CTEI saveCTE .)
    SEMMICOLON      reduce using rule 119 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 119 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 119 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 119 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 119 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 119 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 119 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 119 (pexp -> CTEI saveCTE .)


state 206

    (120) pexp -> CTEF saveCTE .

    MUL             reduce using rule 120 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 120 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 120 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 120 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 120 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 120 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 120 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 120 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 120 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 120 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 120 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 120 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 120 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 120 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 120 (pexp -> CTEF saveCTE .)
    SEMMICOLON      reduce using rule 120 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 120 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 120 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 120 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 120 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 120 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 120 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 120 (pexp -> CTEF saveCTE .)


state 207

    (121) pexp -> CTEC saveCTE .

    MUL             reduce using rule 121 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 121 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 121 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 121 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 121 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 121 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 121 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 121 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 121 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 121 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 121 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 121 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 121 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 121 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 121 (pexp -> CTEC saveCTE .)
    SEMMICOLON      reduce using rule 121 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 121 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 121 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 121 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 121 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 121 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 121 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 121 (pexp -> CTEC saveCTE .)


state 208

    (122) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    SEMMICOLON      reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 122 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 122 (pexp -> CTESTRING saveCTE .)


state 209

    (180) return -> RETURN LPAREN exp generateQuadRETURN . RPAREN

    RPAREN          shift and go to state 255


state 210

    (58) sort -> SORT sortOperator LPAREN ID . add_id2 verifyArray RPAREN generateQuadSORT
    (30) add_id2 -> .

    RPAREN          reduce using rule 30 (add_id2 -> .)

    add_id2                        shift and go to state 256

state 211

    (77) plot -> PLOT plotOperator LPAREN ID . add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (30) add_id2 -> .

    COMMA           reduce using rule 30 (add_id2 -> .)

    add_id2                        shift and go to state 257

state 212

    (162) functions2 -> ID saveFunction LPAREN parameters RPAREN vars . LCURLY setStartDirection statements RCURLY

    LCURLY          shift and go to state 258


state 213

    (168) paramsAux -> INT saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 259


state 214

    (169) paramsAux -> FLOAT saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 260


state 215

    (170) paramsAux -> CHAR saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 261


state 216

    (160) functions1 -> ID saveFunction LPAREN parameters RPAREN vars . LCURLY setStartDirection statements RCURLY

    LCURLY          shift and go to state 262


state 217

    (33) functionCall -> ID . validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (118) pexp -> ID . add_id2
    (125) pexp -> ID . arrStatement
    (127) functionCallExp -> ID . LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (34) validateFunctionID -> .
    (30) add_id2 -> .
    (129) arrStatement -> . LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress
    (130) arrStatement -> . empty
    (182) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for MUL resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for DIV resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for PLUS resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for MINUS resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for GT resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for LT resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for GTE resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for LTE resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for NE resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for COMPARE resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for AND resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for OR resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for SEMMICOLON resolved using rule 30 (add_id2 -> .)
  ! reduce/reduce conflict for TO resolved using rule 30 (add_id2 -> .)
    LPAREN          shift and go to state 204
    MUL             reduce using rule 30 (add_id2 -> .)
    DIV             reduce using rule 30 (add_id2 -> .)
    PLUS            reduce using rule 30 (add_id2 -> .)
    MINUS           reduce using rule 30 (add_id2 -> .)
    GT              reduce using rule 30 (add_id2 -> .)
    LT              reduce using rule 30 (add_id2 -> .)
    GTE             reduce using rule 30 (add_id2 -> .)
    LTE             reduce using rule 30 (add_id2 -> .)
    NE              reduce using rule 30 (add_id2 -> .)
    COMPARE         reduce using rule 30 (add_id2 -> .)
    AND             reduce using rule 30 (add_id2 -> .)
    OR              reduce using rule 30 (add_id2 -> .)
    SEMMICOLON      reduce using rule 30 (add_id2 -> .)
    TO              reduce using rule 30 (add_id2 -> .)
    LBRACKET        shift and go to state 111

  ! LPAREN          [ reduce using rule 34 (validateFunctionID -> .) ]
  ! MUL             [ reduce using rule 182 (empty -> .) ]
  ! DIV             [ reduce using rule 182 (empty -> .) ]
  ! PLUS            [ reduce using rule 182 (empty -> .) ]
  ! MINUS           [ reduce using rule 182 (empty -> .) ]
  ! GT              [ reduce using rule 182 (empty -> .) ]
  ! LT              [ reduce using rule 182 (empty -> .) ]
  ! GTE             [ reduce using rule 182 (empty -> .) ]
  ! LTE             [ reduce using rule 182 (empty -> .) ]
  ! NE              [ reduce using rule 182 (empty -> .) ]
  ! COMPARE         [ reduce using rule 182 (empty -> .) ]
  ! AND             [ reduce using rule 182 (empty -> .) ]
  ! OR              [ reduce using rule 182 (empty -> .) ]
  ! SEMMICOLON      [ reduce using rule 182 (empty -> .) ]
  ! TO              [ reduce using rule 182 (empty -> .) ]

    validateFunctionID             shift and go to state 110
    add_id2                        shift and go to state 202
    arrStatement                   shift and go to state 203
    empty                          shift and go to state 112

state 218

    (21) assign -> ID add_id2 EQUALS saveOperator exp . generateAssignQuad
    (28) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 28 (generateAssignQuad -> .)
    TO              reduce using rule 28 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 263

state 219

    (23) assign -> ID add_id2 EQUALS saveOperator functionCall . generateAssignQuad
    (28) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 28 (generateAssignQuad -> .)
    TO              reduce using rule 28 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 264

state 220

    (24) assign -> ID add_id2 EQUALS saveOperator mean . generateAssignQuad
    (28) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 28 (generateAssignQuad -> .)
    TO              reduce using rule 28 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 265

state 221

    (25) assign -> ID add_id2 EQUALS saveOperator find . generateAssignQuad
    (28) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 28 (generateAssignQuad -> .)
    TO              reduce using rule 28 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 266

state 222

    (26) assign -> ID add_id2 EQUALS saveOperator mode . generateAssignQuad
    (28) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 28 (generateAssignQuad -> .)
    TO              reduce using rule 28 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 267

state 223

    (27) assign -> ID add_id2 EQUALS saveOperator variance . generateAssignQuad
    (28) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 28 (generateAssignQuad -> .)
    TO              reduce using rule 28 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 268

state 224

    (65) mean -> MEAN . meanOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMEAN
    (67) meanOperator -> .

    LPAREN          reduce using rule 67 (meanOperator -> .)

    meanOperator                   shift and go to state 269

state 225

    (66) mean -> empty .
    (70) mode -> empty .
    (74) variance -> empty .
    (126) pexp -> empty .

  ! reduce/reduce conflict for SEMMICOLON resolved using rule 66 (mean -> empty .)
  ! reduce/reduce conflict for TO resolved using rule 66 (mean -> empty .)
  ! reduce/reduce conflict for SEMMICOLON resolved using rule 66 (mean -> empty .)
  ! reduce/reduce conflict for TO resolved using rule 66 (mean -> empty .)
  ! reduce/reduce conflict for SEMMICOLON resolved using rule 66 (mean -> empty .)
  ! reduce/reduce conflict for TO resolved using rule 66 (mean -> empty .)
    SEMMICOLON      reduce using rule 66 (mean -> empty .)
    TO              reduce using rule 66 (mean -> empty .)
    MUL             reduce using rule 126 (pexp -> empty .)
    DIV             reduce using rule 126 (pexp -> empty .)
    PLUS            reduce using rule 126 (pexp -> empty .)
    MINUS           reduce using rule 126 (pexp -> empty .)
    GT              reduce using rule 126 (pexp -> empty .)
    LT              reduce using rule 126 (pexp -> empty .)
    GTE             reduce using rule 126 (pexp -> empty .)
    LTE             reduce using rule 126 (pexp -> empty .)
    NE              reduce using rule 126 (pexp -> empty .)
    COMPARE         reduce using rule 126 (pexp -> empty .)
    AND             reduce using rule 126 (pexp -> empty .)
    OR              reduce using rule 126 (pexp -> empty .)

  ! SEMMICOLON      [ reduce using rule 70 (mode -> empty .) ]
  ! TO              [ reduce using rule 70 (mode -> empty .) ]
  ! SEMMICOLON      [ reduce using rule 74 (variance -> empty .) ]
  ! TO              [ reduce using rule 74 (variance -> empty .) ]
  ! SEMMICOLON      [ reduce using rule 126 (pexp -> empty .) ]
  ! TO              [ reduce using rule 126 (pexp -> empty .) ]


state 226

    (62) find -> FIND . findOperator LPAREN ID add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND
    (63) findOperator -> .

    LPAREN          reduce using rule 63 (findOperator -> .)

    findOperator                   shift and go to state 270

state 227

    (69) mode -> MODE . modeOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMODE
    (71) modeOperator -> .

    LPAREN          reduce using rule 71 (modeOperator -> .)

    modeOperator                   shift and go to state 271

state 228

    (73) variance -> VARIANCE . varianceOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadVARIANCE
    (75) varianceOperator -> .

    LPAREN          reduce using rule 75 (varianceOperator -> .)

    varianceOperator               shift and go to state 272

state 229

    (22) assign -> ID arrStatement EQUALS saveOperator exp . generateAssignQuad
    (28) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 28 (generateAssignQuad -> .)
    TO              reduce using rule 28 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 273

state 230

    (33) functionCall -> ID validateFunctionID functionERA LPAREN expAux . verifyParams RPAREN generateQuadGOSUB
    (35) verifyParams -> .

    RPAREN          reduce using rule 35 (verifyParams -> .)

    verifyParams                   shift and go to state 274

state 231

    (38) expAux -> exp . generateQuadPARAM paramsCount
    (39) expAux -> exp . generateQuadPARAM COMMA paramsCount expAux
    (37) generateQuadPARAM -> .

    COMMA           reduce using rule 37 (generateQuadPARAM -> .)
    RPAREN          reduce using rule 37 (generateQuadPARAM -> .)

    generateQuadPARAM              shift and go to state 275

state 232

    (40) expAux -> empty .
    (126) pexp -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 40 (expAux -> empty .)
    RPAREN          reduce using rule 40 (expAux -> empty .)
    MUL             reduce using rule 126 (pexp -> empty .)
    DIV             reduce using rule 126 (pexp -> empty .)
    PLUS            reduce using rule 126 (pexp -> empty .)
    MINUS           reduce using rule 126 (pexp -> empty .)
    GT              reduce using rule 126 (pexp -> empty .)
    LT              reduce using rule 126 (pexp -> empty .)
    GTE             reduce using rule 126 (pexp -> empty .)
    LTE             reduce using rule 126 (pexp -> empty .)
    NE              reduce using rule 126 (pexp -> empty .)
    COMPARE         reduce using rule 126 (pexp -> empty .)
    AND             reduce using rule 126 (pexp -> empty .)
    OR              reduce using rule 126 (pexp -> empty .)
    COMMA           reduce using rule 126 (pexp -> empty .)

  ! RPAREN          [ reduce using rule 126 (pexp -> empty .) ]


state 233

    (129) arrStatement -> LBRACKET checkArray exp generateQuadVER . RBRACKET getArrFinalAddress

    RBRACKET        shift and go to state 276


state 234

    (44) read -> READ operatorRead LPAREN paramReadAux RPAREN .

    ID              reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    READ            reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    WRITE           reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    FOR             reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    WHILE           reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    IF              reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    RETURN          reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    SORT            reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    PLOT            reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    SEMMICOLON      reduce using rule 44 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)


state 235

    (47) paramReadAux -> exp generateQuadREAD .
    (48) paramReadAux -> exp generateQuadREAD . COMMA operatorRead paramReadAux

    RPAREN          reduce using rule 47 (paramReadAux -> exp generateQuadREAD .)
    COMMA           shift and go to state 277


state 236

    (51) write -> WRITE writeOperator LPAREN paramWrite RPAREN .

    ID              reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    READ            reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WRITE           reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    FOR             reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WHILE           reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    IF              reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    RETURN          reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    SORT            reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    PLOT            reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    SEMMICOLON      reduce using rule 51 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)


state 237

    (54) paramWriteAux -> exp generateQuadPRINT .
    (55) paramWriteAux -> exp generateQuadPRINT . COMMA writeOperator paramWriteAux

    RPAREN          reduce using rule 54 (paramWriteAux -> exp generateQuadPRINT .)
    COMMA           shift and go to state 278


state 238

    (83) for -> FOR forOP assign TO CTEI . DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 279


state 239

    (86) while -> WHILE whileOP LPAREN exp RPAREN . DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 280


state 240

    (124) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    SEMMICOLON      reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 124 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 124 (pexp -> LPAREN exp RPAREN .)


state 241

    (89) if -> IF LPAREN exp RPAREN generateQuadIF . THEN LCURLY statements RCURLY else endIF

    THEN            shift and go to state 281


state 242

    (96) exp -> nexp generateQuadOR OR . saveOperator nexp
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    AND             reduce using rule 135 (saveOperator -> .)
    GT              reduce using rule 135 (saveOperator -> .)
    LT              reduce using rule 135 (saveOperator -> .)
    GTE             reduce using rule 135 (saveOperator -> .)
    LTE             reduce using rule 135 (saveOperator -> .)
    NE              reduce using rule 135 (saveOperator -> .)
    COMPARE         reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 282

state 243

    (99) nexp -> compexp generateQuadAND AND . saveOperator compexp
    (135) saveOperator -> .

    ID              reduce using rule 135 (saveOperator -> .)
    CTEI            reduce using rule 135 (saveOperator -> .)
    CTEF            reduce using rule 135 (saveOperator -> .)
    CTEC            reduce using rule 135 (saveOperator -> .)
    CTESTRING       reduce using rule 135 (saveOperator -> .)
    LPAREN          reduce using rule 135 (saveOperator -> .)
    GT              reduce using rule 135 (saveOperator -> .)
    LT              reduce using rule 135 (saveOperator -> .)
    GTE             reduce using rule 135 (saveOperator -> .)
    LTE             reduce using rule 135 (saveOperator -> .)
    NE              reduce using rule 135 (saveOperator -> .)
    COMPARE         reduce using rule 135 (saveOperator -> .)
    PLUS            reduce using rule 135 (saveOperator -> .)
    MINUS           reduce using rule 135 (saveOperator -> .)
    MUL             reduce using rule 135 (saveOperator -> .)
    DIV             reduce using rule 135 (saveOperator -> .)
    OR              reduce using rule 135 (saveOperator -> .)
    RPAREN          reduce using rule 135 (saveOperator -> .)
    RBRACKET        reduce using rule 135 (saveOperator -> .)
    COMMA           reduce using rule 135 (saveOperator -> .)
    SEMMICOLON      reduce using rule 135 (saveOperator -> .)
    TO              reduce using rule 135 (saveOperator -> .)

    saveOperator                   shift and go to state 283

state 244

    (103) compexp1 -> sumexp GT saveOperator . sumexp generateQuadCOMPARE
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    sumexp                         shift and go to state 284
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 245

    (104) compexp1 -> sumexp LT saveOperator . sumexp generateQuadCOMPARE
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    sumexp                         shift and go to state 285
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 246

    (105) compexp1 -> sumexp GTE saveOperator . sumexp generateQuadCOMPARE
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    sumexp                         shift and go to state 286
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 247

    (106) compexp1 -> sumexp LTE saveOperator . sumexp generateQuadCOMPARE
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    sumexp                         shift and go to state 287
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 248

    (107) compexp1 -> sumexp NE saveOperator . sumexp generateQuadCOMPARE
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    sumexp                         shift and go to state 288
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 249

    (108) compexp1 -> sumexp COMPARE saveOperator . sumexp generateQuadCOMPARE
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    sumexp                         shift and go to state 289
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 250

    (111) sumexp -> mulexp PLUS saveOperator . mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    mulexp                         shift and go to state 290
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 251

    (112) sumexp -> mulexp MINUS saveOperator . mulexp generateQuadSUM
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    mulexp                         shift and go to state 291
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 252

    (115) mulexp -> pexp MUL saveOperator . pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    pexp                           shift and go to state 292
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 253

    (116) mulexp -> pexp DIV saveOperator . pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)

  ! ID              [ reduce using rule 182 (empty -> .) ]
  ! CTEI            [ reduce using rule 182 (empty -> .) ]
  ! CTEF            [ reduce using rule 182 (empty -> .) ]
  ! CTEC            [ reduce using rule 182 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 182 (empty -> .) ]
  ! LPAREN          [ reduce using rule 182 (empty -> .) ]

    pexp                           shift and go to state 293
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 254

    (127) functionCallExp -> ID LPAREN validateFunctionIDexp . functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (43) functionERA -> .

    ID              reduce using rule 43 (functionERA -> .)
    CTEI            reduce using rule 43 (functionERA -> .)
    CTEF            reduce using rule 43 (functionERA -> .)
    CTEC            reduce using rule 43 (functionERA -> .)
    CTESTRING       reduce using rule 43 (functionERA -> .)
    LPAREN          reduce using rule 43 (functionERA -> .)
    RPAREN          reduce using rule 43 (functionERA -> .)
    COMMA           reduce using rule 43 (functionERA -> .)
    OR              reduce using rule 43 (functionERA -> .)
    AND             reduce using rule 43 (functionERA -> .)
    GT              reduce using rule 43 (functionERA -> .)
    LT              reduce using rule 43 (functionERA -> .)
    GTE             reduce using rule 43 (functionERA -> .)
    LTE             reduce using rule 43 (functionERA -> .)
    NE              reduce using rule 43 (functionERA -> .)
    COMPARE         reduce using rule 43 (functionERA -> .)
    PLUS            reduce using rule 43 (functionERA -> .)
    MINUS           reduce using rule 43 (functionERA -> .)
    MUL             reduce using rule 43 (functionERA -> .)
    DIV             reduce using rule 43 (functionERA -> .)

    functionERA                    shift and go to state 294

state 255

    (180) return -> RETURN LPAREN exp generateQuadRETURN RPAREN .

    SEMMICOLON      reduce using rule 180 (return -> RETURN LPAREN exp generateQuadRETURN RPAREN .)


state 256

    (58) sort -> SORT sortOperator LPAREN ID add_id2 . verifyArray RPAREN generateQuadSORT
    (60) verifyArray -> .

    RPAREN          reduce using rule 60 (verifyArray -> .)

    verifyArray                    shift and go to state 295

state 257

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 . verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (60) verifyArray -> .

    COMMA           reduce using rule 60 (verifyArray -> .)

    verifyArray                    shift and go to state 296

state 258

    (162) functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY . setStartDirection statements RCURLY
    (164) setStartDirection -> .

    ID              reduce using rule 164 (setStartDirection -> .)
    READ            reduce using rule 164 (setStartDirection -> .)
    WRITE           reduce using rule 164 (setStartDirection -> .)
    FOR             reduce using rule 164 (setStartDirection -> .)
    WHILE           reduce using rule 164 (setStartDirection -> .)
    IF              reduce using rule 164 (setStartDirection -> .)
    RETURN          reduce using rule 164 (setStartDirection -> .)
    SORT            reduce using rule 164 (setStartDirection -> .)
    PLOT            reduce using rule 164 (setStartDirection -> .)
    RCURLY          reduce using rule 164 (setStartDirection -> .)

    setStartDirection              shift and go to state 297

state 259

    (168) paramsAux -> INT saveTypeVar TWOPOINTS ID . addParameter nextParam
    (165) addParameter -> .

    COMMA           reduce using rule 165 (addParameter -> .)
    RPAREN          reduce using rule 165 (addParameter -> .)

    addParameter                   shift and go to state 298

state 260

    (169) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID . addParameter nextParam
    (165) addParameter -> .

    COMMA           reduce using rule 165 (addParameter -> .)
    RPAREN          reduce using rule 165 (addParameter -> .)

    addParameter                   shift and go to state 299

state 261

    (170) paramsAux -> CHAR saveTypeVar TWOPOINTS ID . addParameter nextParam
    (165) addParameter -> .

    COMMA           reduce using rule 165 (addParameter -> .)
    RPAREN          reduce using rule 165 (addParameter -> .)

    addParameter                   shift and go to state 300

state 262

    (160) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY . setStartDirection statements RCURLY
    (164) setStartDirection -> .

    ID              reduce using rule 164 (setStartDirection -> .)
    READ            reduce using rule 164 (setStartDirection -> .)
    WRITE           reduce using rule 164 (setStartDirection -> .)
    FOR             reduce using rule 164 (setStartDirection -> .)
    WHILE           reduce using rule 164 (setStartDirection -> .)
    IF              reduce using rule 164 (setStartDirection -> .)
    RETURN          reduce using rule 164 (setStartDirection -> .)
    SORT            reduce using rule 164 (setStartDirection -> .)
    PLOT            reduce using rule 164 (setStartDirection -> .)
    RCURLY          reduce using rule 164 (setStartDirection -> .)

    setStartDirection              shift and go to state 301

state 263

    (21) assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 21 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 21 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)


state 264

    (23) assign -> ID add_id2 EQUALS saveOperator functionCall generateAssignQuad .

    SEMMICOLON      reduce using rule 23 (assign -> ID add_id2 EQUALS saveOperator functionCall generateAssignQuad .)
    TO              reduce using rule 23 (assign -> ID add_id2 EQUALS saveOperator functionCall generateAssignQuad .)


state 265

    (24) assign -> ID add_id2 EQUALS saveOperator mean generateAssignQuad .

    SEMMICOLON      reduce using rule 24 (assign -> ID add_id2 EQUALS saveOperator mean generateAssignQuad .)
    TO              reduce using rule 24 (assign -> ID add_id2 EQUALS saveOperator mean generateAssignQuad .)


state 266

    (25) assign -> ID add_id2 EQUALS saveOperator find generateAssignQuad .

    SEMMICOLON      reduce using rule 25 (assign -> ID add_id2 EQUALS saveOperator find generateAssignQuad .)
    TO              reduce using rule 25 (assign -> ID add_id2 EQUALS saveOperator find generateAssignQuad .)


state 267

    (26) assign -> ID add_id2 EQUALS saveOperator mode generateAssignQuad .

    SEMMICOLON      reduce using rule 26 (assign -> ID add_id2 EQUALS saveOperator mode generateAssignQuad .)
    TO              reduce using rule 26 (assign -> ID add_id2 EQUALS saveOperator mode generateAssignQuad .)


state 268

    (27) assign -> ID add_id2 EQUALS saveOperator variance generateAssignQuad .

    SEMMICOLON      reduce using rule 27 (assign -> ID add_id2 EQUALS saveOperator variance generateAssignQuad .)
    TO              reduce using rule 27 (assign -> ID add_id2 EQUALS saveOperator variance generateAssignQuad .)


state 269

    (65) mean -> MEAN meanOperator . LPAREN ID add_id2 verifyArray RPAREN generateQuadMEAN

    LPAREN          shift and go to state 302


state 270

    (62) find -> FIND findOperator . LPAREN ID add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND

    LPAREN          shift and go to state 303


state 271

    (69) mode -> MODE modeOperator . LPAREN ID add_id2 verifyArray RPAREN generateQuadMODE

    LPAREN          shift and go to state 304


state 272

    (73) variance -> VARIANCE varianceOperator . LPAREN ID add_id2 verifyArray RPAREN generateQuadVARIANCE

    LPAREN          shift and go to state 305


state 273

    (22) assign -> ID arrStatement EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 22 (assign -> ID arrStatement EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 22 (assign -> ID arrStatement EQUALS saveOperator exp generateAssignQuad .)


state 274

    (33) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams . RPAREN generateQuadGOSUB

    RPAREN          shift and go to state 306


state 275

    (38) expAux -> exp generateQuadPARAM . paramsCount
    (39) expAux -> exp generateQuadPARAM . COMMA paramsCount expAux
    (36) paramsCount -> .

    COMMA           shift and go to state 308
    RPAREN          reduce using rule 36 (paramsCount -> .)

    paramsCount                    shift and go to state 307

state 276

    (129) arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET . getArrFinalAddress
    (131) getArrFinalAddress -> .

    EQUALS          reduce using rule 131 (getArrFinalAddress -> .)
    MUL             reduce using rule 131 (getArrFinalAddress -> .)
    DIV             reduce using rule 131 (getArrFinalAddress -> .)
    PLUS            reduce using rule 131 (getArrFinalAddress -> .)
    MINUS           reduce using rule 131 (getArrFinalAddress -> .)
    GT              reduce using rule 131 (getArrFinalAddress -> .)
    LT              reduce using rule 131 (getArrFinalAddress -> .)
    GTE             reduce using rule 131 (getArrFinalAddress -> .)
    LTE             reduce using rule 131 (getArrFinalAddress -> .)
    NE              reduce using rule 131 (getArrFinalAddress -> .)
    COMPARE         reduce using rule 131 (getArrFinalAddress -> .)
    AND             reduce using rule 131 (getArrFinalAddress -> .)
    OR              reduce using rule 131 (getArrFinalAddress -> .)
    RPAREN          reduce using rule 131 (getArrFinalAddress -> .)
    RBRACKET        reduce using rule 131 (getArrFinalAddress -> .)
    COMMA           reduce using rule 131 (getArrFinalAddress -> .)
    SEMMICOLON      reduce using rule 131 (getArrFinalAddress -> .)
    TO              reduce using rule 131 (getArrFinalAddress -> .)
    ID              reduce using rule 131 (getArrFinalAddress -> .)
    CTEI            reduce using rule 131 (getArrFinalAddress -> .)
    CTEF            reduce using rule 131 (getArrFinalAddress -> .)
    CTEC            reduce using rule 131 (getArrFinalAddress -> .)
    CTESTRING       reduce using rule 131 (getArrFinalAddress -> .)
    LPAREN          reduce using rule 131 (getArrFinalAddress -> .)

    getArrFinalAddress             shift and go to state 309

state 277

    (48) paramReadAux -> exp generateQuadREAD COMMA . operatorRead paramReadAux
    (49) operatorRead -> .

    ID              reduce using rule 49 (operatorRead -> .)
    CTEI            reduce using rule 49 (operatorRead -> .)
    CTEF            reduce using rule 49 (operatorRead -> .)
    CTEC            reduce using rule 49 (operatorRead -> .)
    CTESTRING       reduce using rule 49 (operatorRead -> .)
    LPAREN          reduce using rule 49 (operatorRead -> .)
    COMMA           reduce using rule 49 (operatorRead -> .)
    OR              reduce using rule 49 (operatorRead -> .)
    AND             reduce using rule 49 (operatorRead -> .)
    GT              reduce using rule 49 (operatorRead -> .)
    LT              reduce using rule 49 (operatorRead -> .)
    GTE             reduce using rule 49 (operatorRead -> .)
    LTE             reduce using rule 49 (operatorRead -> .)
    NE              reduce using rule 49 (operatorRead -> .)
    COMPARE         reduce using rule 49 (operatorRead -> .)
    PLUS            reduce using rule 49 (operatorRead -> .)
    MINUS           reduce using rule 49 (operatorRead -> .)
    MUL             reduce using rule 49 (operatorRead -> .)
    DIV             reduce using rule 49 (operatorRead -> .)
    RPAREN          reduce using rule 49 (operatorRead -> .)

    operatorRead                   shift and go to state 310

state 278

    (55) paramWriteAux -> exp generateQuadPRINT COMMA . writeOperator paramWriteAux
    (56) writeOperator -> .

    ID              reduce using rule 56 (writeOperator -> .)
    CTEI            reduce using rule 56 (writeOperator -> .)
    CTEF            reduce using rule 56 (writeOperator -> .)
    CTEC            reduce using rule 56 (writeOperator -> .)
    CTESTRING       reduce using rule 56 (writeOperator -> .)
    LPAREN          reduce using rule 56 (writeOperator -> .)
    COMMA           reduce using rule 56 (writeOperator -> .)
    OR              reduce using rule 56 (writeOperator -> .)
    AND             reduce using rule 56 (writeOperator -> .)
    GT              reduce using rule 56 (writeOperator -> .)
    LT              reduce using rule 56 (writeOperator -> .)
    GTE             reduce using rule 56 (writeOperator -> .)
    LTE             reduce using rule 56 (writeOperator -> .)
    NE              reduce using rule 56 (writeOperator -> .)
    COMPARE         reduce using rule 56 (writeOperator -> .)
    PLUS            reduce using rule 56 (writeOperator -> .)
    MINUS           reduce using rule 56 (writeOperator -> .)
    MUL             reduce using rule 56 (writeOperator -> .)
    DIV             reduce using rule 56 (writeOperator -> .)
    RPAREN          reduce using rule 56 (writeOperator -> .)

    writeOperator                  shift and go to state 311

state 279

    (83) for -> FOR forOP assign TO CTEI DO . generateQuadFOR LCURLY statements RCURLY LoopEnd
    (85) generateQuadFOR -> .

    LCURLY          reduce using rule 85 (generateQuadFOR -> .)

    generateQuadFOR                shift and go to state 312

state 280

    (86) while -> WHILE whileOP LPAREN exp RPAREN DO . generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (88) generateQuadWHILE -> .

    LCURLY          reduce using rule 88 (generateQuadWHILE -> .)

    generateQuadWHILE              shift and go to state 313

state 281

    (89) if -> IF LPAREN exp RPAREN generateQuadIF THEN . LCURLY statements RCURLY else endIF

    LCURLY          shift and go to state 314


state 282

    (96) exp -> nexp generateQuadOR OR saveOperator . nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

    nexp                           shift and go to state 315
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 283

    (99) nexp -> compexp generateQuadAND AND saveOperator . compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)
    RBRACKET        reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)
    TO              reduce using rule 182 (empty -> .)

    compexp                        shift and go to state 316
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 284

    (103) compexp1 -> sumexp GT saveOperator sumexp . generateQuadCOMPARE
    (109) generateQuadCOMPARE -> .

    ID              reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 109 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 109 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 109 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 109 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 109 (generateQuadCOMPARE -> .)
    AND             reduce using rule 109 (generateQuadCOMPARE -> .)
    OR              reduce using rule 109 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 109 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 109 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 109 (generateQuadCOMPARE -> .)
    TO              reduce using rule 109 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 317

state 285

    (104) compexp1 -> sumexp LT saveOperator sumexp . generateQuadCOMPARE
    (109) generateQuadCOMPARE -> .

    ID              reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 109 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 109 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 109 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 109 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 109 (generateQuadCOMPARE -> .)
    AND             reduce using rule 109 (generateQuadCOMPARE -> .)
    OR              reduce using rule 109 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 109 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 109 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 109 (generateQuadCOMPARE -> .)
    TO              reduce using rule 109 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 318

state 286

    (105) compexp1 -> sumexp GTE saveOperator sumexp . generateQuadCOMPARE
    (109) generateQuadCOMPARE -> .

    ID              reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 109 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 109 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 109 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 109 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 109 (generateQuadCOMPARE -> .)
    AND             reduce using rule 109 (generateQuadCOMPARE -> .)
    OR              reduce using rule 109 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 109 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 109 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 109 (generateQuadCOMPARE -> .)
    TO              reduce using rule 109 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 319

state 287

    (106) compexp1 -> sumexp LTE saveOperator sumexp . generateQuadCOMPARE
    (109) generateQuadCOMPARE -> .

    ID              reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 109 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 109 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 109 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 109 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 109 (generateQuadCOMPARE -> .)
    AND             reduce using rule 109 (generateQuadCOMPARE -> .)
    OR              reduce using rule 109 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 109 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 109 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 109 (generateQuadCOMPARE -> .)
    TO              reduce using rule 109 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 320

state 288

    (107) compexp1 -> sumexp NE saveOperator sumexp . generateQuadCOMPARE
    (109) generateQuadCOMPARE -> .

    ID              reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 109 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 109 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 109 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 109 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 109 (generateQuadCOMPARE -> .)
    AND             reduce using rule 109 (generateQuadCOMPARE -> .)
    OR              reduce using rule 109 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 109 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 109 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 109 (generateQuadCOMPARE -> .)
    TO              reduce using rule 109 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 321

state 289

    (108) compexp1 -> sumexp COMPARE saveOperator sumexp . generateQuadCOMPARE
    (109) generateQuadCOMPARE -> .

    ID              reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 109 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 109 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 109 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 109 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 109 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 109 (generateQuadCOMPARE -> .)
    AND             reduce using rule 109 (generateQuadCOMPARE -> .)
    OR              reduce using rule 109 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 109 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 109 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 109 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 109 (generateQuadCOMPARE -> .)
    TO              reduce using rule 109 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 322

state 290

    (111) sumexp -> mulexp PLUS saveOperator mulexp . generateQuadSUM
    (113) generateQuadSUM -> .

    GT              reduce using rule 113 (generateQuadSUM -> .)
    LT              reduce using rule 113 (generateQuadSUM -> .)
    GTE             reduce using rule 113 (generateQuadSUM -> .)
    LTE             reduce using rule 113 (generateQuadSUM -> .)
    NE              reduce using rule 113 (generateQuadSUM -> .)
    COMPARE         reduce using rule 113 (generateQuadSUM -> .)
    AND             reduce using rule 113 (generateQuadSUM -> .)
    OR              reduce using rule 113 (generateQuadSUM -> .)
    RPAREN          reduce using rule 113 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 113 (generateQuadSUM -> .)
    COMMA           reduce using rule 113 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 113 (generateQuadSUM -> .)
    TO              reduce using rule 113 (generateQuadSUM -> .)
    ID              reduce using rule 113 (generateQuadSUM -> .)
    CTEI            reduce using rule 113 (generateQuadSUM -> .)
    CTEF            reduce using rule 113 (generateQuadSUM -> .)
    CTEC            reduce using rule 113 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 113 (generateQuadSUM -> .)
    LPAREN          reduce using rule 113 (generateQuadSUM -> .)
    PLUS            reduce using rule 113 (generateQuadSUM -> .)
    MINUS           reduce using rule 113 (generateQuadSUM -> .)
    MUL             reduce using rule 113 (generateQuadSUM -> .)
    DIV             reduce using rule 113 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 323

state 291

    (112) sumexp -> mulexp MINUS saveOperator mulexp . generateQuadSUM
    (113) generateQuadSUM -> .

    GT              reduce using rule 113 (generateQuadSUM -> .)
    LT              reduce using rule 113 (generateQuadSUM -> .)
    GTE             reduce using rule 113 (generateQuadSUM -> .)
    LTE             reduce using rule 113 (generateQuadSUM -> .)
    NE              reduce using rule 113 (generateQuadSUM -> .)
    COMPARE         reduce using rule 113 (generateQuadSUM -> .)
    AND             reduce using rule 113 (generateQuadSUM -> .)
    OR              reduce using rule 113 (generateQuadSUM -> .)
    RPAREN          reduce using rule 113 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 113 (generateQuadSUM -> .)
    COMMA           reduce using rule 113 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 113 (generateQuadSUM -> .)
    TO              reduce using rule 113 (generateQuadSUM -> .)
    ID              reduce using rule 113 (generateQuadSUM -> .)
    CTEI            reduce using rule 113 (generateQuadSUM -> .)
    CTEF            reduce using rule 113 (generateQuadSUM -> .)
    CTEC            reduce using rule 113 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 113 (generateQuadSUM -> .)
    LPAREN          reduce using rule 113 (generateQuadSUM -> .)
    PLUS            reduce using rule 113 (generateQuadSUM -> .)
    MINUS           reduce using rule 113 (generateQuadSUM -> .)
    MUL             reduce using rule 113 (generateQuadSUM -> .)
    DIV             reduce using rule 113 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 324

state 292

    (115) mulexp -> pexp MUL saveOperator pexp . generateQuadMUL
    (117) generateQuadMUL -> .

    PLUS            reduce using rule 117 (generateQuadMUL -> .)
    MINUS           reduce using rule 117 (generateQuadMUL -> .)
    GT              reduce using rule 117 (generateQuadMUL -> .)
    LT              reduce using rule 117 (generateQuadMUL -> .)
    GTE             reduce using rule 117 (generateQuadMUL -> .)
    LTE             reduce using rule 117 (generateQuadMUL -> .)
    NE              reduce using rule 117 (generateQuadMUL -> .)
    COMPARE         reduce using rule 117 (generateQuadMUL -> .)
    AND             reduce using rule 117 (generateQuadMUL -> .)
    OR              reduce using rule 117 (generateQuadMUL -> .)
    RPAREN          reduce using rule 117 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 117 (generateQuadMUL -> .)
    COMMA           reduce using rule 117 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 117 (generateQuadMUL -> .)
    TO              reduce using rule 117 (generateQuadMUL -> .)
    ID              reduce using rule 117 (generateQuadMUL -> .)
    CTEI            reduce using rule 117 (generateQuadMUL -> .)
    CTEF            reduce using rule 117 (generateQuadMUL -> .)
    CTEC            reduce using rule 117 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 117 (generateQuadMUL -> .)
    LPAREN          reduce using rule 117 (generateQuadMUL -> .)
    MUL             reduce using rule 117 (generateQuadMUL -> .)
    DIV             reduce using rule 117 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 325

state 293

    (116) mulexp -> pexp DIV saveOperator pexp . generateQuadMUL
    (117) generateQuadMUL -> .

    PLUS            reduce using rule 117 (generateQuadMUL -> .)
    MINUS           reduce using rule 117 (generateQuadMUL -> .)
    GT              reduce using rule 117 (generateQuadMUL -> .)
    LT              reduce using rule 117 (generateQuadMUL -> .)
    GTE             reduce using rule 117 (generateQuadMUL -> .)
    LTE             reduce using rule 117 (generateQuadMUL -> .)
    NE              reduce using rule 117 (generateQuadMUL -> .)
    COMPARE         reduce using rule 117 (generateQuadMUL -> .)
    AND             reduce using rule 117 (generateQuadMUL -> .)
    OR              reduce using rule 117 (generateQuadMUL -> .)
    RPAREN          reduce using rule 117 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 117 (generateQuadMUL -> .)
    COMMA           reduce using rule 117 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 117 (generateQuadMUL -> .)
    TO              reduce using rule 117 (generateQuadMUL -> .)
    ID              reduce using rule 117 (generateQuadMUL -> .)
    CTEI            reduce using rule 117 (generateQuadMUL -> .)
    CTEF            reduce using rule 117 (generateQuadMUL -> .)
    CTEC            reduce using rule 117 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 117 (generateQuadMUL -> .)
    LPAREN          reduce using rule 117 (generateQuadMUL -> .)
    MUL             reduce using rule 117 (generateQuadMUL -> .)
    DIV             reduce using rule 117 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 326

state 294

    (127) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA . expAux verifyParams RPAREN generateQuadGOSUB
    (38) expAux -> . exp generateQuadPARAM paramsCount
    (39) expAux -> . exp generateQuadPARAM COMMA paramsCount expAux
    (40) expAux -> . empty
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (182) empty -> .
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 182 (empty -> .)
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146

    expAux                         shift and go to state 327
    exp                            shift and go to state 231
    empty                          shift and go to state 232
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159

state 295

    (58) sort -> SORT sortOperator LPAREN ID add_id2 verifyArray . RPAREN generateQuadSORT

    RPAREN          shift and go to state 328


state 296

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray . saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (79) saveIDaux -> .

    COMMA           reduce using rule 79 (saveIDaux -> .)

    saveIDaux                      shift and go to state 329

state 297

    (162) functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)

    statements                     shift and go to state 330
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 298

    (168) paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter . nextParam
    (171) nextParam -> . COMMA paramsAux
    (172) nextParam -> . empty
    (182) empty -> .

    COMMA           shift and go to state 332
    RPAREN          reduce using rule 182 (empty -> .)

    nextParam                      shift and go to state 331
    empty                          shift and go to state 333

state 299

    (169) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter . nextParam
    (171) nextParam -> . COMMA paramsAux
    (172) nextParam -> . empty
    (182) empty -> .

    COMMA           shift and go to state 332
    RPAREN          reduce using rule 182 (empty -> .)

    nextParam                      shift and go to state 334
    empty                          shift and go to state 333

state 300

    (170) paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter . nextParam
    (171) nextParam -> . COMMA paramsAux
    (172) nextParam -> . empty
    (182) empty -> .

    COMMA           shift and go to state 332
    RPAREN          reduce using rule 182 (empty -> .)

    nextParam                      shift and go to state 335
    empty                          shift and go to state 333

state 301

    (160) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)

    statements                     shift and go to state 336
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 302

    (65) mean -> MEAN meanOperator LPAREN . ID add_id2 verifyArray RPAREN generateQuadMEAN

    ID              shift and go to state 337


state 303

    (62) find -> FIND findOperator LPAREN . ID add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND

    ID              shift and go to state 338


state 304

    (69) mode -> MODE modeOperator LPAREN . ID add_id2 verifyArray RPAREN generateQuadMODE

    ID              shift and go to state 339


state 305

    (73) variance -> VARIANCE varianceOperator LPAREN . ID add_id2 verifyArray RPAREN generateQuadVARIANCE

    ID              shift and go to state 340


state 306

    (33) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN . generateQuadGOSUB
    (41) generateQuadGOSUB -> .

    SEMMICOLON      reduce using rule 41 (generateQuadGOSUB -> .)
    TO              reduce using rule 41 (generateQuadGOSUB -> .)

    generateQuadGOSUB              shift and go to state 341

state 307

    (38) expAux -> exp generateQuadPARAM paramsCount .

    RPAREN          reduce using rule 38 (expAux -> exp generateQuadPARAM paramsCount .)


state 308

    (39) expAux -> exp generateQuadPARAM COMMA . paramsCount expAux
    (36) paramsCount -> .

    ID              reduce using rule 36 (paramsCount -> .)
    CTEI            reduce using rule 36 (paramsCount -> .)
    CTEF            reduce using rule 36 (paramsCount -> .)
    CTEC            reduce using rule 36 (paramsCount -> .)
    CTESTRING       reduce using rule 36 (paramsCount -> .)
    LPAREN          reduce using rule 36 (paramsCount -> .)
    COMMA           reduce using rule 36 (paramsCount -> .)
    OR              reduce using rule 36 (paramsCount -> .)
    AND             reduce using rule 36 (paramsCount -> .)
    GT              reduce using rule 36 (paramsCount -> .)
    LT              reduce using rule 36 (paramsCount -> .)
    GTE             reduce using rule 36 (paramsCount -> .)
    LTE             reduce using rule 36 (paramsCount -> .)
    NE              reduce using rule 36 (paramsCount -> .)
    COMPARE         reduce using rule 36 (paramsCount -> .)
    PLUS            reduce using rule 36 (paramsCount -> .)
    MINUS           reduce using rule 36 (paramsCount -> .)
    MUL             reduce using rule 36 (paramsCount -> .)
    DIV             reduce using rule 36 (paramsCount -> .)
    RPAREN          reduce using rule 36 (paramsCount -> .)

    paramsCount                    shift and go to state 342

state 309

    (129) arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .

    EQUALS          reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    MUL             reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    DIV             reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    PLUS            reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    MINUS           reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    GT              reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    LT              reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    GTE             reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    LTE             reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    NE              reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    COMPARE         reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    AND             reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    OR              reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    RPAREN          reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    RBRACKET        reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    COMMA           reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    SEMMICOLON      reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    TO              reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    ID              reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    CTEI            reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    CTEF            reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    CTEC            reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    CTESTRING       reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)
    LPAREN          reduce using rule 129 (arrStatement -> LBRACKET checkArray exp generateQuadVER RBRACKET getArrFinalAddress .)


state 310

    (48) paramReadAux -> exp generateQuadREAD COMMA operatorRead . paramReadAux
    (47) paramReadAux -> . exp generateQuadREAD
    (48) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)

    exp                            shift and go to state 180
    paramReadAux                   shift and go to state 343
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 311

    (55) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator . paramWriteAux
    (54) paramWriteAux -> . exp generateQuadPRINT
    (55) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB
    (182) empty -> .

    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    RPAREN          reduce using rule 182 (empty -> .)

    exp                            shift and go to state 184
    paramWriteAux                  shift and go to state 344
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159
    empty                          shift and go to state 160

state 312

    (83) for -> FOR forOP assign TO CTEI DO generateQuadFOR . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 345


state 313

    (86) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 346


state 314

    (89) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY . statements RCURLY else endIF
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)

    statements                     shift and go to state 347
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 315

    (96) exp -> nexp generateQuadOR OR saveOperator nexp .

    RPAREN          reduce using rule 96 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    RBRACKET        reduce using rule 96 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    COMMA           reduce using rule 96 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    SEMMICOLON      reduce using rule 96 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    TO              reduce using rule 96 (exp -> nexp generateQuadOR OR saveOperator nexp .)


state 316

    (99) nexp -> compexp generateQuadAND AND saveOperator compexp .

    OR              reduce using rule 99 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RPAREN          reduce using rule 99 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RBRACKET        reduce using rule 99 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    COMMA           reduce using rule 99 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    SEMMICOLON      reduce using rule 99 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    TO              reduce using rule 99 (nexp -> compexp generateQuadAND AND saveOperator compexp .)


state 317

    (103) compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 103 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)


state 318

    (104) compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 104 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)


state 319

    (105) compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 105 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)


state 320

    (106) compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 106 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)


state 321

    (107) compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 107 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)


state 322

    (108) compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 108 (compexp1 -> sumexp COMPARE saveOperator sumexp generateQuadCOMPARE .)


state 323

    (111) sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    COMPARE         reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    PLUS            reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    MINUS           reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    MUL             reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    DIV             reduce using rule 111 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)


state 324

    (112) sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    COMPARE         reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    PLUS            reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    MINUS           reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    MUL             reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    DIV             reduce using rule 112 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)


state 325

    (115) mulexp -> pexp MUL saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    COMPARE         reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MUL             reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    DIV             reduce using rule 115 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)


state 326

    (116) mulexp -> pexp DIV saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    COMPARE         reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MUL             reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    DIV             reduce using rule 116 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)


state 327

    (127) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux . verifyParams RPAREN generateQuadGOSUB
    (35) verifyParams -> .

    RPAREN          reduce using rule 35 (verifyParams -> .)

    verifyParams                   shift and go to state 348

state 328

    (58) sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN . generateQuadSORT
    (61) generateQuadSORT -> .

    ID              reduce using rule 61 (generateQuadSORT -> .)
    READ            reduce using rule 61 (generateQuadSORT -> .)
    WRITE           reduce using rule 61 (generateQuadSORT -> .)
    FOR             reduce using rule 61 (generateQuadSORT -> .)
    WHILE           reduce using rule 61 (generateQuadSORT -> .)
    IF              reduce using rule 61 (generateQuadSORT -> .)
    RETURN          reduce using rule 61 (generateQuadSORT -> .)
    SORT            reduce using rule 61 (generateQuadSORT -> .)
    PLOT            reduce using rule 61 (generateQuadSORT -> .)
    SEMMICOLON      reduce using rule 61 (generateQuadSORT -> .)

    generateQuadSORT               shift and go to state 349

state 329

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux . COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT

    COMMA           shift and go to state 350


state 330

    (162) functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements . RCURLY

    RCURLY          shift and go to state 351


state 331

    (168) paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 168 (paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 332

    (171) nextParam -> COMMA . paramsAux
    (168) paramsAux -> . INT saveTypeVar TWOPOINTS ID addParameter nextParam
    (169) paramsAux -> . FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
    (170) paramsAux -> . CHAR saveTypeVar TWOPOINTS ID addParameter nextParam

    INT             shift and go to state 124
    FLOAT           shift and go to state 125
    CHAR            shift and go to state 126

    paramsAux                      shift and go to state 352

state 333

    (172) nextParam -> empty .

    RPAREN          reduce using rule 172 (nextParam -> empty .)


state 334

    (169) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 169 (paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 335

    (170) paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 170 (paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 336

    (160) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements . RCURLY

    RCURLY          shift and go to state 353


state 337

    (65) mean -> MEAN meanOperator LPAREN ID . add_id2 verifyArray RPAREN generateQuadMEAN
    (30) add_id2 -> .

    RPAREN          reduce using rule 30 (add_id2 -> .)

    add_id2                        shift and go to state 354

state 338

    (62) find -> FIND findOperator LPAREN ID . add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND
    (30) add_id2 -> .

    COMMA           reduce using rule 30 (add_id2 -> .)

    add_id2                        shift and go to state 355

state 339

    (69) mode -> MODE modeOperator LPAREN ID . add_id2 verifyArray RPAREN generateQuadMODE
    (30) add_id2 -> .

    RPAREN          reduce using rule 30 (add_id2 -> .)

    add_id2                        shift and go to state 356

state 340

    (73) variance -> VARIANCE varianceOperator LPAREN ID . add_id2 verifyArray RPAREN generateQuadVARIANCE
    (30) add_id2 -> .

    RPAREN          reduce using rule 30 (add_id2 -> .)

    add_id2                        shift and go to state 357

state 341

    (33) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .

    SEMMICOLON      reduce using rule 33 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    TO              reduce using rule 33 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)


state 342

    (39) expAux -> exp generateQuadPARAM COMMA paramsCount . expAux
    (38) expAux -> . exp generateQuadPARAM paramsCount
    (39) expAux -> . exp generateQuadPARAM COMMA paramsCount expAux
    (40) expAux -> . empty
    (95) exp -> . nexp generateQuadOR
    (96) exp -> . nexp generateQuadOR OR saveOperator nexp
    (182) empty -> .
    (98) nexp -> . compexp generateQuadAND
    (99) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (101) compexp -> . sumexp
    (102) compexp -> . compexp1 sumexp
    (110) sumexp -> . mulexp
    (111) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (112) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (103) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (104) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (105) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (106) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (107) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (108) compexp1 -> . sumexp COMPARE saveOperator sumexp generateQuadCOMPARE
    (114) mulexp -> . pexp
    (115) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (116) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (118) pexp -> . ID add_id2
    (119) pexp -> . CTEI saveCTE
    (120) pexp -> . CTEF saveCTE
    (121) pexp -> . CTEC saveCTE
    (122) pexp -> . CTESTRING saveCTE
    (123) pexp -> . functionCallExp
    (124) pexp -> . LPAREN exp RPAREN
    (125) pexp -> . ID arrStatement
    (126) pexp -> . empty
    (127) functionCallExp -> . ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 182 (empty -> .)
    MUL             reduce using rule 182 (empty -> .)
    DIV             reduce using rule 182 (empty -> .)
    PLUS            reduce using rule 182 (empty -> .)
    MINUS           reduce using rule 182 (empty -> .)
    GT              reduce using rule 182 (empty -> .)
    LT              reduce using rule 182 (empty -> .)
    GTE             reduce using rule 182 (empty -> .)
    LTE             reduce using rule 182 (empty -> .)
    NE              reduce using rule 182 (empty -> .)
    COMPARE         reduce using rule 182 (empty -> .)
    AND             reduce using rule 182 (empty -> .)
    OR              reduce using rule 182 (empty -> .)
    COMMA           reduce using rule 182 (empty -> .)
    ID              shift and go to state 154
    CTEI            shift and go to state 155
    CTEF            shift and go to state 156
    CTEC            shift and go to state 157
    CTESTRING       shift and go to state 158
    LPAREN          shift and go to state 146

    exp                            shift and go to state 231
    expAux                         shift and go to state 358
    empty                          shift and go to state 232
    nexp                           shift and go to state 148
    compexp                        shift and go to state 149
    sumexp                         shift and go to state 150
    compexp1                       shift and go to state 151
    mulexp                         shift and go to state 152
    pexp                           shift and go to state 153
    functionCallExp                shift and go to state 159

state 343

    (48) paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .

    RPAREN          reduce using rule 48 (paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .)


state 344

    (55) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .

    RPAREN          reduce using rule 55 (paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .)


state 345

    (83) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY . statements RCURLY LoopEnd
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)

    assign                         shift and go to state 68
    statements                     shift and go to state 359
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 346

    (86) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY . statements RCURLY LoopEnd
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)

    statements                     shift and go to state 360
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 347

    (89) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements . RCURLY else endIF

    RCURLY          shift and go to state 361


state 348

    (127) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams . RPAREN generateQuadGOSUB

    RPAREN          shift and go to state 362


state 349

    (58) sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .

    ID              reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    READ            reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    WRITE           reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    FOR             reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    WHILE           reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    IF              reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    RETURN          reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    SORT            reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    PLOT            reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)
    SEMMICOLON      reduce using rule 58 (sort -> SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT .)


state 350

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA . ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT

    ID              shift and go to state 363


state 351

    (162) functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .

    FUNCTION        reduce using rule 162 (functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    PRINCIPAL       reduce using rule 162 (functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    $end            reduce using rule 162 (functions2 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)


state 352

    (171) nextParam -> COMMA paramsAux .

    RPAREN          reduce using rule 171 (nextParam -> COMMA paramsAux .)


state 353

    (160) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .

    FUNCTION        reduce using rule 160 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    PRINCIPAL       reduce using rule 160 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    $end            reduce using rule 160 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)


state 354

    (65) mean -> MEAN meanOperator LPAREN ID add_id2 . verifyArray RPAREN generateQuadMEAN
    (60) verifyArray -> .

    RPAREN          reduce using rule 60 (verifyArray -> .)

    verifyArray                    shift and go to state 364

state 355

    (62) find -> FIND findOperator LPAREN ID add_id2 . verifyArray COMMA ID add_id2 RPAREN generateQuadFIND
    (60) verifyArray -> .

    COMMA           reduce using rule 60 (verifyArray -> .)

    verifyArray                    shift and go to state 365

state 356

    (69) mode -> MODE modeOperator LPAREN ID add_id2 . verifyArray RPAREN generateQuadMODE
    (60) verifyArray -> .

    RPAREN          reduce using rule 60 (verifyArray -> .)

    verifyArray                    shift and go to state 366

state 357

    (73) variance -> VARIANCE varianceOperator LPAREN ID add_id2 . verifyArray RPAREN generateQuadVARIANCE
    (60) verifyArray -> .

    RPAREN          reduce using rule 60 (verifyArray -> .)

    verifyArray                    shift and go to state 367

state 358

    (39) expAux -> exp generateQuadPARAM COMMA paramsCount expAux .

    RPAREN          reduce using rule 39 (expAux -> exp generateQuadPARAM COMMA paramsCount expAux .)


state 359

    (83) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 368


state 360

    (86) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 369


state 361

    (89) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY . else endIF
    (90) else -> . ELSE generateQuadELSE LCURLY statements RCURLY
    (91) else -> . empty
    (182) empty -> .

    ELSE            shift and go to state 371
    ID              reduce using rule 182 (empty -> .)
    READ            reduce using rule 182 (empty -> .)
    WRITE           reduce using rule 182 (empty -> .)
    FOR             reduce using rule 182 (empty -> .)
    WHILE           reduce using rule 182 (empty -> .)
    IF              reduce using rule 182 (empty -> .)
    RETURN          reduce using rule 182 (empty -> .)
    SORT            reduce using rule 182 (empty -> .)
    PLOT            reduce using rule 182 (empty -> .)
    RCURLY          reduce using rule 182 (empty -> .)
    SEMMICOLON      reduce using rule 182 (empty -> .)

    else                           shift and go to state 370
    empty                          shift and go to state 372

state 362

    (127) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN . generateQuadGOSUB
    (41) generateQuadGOSUB -> .

    MUL             reduce using rule 41 (generateQuadGOSUB -> .)
    DIV             reduce using rule 41 (generateQuadGOSUB -> .)
    PLUS            reduce using rule 41 (generateQuadGOSUB -> .)
    MINUS           reduce using rule 41 (generateQuadGOSUB -> .)
    GT              reduce using rule 41 (generateQuadGOSUB -> .)
    LT              reduce using rule 41 (generateQuadGOSUB -> .)
    GTE             reduce using rule 41 (generateQuadGOSUB -> .)
    LTE             reduce using rule 41 (generateQuadGOSUB -> .)
    NE              reduce using rule 41 (generateQuadGOSUB -> .)
    COMPARE         reduce using rule 41 (generateQuadGOSUB -> .)
    AND             reduce using rule 41 (generateQuadGOSUB -> .)
    OR              reduce using rule 41 (generateQuadGOSUB -> .)
    RPAREN          reduce using rule 41 (generateQuadGOSUB -> .)
    RBRACKET        reduce using rule 41 (generateQuadGOSUB -> .)
    COMMA           reduce using rule 41 (generateQuadGOSUB -> .)
    SEMMICOLON      reduce using rule 41 (generateQuadGOSUB -> .)
    TO              reduce using rule 41 (generateQuadGOSUB -> .)
    ID              reduce using rule 41 (generateQuadGOSUB -> .)
    CTEI            reduce using rule 41 (generateQuadGOSUB -> .)
    CTEF            reduce using rule 41 (generateQuadGOSUB -> .)
    CTEC            reduce using rule 41 (generateQuadGOSUB -> .)
    CTESTRING       reduce using rule 41 (generateQuadGOSUB -> .)
    LPAREN          reduce using rule 41 (generateQuadGOSUB -> .)

    generateQuadGOSUB              shift and go to state 373

state 363

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID . add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (30) add_id2 -> .

    RPAREN          reduce using rule 30 (add_id2 -> .)

    add_id2                        shift and go to state 374

state 364

    (65) mean -> MEAN meanOperator LPAREN ID add_id2 verifyArray . RPAREN generateQuadMEAN

    RPAREN          shift and go to state 375


state 365

    (62) find -> FIND findOperator LPAREN ID add_id2 verifyArray . COMMA ID add_id2 RPAREN generateQuadFIND

    COMMA           shift and go to state 376


state 366

    (69) mode -> MODE modeOperator LPAREN ID add_id2 verifyArray . RPAREN generateQuadMODE

    RPAREN          shift and go to state 377


state 367

    (73) variance -> VARIANCE varianceOperator LPAREN ID add_id2 verifyArray . RPAREN generateQuadVARIANCE

    RPAREN          shift and go to state 378


state 368

    (83) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY . LoopEnd
    (82) LoopEnd -> .

    ID              reduce using rule 82 (LoopEnd -> .)
    READ            reduce using rule 82 (LoopEnd -> .)
    WRITE           reduce using rule 82 (LoopEnd -> .)
    FOR             reduce using rule 82 (LoopEnd -> .)
    WHILE           reduce using rule 82 (LoopEnd -> .)
    IF              reduce using rule 82 (LoopEnd -> .)
    RETURN          reduce using rule 82 (LoopEnd -> .)
    SORT            reduce using rule 82 (LoopEnd -> .)
    PLOT            reduce using rule 82 (LoopEnd -> .)
    RCURLY          reduce using rule 82 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 82 (LoopEnd -> .)

    LoopEnd                        shift and go to state 379

state 369

    (86) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY . LoopEnd
    (82) LoopEnd -> .

    ID              reduce using rule 82 (LoopEnd -> .)
    READ            reduce using rule 82 (LoopEnd -> .)
    WRITE           reduce using rule 82 (LoopEnd -> .)
    FOR             reduce using rule 82 (LoopEnd -> .)
    WHILE           reduce using rule 82 (LoopEnd -> .)
    IF              reduce using rule 82 (LoopEnd -> .)
    RETURN          reduce using rule 82 (LoopEnd -> .)
    SORT            reduce using rule 82 (LoopEnd -> .)
    PLOT            reduce using rule 82 (LoopEnd -> .)
    RCURLY          reduce using rule 82 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 82 (LoopEnd -> .)

    LoopEnd                        shift and go to state 380

state 370

    (89) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else . endIF
    (93) endIF -> .

    ID              reduce using rule 93 (endIF -> .)
    READ            reduce using rule 93 (endIF -> .)
    WRITE           reduce using rule 93 (endIF -> .)
    FOR             reduce using rule 93 (endIF -> .)
    WHILE           reduce using rule 93 (endIF -> .)
    IF              reduce using rule 93 (endIF -> .)
    RETURN          reduce using rule 93 (endIF -> .)
    SORT            reduce using rule 93 (endIF -> .)
    PLOT            reduce using rule 93 (endIF -> .)
    RCURLY          reduce using rule 93 (endIF -> .)
    SEMMICOLON      reduce using rule 93 (endIF -> .)

    endIF                          shift and go to state 381

state 371

    (90) else -> ELSE . generateQuadELSE LCURLY statements RCURLY
    (94) generateQuadELSE -> .

    LCURLY          reduce using rule 94 (generateQuadELSE -> .)

    generateQuadELSE               shift and go to state 382

state 372

    (91) else -> empty .

    ID              reduce using rule 91 (else -> empty .)
    READ            reduce using rule 91 (else -> empty .)
    WRITE           reduce using rule 91 (else -> empty .)
    FOR             reduce using rule 91 (else -> empty .)
    WHILE           reduce using rule 91 (else -> empty .)
    IF              reduce using rule 91 (else -> empty .)
    RETURN          reduce using rule 91 (else -> empty .)
    SORT            reduce using rule 91 (else -> empty .)
    PLOT            reduce using rule 91 (else -> empty .)
    RCURLY          reduce using rule 91 (else -> empty .)
    SEMMICOLON      reduce using rule 91 (else -> empty .)


state 373

    (127) functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .

    MUL             reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    DIV             reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    PLUS            reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    MINUS           reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    GT              reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    LT              reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    GTE             reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    LTE             reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    NE              reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    COMPARE         reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    AND             reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    OR              reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    RPAREN          reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    RBRACKET        reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    COMMA           reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    SEMMICOLON      reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    TO              reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    ID              reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEI            reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEF            reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEC            reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    CTESTRING       reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)
    LPAREN          reduce using rule 127 (functionCallExp -> ID LPAREN validateFunctionIDexp functionERA expAux verifyParams RPAREN generateQuadGOSUB .)


state 374

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 . verifyArrayForPlot RPAREN generateQuadPLOT
    (80) verifyArrayForPlot -> .

    RPAREN          reduce using rule 80 (verifyArrayForPlot -> .)

    verifyArrayForPlot             shift and go to state 383

state 375

    (65) mean -> MEAN meanOperator LPAREN ID add_id2 verifyArray RPAREN . generateQuadMEAN
    (68) generateQuadMEAN -> .

    SEMMICOLON      reduce using rule 68 (generateQuadMEAN -> .)
    TO              reduce using rule 68 (generateQuadMEAN -> .)

    generateQuadMEAN               shift and go to state 384

state 376

    (62) find -> FIND findOperator LPAREN ID add_id2 verifyArray COMMA . ID add_id2 RPAREN generateQuadFIND

    ID              shift and go to state 385


state 377

    (69) mode -> MODE modeOperator LPAREN ID add_id2 verifyArray RPAREN . generateQuadMODE
    (72) generateQuadMODE -> .

    SEMMICOLON      reduce using rule 72 (generateQuadMODE -> .)
    TO              reduce using rule 72 (generateQuadMODE -> .)

    generateQuadMODE               shift and go to state 386

state 378

    (73) variance -> VARIANCE varianceOperator LPAREN ID add_id2 verifyArray RPAREN . generateQuadVARIANCE
    (76) generateQuadVARIANCE -> .

    SEMMICOLON      reduce using rule 76 (generateQuadVARIANCE -> .)
    TO              reduce using rule 76 (generateQuadVARIANCE -> .)

    generateQuadVARIANCE           shift and go to state 387

state 379

    (83) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    SORT            reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    PLOT            reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 83 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)


state 380

    (86) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    SORT            reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    PLOT            reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 86 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)


state 381

    (89) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .

    ID              reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    READ            reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WRITE           reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    FOR             reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WHILE           reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    IF              reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RETURN          reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    SORT            reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    PLOT            reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RCURLY          reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    SEMMICOLON      reduce using rule 89 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)


state 382

    (90) else -> ELSE generateQuadELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 388


state 383

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot . RPAREN generateQuadPLOT

    RPAREN          shift and go to state 389


state 384

    (65) mean -> MEAN meanOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMEAN .

    SEMMICOLON      reduce using rule 65 (mean -> MEAN meanOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMEAN .)
    TO              reduce using rule 65 (mean -> MEAN meanOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMEAN .)


state 385

    (62) find -> FIND findOperator LPAREN ID add_id2 verifyArray COMMA ID . add_id2 RPAREN generateQuadFIND
    (30) add_id2 -> .

    RPAREN          reduce using rule 30 (add_id2 -> .)

    add_id2                        shift and go to state 390

state 386

    (69) mode -> MODE modeOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMODE .

    SEMMICOLON      reduce using rule 69 (mode -> MODE modeOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMODE .)
    TO              reduce using rule 69 (mode -> MODE modeOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadMODE .)


state 387

    (73) variance -> VARIANCE varianceOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadVARIANCE .

    SEMMICOLON      reduce using rule 73 (variance -> VARIANCE varianceOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadVARIANCE .)
    TO              reduce using rule 73 (variance -> VARIANCE varianceOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadVARIANCE .)


state 388

    (90) else -> ELSE generateQuadELSE LCURLY . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return SEMMICOLON statements
    (18) statements -> . sort statements SEMMICOLON statements
    (19) statements -> . plot statements SEMMICOLON statements
    (20) statements -> . empty
    (21) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (22) assign -> . ID arrStatement EQUALS saveOperator exp generateAssignQuad
    (23) assign -> . ID add_id2 EQUALS saveOperator functionCall generateAssignQuad
    (24) assign -> . ID add_id2 EQUALS saveOperator mean generateAssignQuad
    (25) assign -> . ID add_id2 EQUALS saveOperator find generateAssignQuad
    (26) assign -> . ID add_id2 EQUALS saveOperator mode generateAssignQuad
    (27) assign -> . ID add_id2 EQUALS saveOperator variance generateAssignQuad
    (33) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (44) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (51) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (83) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (86) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (89) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (180) return -> . RETURN LPAREN exp generateQuadRETURN RPAREN
    (58) sort -> . SORT sortOperator LPAREN ID add_id2 verifyArray RPAREN generateQuadSORT
    (77) plot -> . PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT
    (182) empty -> .

    ID              shift and go to state 79
    READ            shift and go to state 80
    WRITE           shift and go to state 81
    FOR             shift and go to state 82
    WHILE           shift and go to state 83
    IF              shift and go to state 84
    RETURN          shift and go to state 85
    SORT            shift and go to state 86
    PLOT            shift and go to state 87
    RCURLY          reduce using rule 182 (empty -> .)

    statements                     shift and go to state 391
    assign                         shift and go to state 68
    functionCall                   shift and go to state 69
    read                           shift and go to state 70
    write                          shift and go to state 71
    for                            shift and go to state 72
    while                          shift and go to state 73
    if                             shift and go to state 74
    return                         shift and go to state 75
    sort                           shift and go to state 76
    plot                           shift and go to state 77
    empty                          shift and go to state 78

state 389

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN . generateQuadPLOT
    (81) generateQuadPLOT -> .

    ID              reduce using rule 81 (generateQuadPLOT -> .)
    READ            reduce using rule 81 (generateQuadPLOT -> .)
    WRITE           reduce using rule 81 (generateQuadPLOT -> .)
    FOR             reduce using rule 81 (generateQuadPLOT -> .)
    WHILE           reduce using rule 81 (generateQuadPLOT -> .)
    IF              reduce using rule 81 (generateQuadPLOT -> .)
    RETURN          reduce using rule 81 (generateQuadPLOT -> .)
    SORT            reduce using rule 81 (generateQuadPLOT -> .)
    PLOT            reduce using rule 81 (generateQuadPLOT -> .)
    SEMMICOLON      reduce using rule 81 (generateQuadPLOT -> .)

    generateQuadPLOT               shift and go to state 392

state 390

    (62) find -> FIND findOperator LPAREN ID add_id2 verifyArray COMMA ID add_id2 . RPAREN generateQuadFIND

    RPAREN          shift and go to state 393


state 391

    (90) else -> ELSE generateQuadELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 394


state 392

    (77) plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .

    ID              reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    READ            reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    WRITE           reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    FOR             reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    WHILE           reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    IF              reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    RETURN          reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    SORT            reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    PLOT            reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)
    SEMMICOLON      reduce using rule 77 (plot -> PLOT plotOperator LPAREN ID add_id2 verifyArray saveIDaux COMMA ID add_id2 verifyArrayForPlot RPAREN generateQuadPLOT .)


state 393

    (62) find -> FIND findOperator LPAREN ID add_id2 verifyArray COMMA ID add_id2 RPAREN . generateQuadFIND
    (64) generateQuadFIND -> .

    SEMMICOLON      reduce using rule 64 (generateQuadFIND -> .)
    TO              reduce using rule 64 (generateQuadFIND -> .)

    generateQuadFIND               shift and go to state 395

state 394

    (90) else -> ELSE generateQuadELSE LCURLY statements RCURLY .

    ID              reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    READ            reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WRITE           reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WHILE           reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    IF              reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    SORT            reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    PLOT            reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    SEMMICOLON      reduce using rule 90 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)


state 395

    (62) find -> FIND findOperator LPAREN ID add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND .

    SEMMICOLON      reduce using rule 62 (find -> FIND findOperator LPAREN ID add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND .)
    TO              reduce using rule 62 (find -> FIND findOperator LPAREN ID add_id2 verifyArray COMMA ID add_id2 RPAREN generateQuadFIND .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINCIPAL in state 5 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MUL in state 153 resolved as shift
WARNING: shift/reduce conflict for DIV in state 153 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 154 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 154 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 217 resolved as shift
WARNING: shift/reduce conflict for ID in state 244 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 244 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 244 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 244 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 244 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 244 resolved as shift
WARNING: shift/reduce conflict for ID in state 245 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 245 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 245 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 245 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 245 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 245 resolved as shift
WARNING: shift/reduce conflict for ID in state 246 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 246 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 246 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 246 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 246 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 246 resolved as shift
WARNING: shift/reduce conflict for ID in state 247 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 247 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 247 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 247 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 247 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 247 resolved as shift
WARNING: shift/reduce conflict for ID in state 248 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 248 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 248 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 248 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 248 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 248 resolved as shift
WARNING: shift/reduce conflict for ID in state 249 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 249 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 249 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 249 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 249 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 249 resolved as shift
WARNING: shift/reduce conflict for ID in state 250 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 250 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 250 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 250 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 250 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 250 resolved as shift
WARNING: shift/reduce conflict for ID in state 251 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 251 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 251 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 251 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 251 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 251 resolved as shift
WARNING: shift/reduce conflict for ID in state 252 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 252 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 252 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 252 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 252 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 252 resolved as shift
WARNING: shift/reduce conflict for ID in state 253 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 253 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 253 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 253 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 253 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 253 resolved as shift
WARNING: reduce/reduce conflict in state 79 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 79
WARNING: reduce/reduce conflict in state 144 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 144
WARNING: reduce/reduce conflict in state 154 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 154
WARNING: reduce/reduce conflict in state 183 resolved using rule (paramWrite -> empty)
WARNING: rejected rule (pexp -> empty) in state 183
WARNING: reduce/reduce conflict in state 217 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 217
WARNING: reduce/reduce conflict in state 225 resolved using rule (mean -> empty)
WARNING: rejected rule (mode -> empty) in state 225
WARNING: reduce/reduce conflict in state 225 resolved using rule (mean -> empty)
WARNING: rejected rule (variance -> empty) in state 225
WARNING: reduce/reduce conflict in state 225 resolved using rule (mean -> empty)
WARNING: rejected rule (pexp -> empty) in state 225
WARNING: reduce/reduce conflict in state 232 resolved using rule (expAux -> empty)
WARNING: rejected rule (pexp -> empty) in state 232
WARNING: Rule (mode -> empty) is never reduced
WARNING: Rule (variance -> empty) is never reduced
