Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA
    COMPARE
    END
    FROM
    MODA
    PLOTXY
    SIMPLEREGRESSION
    VARIANZA

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMMICOLON addProgram program1
Rule 2     addProgram -> <empty>
Rule 3     program1 -> vars mainQuad functions mainEnd program2
Rule 4     program1 -> vars mainQuad functions
Rule 5     program1 -> program2
Rule 6     program2 -> principal
Rule 7     principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
Rule 8     mainQuad -> <empty>
Rule 9     mainEnd -> <empty>
Rule 10    statements -> assign SEMMICOLON statements
Rule 11    statements -> functionCall SEMMICOLON statements
Rule 12    statements -> read statements SEMMICOLON statements
Rule 13    statements -> write statements SEMMICOLON statements
Rule 14    statements -> for statements
Rule 15    statements -> while statements
Rule 16    statements -> if statements
Rule 17    statements -> return statements
Rule 18    statements -> empty
Rule 19    assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad
Rule 20    assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
Rule 21    generateAssignQuad -> <empty>
Rule 22    add_id -> <empty>
Rule 23    add_id2 -> <empty>
Rule 24    add_id3 -> <empty>
Rule 25    functionCall -> ID LPAREN exp RPAREN
Rule 26    media -> MEDIA LPAREN arr RPAREN SEMMICOLON
Rule 27    read -> READ operatorRead LPAREN paramReadAux RPAREN
Rule 28    paramRead -> paramReadAux
Rule 29    paramRead -> empty
Rule 30    paramReadAux -> exp generateQuadREAD
Rule 31    paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux
Rule 32    operatorRead -> <empty>
Rule 33    generateQuadREAD -> <empty>
Rule 34    write -> WRITE writeOperator LPAREN paramWrite RPAREN
Rule 35    paramWrite -> paramWriteAux
Rule 36    paramWrite -> empty
Rule 37    paramWriteAux -> exp generateQuadPRINT
Rule 38    paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux
Rule 39    writeOperator -> <empty>
Rule 40    generateQuadPRINT -> <empty>
Rule 41    LoopEnd -> <empty>
Rule 42    for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
Rule 43    forOP -> <empty>
Rule 44    generateQuadFOR -> <empty>
Rule 45    while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
Rule 46    whileOP -> <empty>
Rule 47    generateQuadWHILE -> <empty>
Rule 48    if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
Rule 49    else -> ELSE generateQuadELSE LCURLY statements RCURLY
Rule 50    else -> empty
Rule 51    generateQuadIF -> <empty>
Rule 52    endIF -> <empty>
Rule 53    generateQuadELSE -> <empty>
Rule 54    exp -> nexp generateQuadOR
Rule 55    exp -> nexp generateQuadOR OR saveOperator nexp
Rule 56    generateQuadOR -> <empty>
Rule 57    nexp -> compexp generateQuadAND
Rule 58    nexp -> compexp generateQuadAND AND saveOperator compexp
Rule 59    generateQuadAND -> <empty>
Rule 60    compexp -> sumexp
Rule 61    compexp -> compexp1 sumexp
Rule 62    compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE
Rule 63    compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE
Rule 64    compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE
Rule 65    compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE
Rule 66    compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE
Rule 67    generateQuadCOMPARE -> <empty>
Rule 68    sumexp -> mulexp
Rule 69    sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM
Rule 70    sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM
Rule 71    generateQuadSUM -> <empty>
Rule 72    mulexp -> pexp
Rule 73    mulexp -> pexp MUL saveOperator pexp generateQuadMUL
Rule 74    mulexp -> pexp DIV saveOperator pexp generateQuadMUL
Rule 75    generateQuadMUL -> <empty>
Rule 76    pexp -> ID add_id2
Rule 77    pexp -> CTEI saveCTE
Rule 78    pexp -> CTEF saveCTE
Rule 79    pexp -> CTEC saveCTE
Rule 80    pexp -> CTESTRING saveCTE
Rule 81    pexp -> functionCall
Rule 82    pexp -> LPAREN exp RPAREN
Rule 83    pexp -> ID arr add_id3
Rule 84    pexp -> empty
Rule 85    saveCTE -> <empty>
Rule 86    saveOperator -> <empty>
Rule 87    vars -> var
Rule 88    vars -> empty
Rule 89    var -> VARS var2
Rule 90    var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar
Rule 91    var2 -> empty
Rule 92    var1 -> ID
Rule 93    var1 -> ID COMMA var1 addVar
Rule 94    var1 -> ID arr
Rule 95    var1 -> ID arr COMMA var1 addVar
Rule 96    var1 -> empty
Rule 97    addVar -> <empty>
Rule 98    saveTypeVar -> <empty>
Rule 99    type -> INT saveTypeVar
Rule 100   type -> CHAR saveTypeVar
Rule 101   type -> FLOAT saveTypeVar
Rule 102   arr -> LBRACKET CTEI RBRACKET
Rule 103   arr -> LBRACKET exp RBRACKET
Rule 104   functions -> FUNCTION INT functions1 functions
Rule 105   functions -> FUNCTION CHAR functions1 functions
Rule 106   functions -> FUNCTION FLOAT functions1 functions
Rule 107   functions -> FUNCTION VOID functions1 functions
Rule 108   functions -> empty
Rule 109   functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
Rule 110   functions1 -> empty
Rule 111   saveFunction -> <empty>
Rule 112   args -> args type TWOPOINTS var1 addVar
Rule 113   args -> empty
Rule 114   args1 -> ID addVar
Rule 115   args1 -> ID COMMA args1
Rule 116   args1 -> empty
Rule 117   return -> RETURN LPAREN exp RPAREN SEMMICOLON
Rule 118   return -> RETURN LPAREN exp RPAREN
Rule 119   empty -> <empty>

Terminals, with rules where they appear

AND                  : 58
CHAR                 : 100 105
COMILLA              : 
COMMA                : 31 38 93 95 115
COMPARE              : 
CTEC                 : 79
CTEF                 : 78
CTEI                 : 42 77 102
CTESTRING            : 80
DIV                  : 74
DO                   : 42 45
ELSE                 : 49
END                  : 
EQUALS               : 19 20
FLOAT                : 101 106
FOR                  : 42
FROM                 : 
FUNCTION             : 104 105 106 107
GT                   : 62
GTE                  : 64
ID                   : 1 19 20 25 76 83 92 93 94 95 109 114 115
IF                   : 48
INT                  : 99 104
LBRACKET             : 102 103
LCURLY               : 7 42 45 48 49 109
LPAREN               : 7 25 26 27 34 45 48 82 109 117 118
LT                   : 63
LTE                  : 65
MEDIA                : 26
MINUS                : 70
MODA                 : 
MUL                  : 73
NE                   : 66
OR                   : 55
PLOTXY               : 
PLUS                 : 69
PRINCIPAL            : 7
PROGRAM              : 1
RBRACKET             : 102 103
RCURLY               : 7 42 45 48 49 109
READ                 : 27
RETURN               : 117 118
RPAREN               : 7 25 26 27 34 45 48 82 109 117 118
SEMMICOLON           : 1 10 11 12 13 26 90 117
SIMPLEREGRESSION     : 
THEN                 : 48
TO                   : 42
TWOPOINTS            : 90 112
VARIANZA             : 
VARS                 : 89
VOID                 : 107
WHILE                : 45
WRITE                : 34
error                : 

Nonterminals, with rules where they appear

LoopEnd              : 42 45
addProgram           : 1
addVar               : 90 93 95 112 114
add_id               : 
add_id2              : 19 20 76
add_id3              : 83
args                 : 109 112
args1                : 115
arr                  : 20 26 83 94 95
assign               : 10 42
compexp              : 57 58 58
compexp1             : 61
else                 : 48
empty                : 18 29 36 50 84 88 91 96 108 110 113 116
endIF                : 48
exp                  : 19 20 25 30 31 37 38 45 48 82 103 117 118
for                  : 14
forOP                : 42
functionCall         : 11 81
functions            : 3 4 104 105 106 107
functions1           : 104 105 106 107
generateAssignQuad   : 19 20
generateQuadAND      : 57 58
generateQuadCOMPARE  : 62 63 64 65 66
generateQuadELSE     : 49
generateQuadFOR      : 42
generateQuadIF       : 48
generateQuadMUL      : 73 74
generateQuadOR       : 54 55
generateQuadPRINT    : 37 38
generateQuadREAD     : 30 31
generateQuadSUM      : 69 70
generateQuadWHILE    : 45
if                   : 16
mainEnd              : 3
mainQuad             : 3 4
media                : 
mulexp               : 68 69 69 70 70
nexp                 : 54 55 55
operatorRead         : 27 31
paramRead            : 
paramReadAux         : 27 28 31
paramWrite           : 34
paramWriteAux        : 35 38
pexp                 : 72 73 73 74 74
principal            : 6
program              : 0
program1             : 1
program2             : 3 5
read                 : 12
return               : 17
saveCTE              : 77 78 79 80
saveFunction         : 7 109
saveOperator         : 19 20 55 58 62 63 64 65 66 69 70 73 74
saveTypeVar          : 99 100 101
statements           : 7 10 11 12 12 13 13 14 15 16 17 42 45 48 49 109
sumexp               : 60 61 62 62 63 63 64 64 65 65 66 66
type                 : 90 112
var                  : 87
var1                 : 90 93 95 112
var2                 : 89 90
vars                 : 3 4 7 109
while                : 15
whileOP              : 45
write                : 13
writeOperator        : 34 38

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMMICOLON addProgram program1

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMMICOLON addProgram program1

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMMICOLON addProgram program1

    SEMMICOLON      shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMMICOLON . addProgram program1
    (2) addProgram -> .

    VARS            reduce using rule 2 (addProgram -> .)
    PRINCIPAL       reduce using rule 2 (addProgram -> .)
    FUNCTION        reduce using rule 2 (addProgram -> .)
    $end            reduce using rule 2 (addProgram -> .)

    addProgram                     shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMMICOLON addProgram . program1
    (3) program1 -> . vars mainQuad functions mainEnd program2
    (4) program1 -> . vars mainQuad functions
    (5) program1 -> . program2
    (87) vars -> . var
    (88) vars -> . empty
    (6) program2 -> . principal
    (89) var -> . VARS var2
    (119) empty -> .
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

  ! shift/reduce conflict for PRINCIPAL resolved as shift
    VARS            shift and go to state 12
    FUNCTION        reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)
    PRINCIPAL       shift and go to state 13

  ! PRINCIPAL       [ reduce using rule 119 (empty -> .) ]

    program1                       shift and go to state 6
    vars                           shift and go to state 7
    program2                       shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    principal                      shift and go to state 11

state 6

    (1) program -> PROGRAM ID SEMMICOLON addProgram program1 .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMMICOLON addProgram program1 .)


state 7

    (3) program1 -> vars . mainQuad functions mainEnd program2
    (4) program1 -> vars . mainQuad functions
    (8) mainQuad -> .

    FUNCTION        reduce using rule 8 (mainQuad -> .)
    PRINCIPAL       reduce using rule 8 (mainQuad -> .)
    $end            reduce using rule 8 (mainQuad -> .)

    mainQuad                       shift and go to state 14

state 8

    (5) program1 -> program2 .

    $end            reduce using rule 5 (program1 -> program2 .)


state 9

    (87) vars -> var .

    FUNCTION        reduce using rule 87 (vars -> var .)
    PRINCIPAL       reduce using rule 87 (vars -> var .)
    $end            reduce using rule 87 (vars -> var .)
    ID              reduce using rule 87 (vars -> var .)
    READ            reduce using rule 87 (vars -> var .)
    WRITE           reduce using rule 87 (vars -> var .)
    FOR             reduce using rule 87 (vars -> var .)
    WHILE           reduce using rule 87 (vars -> var .)
    IF              reduce using rule 87 (vars -> var .)
    RETURN          reduce using rule 87 (vars -> var .)
    RCURLY          reduce using rule 87 (vars -> var .)
    LCURLY          reduce using rule 87 (vars -> var .)


state 10

    (88) vars -> empty .

    FUNCTION        reduce using rule 88 (vars -> empty .)
    PRINCIPAL       reduce using rule 88 (vars -> empty .)
    $end            reduce using rule 88 (vars -> empty .)
    ID              reduce using rule 88 (vars -> empty .)
    READ            reduce using rule 88 (vars -> empty .)
    WRITE           reduce using rule 88 (vars -> empty .)
    FOR             reduce using rule 88 (vars -> empty .)
    WHILE           reduce using rule 88 (vars -> empty .)
    IF              reduce using rule 88 (vars -> empty .)
    RETURN          reduce using rule 88 (vars -> empty .)
    RCURLY          reduce using rule 88 (vars -> empty .)
    LCURLY          reduce using rule 88 (vars -> empty .)


state 11

    (6) program2 -> principal .

    $end            reduce using rule 6 (program2 -> principal .)


state 12

    (89) var -> VARS . var2
    (90) var2 -> . var2 type TWOPOINTS var1 SEMMICOLON addVar
    (91) var2 -> . empty
    (119) empty -> .

    INT             reduce using rule 119 (empty -> .)
    CHAR            reduce using rule 119 (empty -> .)
    FLOAT           reduce using rule 119 (empty -> .)
    FUNCTION        reduce using rule 119 (empty -> .)
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)
    ID              reduce using rule 119 (empty -> .)
    READ            reduce using rule 119 (empty -> .)
    WRITE           reduce using rule 119 (empty -> .)
    FOR             reduce using rule 119 (empty -> .)
    WHILE           reduce using rule 119 (empty -> .)
    IF              reduce using rule 119 (empty -> .)
    RETURN          reduce using rule 119 (empty -> .)
    RCURLY          reduce using rule 119 (empty -> .)
    LCURLY          reduce using rule 119 (empty -> .)

    var2                           shift and go to state 15
    empty                          shift and go to state 16

state 13

    (7) principal -> PRINCIPAL . saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
    (111) saveFunction -> .

    LPAREN          reduce using rule 111 (saveFunction -> .)

    saveFunction                   shift and go to state 17

state 14

    (3) program1 -> vars mainQuad . functions mainEnd program2
    (4) program1 -> vars mainQuad . functions
    (104) functions -> . FUNCTION INT functions1 functions
    (105) functions -> . FUNCTION CHAR functions1 functions
    (106) functions -> . FUNCTION FLOAT functions1 functions
    (107) functions -> . FUNCTION VOID functions1 functions
    (108) functions -> . empty
    (119) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions                      shift and go to state 18
    empty                          shift and go to state 20

state 15

    (89) var -> VARS var2 .
    (90) var2 -> var2 . type TWOPOINTS var1 SEMMICOLON addVar
    (99) type -> . INT saveTypeVar
    (100) type -> . CHAR saveTypeVar
    (101) type -> . FLOAT saveTypeVar

    FUNCTION        reduce using rule 89 (var -> VARS var2 .)
    PRINCIPAL       reduce using rule 89 (var -> VARS var2 .)
    $end            reduce using rule 89 (var -> VARS var2 .)
    ID              reduce using rule 89 (var -> VARS var2 .)
    READ            reduce using rule 89 (var -> VARS var2 .)
    WRITE           reduce using rule 89 (var -> VARS var2 .)
    FOR             reduce using rule 89 (var -> VARS var2 .)
    WHILE           reduce using rule 89 (var -> VARS var2 .)
    IF              reduce using rule 89 (var -> VARS var2 .)
    RETURN          reduce using rule 89 (var -> VARS var2 .)
    RCURLY          reduce using rule 89 (var -> VARS var2 .)
    LCURLY          reduce using rule 89 (var -> VARS var2 .)
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    FLOAT           shift and go to state 24

    type                           shift and go to state 21

state 16

    (91) var2 -> empty .

    INT             reduce using rule 91 (var2 -> empty .)
    CHAR            reduce using rule 91 (var2 -> empty .)
    FLOAT           reduce using rule 91 (var2 -> empty .)
    FUNCTION        reduce using rule 91 (var2 -> empty .)
    PRINCIPAL       reduce using rule 91 (var2 -> empty .)
    $end            reduce using rule 91 (var2 -> empty .)
    ID              reduce using rule 91 (var2 -> empty .)
    READ            reduce using rule 91 (var2 -> empty .)
    WRITE           reduce using rule 91 (var2 -> empty .)
    FOR             reduce using rule 91 (var2 -> empty .)
    WHILE           reduce using rule 91 (var2 -> empty .)
    IF              reduce using rule 91 (var2 -> empty .)
    RETURN          reduce using rule 91 (var2 -> empty .)
    RCURLY          reduce using rule 91 (var2 -> empty .)
    LCURLY          reduce using rule 91 (var2 -> empty .)


state 17

    (7) principal -> PRINCIPAL saveFunction . LPAREN RPAREN LCURLY vars statements RCURLY

    LPAREN          shift and go to state 25


state 18

    (3) program1 -> vars mainQuad functions . mainEnd program2
    (4) program1 -> vars mainQuad functions .
    (9) mainEnd -> .

    $end            reduce using rule 4 (program1 -> vars mainQuad functions .)
    PRINCIPAL       reduce using rule 9 (mainEnd -> .)

    mainEnd                        shift and go to state 26

state 19

    (104) functions -> FUNCTION . INT functions1 functions
    (105) functions -> FUNCTION . CHAR functions1 functions
    (106) functions -> FUNCTION . FLOAT functions1 functions
    (107) functions -> FUNCTION . VOID functions1 functions

    INT             shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30


state 20

    (108) functions -> empty .

    PRINCIPAL       reduce using rule 108 (functions -> empty .)
    $end            reduce using rule 108 (functions -> empty .)


state 21

    (90) var2 -> var2 type . TWOPOINTS var1 SEMMICOLON addVar

    TWOPOINTS       shift and go to state 31


state 22

    (99) type -> INT . saveTypeVar
    (98) saveTypeVar -> .

    TWOPOINTS       reduce using rule 98 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 32

state 23

    (100) type -> CHAR . saveTypeVar
    (98) saveTypeVar -> .

    TWOPOINTS       reduce using rule 98 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 33

state 24

    (101) type -> FLOAT . saveTypeVar
    (98) saveTypeVar -> .

    TWOPOINTS       reduce using rule 98 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 34

state 25

    (7) principal -> PRINCIPAL saveFunction LPAREN . RPAREN LCURLY vars statements RCURLY

    RPAREN          shift and go to state 35


state 26

    (3) program1 -> vars mainQuad functions mainEnd . program2
    (6) program2 -> . principal
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

    PRINCIPAL       shift and go to state 13

    program2                       shift and go to state 36
    principal                      shift and go to state 11

state 27

    (104) functions -> FUNCTION INT . functions1 functions
    (109) functions1 -> . ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (110) functions1 -> . empty
    (119) empty -> .

    ID              shift and go to state 38
    FUNCTION        reduce using rule 119 (empty -> .)
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions1                     shift and go to state 37
    empty                          shift and go to state 39

state 28

    (105) functions -> FUNCTION CHAR . functions1 functions
    (109) functions1 -> . ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (110) functions1 -> . empty
    (119) empty -> .

    ID              shift and go to state 38
    FUNCTION        reduce using rule 119 (empty -> .)
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions1                     shift and go to state 40
    empty                          shift and go to state 39

state 29

    (106) functions -> FUNCTION FLOAT . functions1 functions
    (109) functions1 -> . ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (110) functions1 -> . empty
    (119) empty -> .

    ID              shift and go to state 38
    FUNCTION        reduce using rule 119 (empty -> .)
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions1                     shift and go to state 41
    empty                          shift and go to state 39

state 30

    (107) functions -> FUNCTION VOID . functions1 functions
    (109) functions1 -> . ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (110) functions1 -> . empty
    (119) empty -> .

    ID              shift and go to state 38
    FUNCTION        reduce using rule 119 (empty -> .)
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions1                     shift and go to state 42
    empty                          shift and go to state 39

state 31

    (90) var2 -> var2 type TWOPOINTS . var1 SEMMICOLON addVar
    (92) var1 -> . ID
    (93) var1 -> . ID COMMA var1 addVar
    (94) var1 -> . ID arr
    (95) var1 -> . ID arr COMMA var1 addVar
    (96) var1 -> . empty
    (119) empty -> .

    ID              shift and go to state 44
    SEMMICOLON      reduce using rule 119 (empty -> .)

    var1                           shift and go to state 43
    empty                          shift and go to state 45

state 32

    (99) type -> INT saveTypeVar .

    TWOPOINTS       reduce using rule 99 (type -> INT saveTypeVar .)


state 33

    (100) type -> CHAR saveTypeVar .

    TWOPOINTS       reduce using rule 100 (type -> CHAR saveTypeVar .)


state 34

    (101) type -> FLOAT saveTypeVar .

    TWOPOINTS       reduce using rule 101 (type -> FLOAT saveTypeVar .)


state 35

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN . LCURLY vars statements RCURLY

    LCURLY          shift and go to state 46


state 36

    (3) program1 -> vars mainQuad functions mainEnd program2 .

    $end            reduce using rule 3 (program1 -> vars mainQuad functions mainEnd program2 .)


state 37

    (104) functions -> FUNCTION INT functions1 . functions
    (104) functions -> . FUNCTION INT functions1 functions
    (105) functions -> . FUNCTION CHAR functions1 functions
    (106) functions -> . FUNCTION FLOAT functions1 functions
    (107) functions -> . FUNCTION VOID functions1 functions
    (108) functions -> . empty
    (119) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions                      shift and go to state 47
    empty                          shift and go to state 20

state 38

    (109) functions1 -> ID . saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (111) saveFunction -> .

    LPAREN          reduce using rule 111 (saveFunction -> .)

    saveFunction                   shift and go to state 48

state 39

    (110) functions1 -> empty .

    FUNCTION        reduce using rule 110 (functions1 -> empty .)
    PRINCIPAL       reduce using rule 110 (functions1 -> empty .)
    $end            reduce using rule 110 (functions1 -> empty .)


state 40

    (105) functions -> FUNCTION CHAR functions1 . functions
    (104) functions -> . FUNCTION INT functions1 functions
    (105) functions -> . FUNCTION CHAR functions1 functions
    (106) functions -> . FUNCTION FLOAT functions1 functions
    (107) functions -> . FUNCTION VOID functions1 functions
    (108) functions -> . empty
    (119) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions                      shift and go to state 49
    empty                          shift and go to state 20

state 41

    (106) functions -> FUNCTION FLOAT functions1 . functions
    (104) functions -> . FUNCTION INT functions1 functions
    (105) functions -> . FUNCTION CHAR functions1 functions
    (106) functions -> . FUNCTION FLOAT functions1 functions
    (107) functions -> . FUNCTION VOID functions1 functions
    (108) functions -> . empty
    (119) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions                      shift and go to state 50
    empty                          shift and go to state 20

state 42

    (107) functions -> FUNCTION VOID functions1 . functions
    (104) functions -> . FUNCTION INT functions1 functions
    (105) functions -> . FUNCTION CHAR functions1 functions
    (106) functions -> . FUNCTION FLOAT functions1 functions
    (107) functions -> . FUNCTION VOID functions1 functions
    (108) functions -> . empty
    (119) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 119 (empty -> .)
    $end            reduce using rule 119 (empty -> .)

    functions                      shift and go to state 51
    empty                          shift and go to state 20

state 43

    (90) var2 -> var2 type TWOPOINTS var1 . SEMMICOLON addVar

    SEMMICOLON      shift and go to state 52


state 44

    (92) var1 -> ID .
    (93) var1 -> ID . COMMA var1 addVar
    (94) var1 -> ID . arr
    (95) var1 -> ID . arr COMMA var1 addVar
    (102) arr -> . LBRACKET CTEI RBRACKET
    (103) arr -> . LBRACKET exp RBRACKET

    SEMMICOLON      reduce using rule 92 (var1 -> ID .)
    RPAREN          reduce using rule 92 (var1 -> ID .)
    INT             reduce using rule 92 (var1 -> ID .)
    CHAR            reduce using rule 92 (var1 -> ID .)
    FLOAT           reduce using rule 92 (var1 -> ID .)
    COMMA           shift and go to state 53
    LBRACKET        shift and go to state 55

    arr                            shift and go to state 54

state 45

    (96) var1 -> empty .

    SEMMICOLON      reduce using rule 96 (var1 -> empty .)
    RPAREN          reduce using rule 96 (var1 -> empty .)
    INT             reduce using rule 96 (var1 -> empty .)
    CHAR            reduce using rule 96 (var1 -> empty .)
    FLOAT           reduce using rule 96 (var1 -> empty .)


state 46

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY . vars statements RCURLY
    (87) vars -> . var
    (88) vars -> . empty
    (89) var -> . VARS var2
    (119) empty -> .

    VARS            shift and go to state 12
    ID              reduce using rule 119 (empty -> .)
    READ            reduce using rule 119 (empty -> .)
    WRITE           reduce using rule 119 (empty -> .)
    FOR             reduce using rule 119 (empty -> .)
    WHILE           reduce using rule 119 (empty -> .)
    IF              reduce using rule 119 (empty -> .)
    RETURN          reduce using rule 119 (empty -> .)
    RCURLY          reduce using rule 119 (empty -> .)

    vars                           shift and go to state 56
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 47

    (104) functions -> FUNCTION INT functions1 functions .

    PRINCIPAL       reduce using rule 104 (functions -> FUNCTION INT functions1 functions .)
    $end            reduce using rule 104 (functions -> FUNCTION INT functions1 functions .)


state 48

    (109) functions1 -> ID saveFunction . LPAREN args RPAREN vars LCURLY statements RCURLY

    LPAREN          shift and go to state 57


state 49

    (105) functions -> FUNCTION CHAR functions1 functions .

    PRINCIPAL       reduce using rule 105 (functions -> FUNCTION CHAR functions1 functions .)
    $end            reduce using rule 105 (functions -> FUNCTION CHAR functions1 functions .)


state 50

    (106) functions -> FUNCTION FLOAT functions1 functions .

    PRINCIPAL       reduce using rule 106 (functions -> FUNCTION FLOAT functions1 functions .)
    $end            reduce using rule 106 (functions -> FUNCTION FLOAT functions1 functions .)


state 51

    (107) functions -> FUNCTION VOID functions1 functions .

    PRINCIPAL       reduce using rule 107 (functions -> FUNCTION VOID functions1 functions .)
    $end            reduce using rule 107 (functions -> FUNCTION VOID functions1 functions .)


state 52

    (90) var2 -> var2 type TWOPOINTS var1 SEMMICOLON . addVar
    (97) addVar -> .

    INT             reduce using rule 97 (addVar -> .)
    CHAR            reduce using rule 97 (addVar -> .)
    FLOAT           reduce using rule 97 (addVar -> .)
    FUNCTION        reduce using rule 97 (addVar -> .)
    PRINCIPAL       reduce using rule 97 (addVar -> .)
    $end            reduce using rule 97 (addVar -> .)
    ID              reduce using rule 97 (addVar -> .)
    READ            reduce using rule 97 (addVar -> .)
    WRITE           reduce using rule 97 (addVar -> .)
    FOR             reduce using rule 97 (addVar -> .)
    WHILE           reduce using rule 97 (addVar -> .)
    IF              reduce using rule 97 (addVar -> .)
    RETURN          reduce using rule 97 (addVar -> .)
    RCURLY          reduce using rule 97 (addVar -> .)
    LCURLY          reduce using rule 97 (addVar -> .)

    addVar                         shift and go to state 58

state 53

    (93) var1 -> ID COMMA . var1 addVar
    (92) var1 -> . ID
    (93) var1 -> . ID COMMA var1 addVar
    (94) var1 -> . ID arr
    (95) var1 -> . ID arr COMMA var1 addVar
    (96) var1 -> . empty
    (119) empty -> .

    ID              shift and go to state 44
    SEMMICOLON      reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    INT             reduce using rule 119 (empty -> .)
    CHAR            reduce using rule 119 (empty -> .)
    FLOAT           reduce using rule 119 (empty -> .)

    var1                           shift and go to state 59
    empty                          shift and go to state 45

state 54

    (94) var1 -> ID arr .
    (95) var1 -> ID arr . COMMA var1 addVar

    SEMMICOLON      reduce using rule 94 (var1 -> ID arr .)
    RPAREN          reduce using rule 94 (var1 -> ID arr .)
    INT             reduce using rule 94 (var1 -> ID arr .)
    CHAR            reduce using rule 94 (var1 -> ID arr .)
    FLOAT           reduce using rule 94 (var1 -> ID arr .)
    COMMA           shift and go to state 60


state 55

    (102) arr -> LBRACKET . CTEI RBRACKET
    (103) arr -> LBRACKET . exp RBRACKET
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    CTEI            shift and go to state 61
    ID              shift and go to state 69
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)

    exp                            shift and go to state 62
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 56

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)

    statements                     shift and go to state 76
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 57

    (109) functions1 -> ID saveFunction LPAREN . args RPAREN vars LCURLY statements RCURLY
    (112) args -> . args type TWOPOINTS var1 addVar
    (113) args -> . empty
    (119) empty -> .

    RPAREN          reduce using rule 119 (empty -> .)
    INT             reduce using rule 119 (empty -> .)
    CHAR            reduce using rule 119 (empty -> .)
    FLOAT           reduce using rule 119 (empty -> .)

    args                           shift and go to state 93
    empty                          shift and go to state 94

state 58

    (90) var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .

    INT             reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    CHAR            reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FLOAT           reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FUNCTION        reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    PRINCIPAL       reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    $end            reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    ID              reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    READ            reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WRITE           reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FOR             reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WHILE           reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    IF              reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RETURN          reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RCURLY          reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    LCURLY          reduce using rule 90 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)


state 59

    (93) var1 -> ID COMMA var1 . addVar
    (97) addVar -> .

    SEMMICOLON      reduce using rule 97 (addVar -> .)
    RPAREN          reduce using rule 97 (addVar -> .)
    INT             reduce using rule 97 (addVar -> .)
    CHAR            reduce using rule 97 (addVar -> .)
    FLOAT           reduce using rule 97 (addVar -> .)

    addVar                         shift and go to state 95

state 60

    (95) var1 -> ID arr COMMA . var1 addVar
    (92) var1 -> . ID
    (93) var1 -> . ID COMMA var1 addVar
    (94) var1 -> . ID arr
    (95) var1 -> . ID arr COMMA var1 addVar
    (96) var1 -> . empty
    (119) empty -> .

    ID              shift and go to state 44
    SEMMICOLON      reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    INT             reduce using rule 119 (empty -> .)
    CHAR            reduce using rule 119 (empty -> .)
    FLOAT           reduce using rule 119 (empty -> .)

    var1                           shift and go to state 96
    empty                          shift and go to state 45

state 61

    (102) arr -> LBRACKET CTEI . RBRACKET
    (77) pexp -> CTEI . saveCTE
    (85) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 97
    MUL             reduce using rule 85 (saveCTE -> .)
    DIV             reduce using rule 85 (saveCTE -> .)
    PLUS            reduce using rule 85 (saveCTE -> .)
    MINUS           reduce using rule 85 (saveCTE -> .)
    GT              reduce using rule 85 (saveCTE -> .)
    LT              reduce using rule 85 (saveCTE -> .)
    GTE             reduce using rule 85 (saveCTE -> .)
    LTE             reduce using rule 85 (saveCTE -> .)
    NE              reduce using rule 85 (saveCTE -> .)
    AND             reduce using rule 85 (saveCTE -> .)
    OR              reduce using rule 85 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 85 (saveCTE -> .) ]

    saveCTE                        shift and go to state 98

state 62

    (103) arr -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 99


state 63

    (54) exp -> nexp . generateQuadOR
    (55) exp -> nexp . generateQuadOR OR saveOperator nexp
    (56) generateQuadOR -> .

    OR              reduce using rule 56 (generateQuadOR -> .)
    RBRACKET        reduce using rule 56 (generateQuadOR -> .)
    RPAREN          reduce using rule 56 (generateQuadOR -> .)
    COMMA           reduce using rule 56 (generateQuadOR -> .)
    SEMMICOLON      reduce using rule 56 (generateQuadOR -> .)
    TO              reduce using rule 56 (generateQuadOR -> .)

    generateQuadOR                 shift and go to state 100

state 64

    (57) nexp -> compexp . generateQuadAND
    (58) nexp -> compexp . generateQuadAND AND saveOperator compexp
    (59) generateQuadAND -> .

    AND             reduce using rule 59 (generateQuadAND -> .)
    OR              reduce using rule 59 (generateQuadAND -> .)
    RBRACKET        reduce using rule 59 (generateQuadAND -> .)
    RPAREN          reduce using rule 59 (generateQuadAND -> .)
    COMMA           reduce using rule 59 (generateQuadAND -> .)
    SEMMICOLON      reduce using rule 59 (generateQuadAND -> .)
    TO              reduce using rule 59 (generateQuadAND -> .)

    generateQuadAND                shift and go to state 101

state 65

    (60) compexp -> sumexp .
    (62) compexp1 -> sumexp . GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> sumexp . LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> sumexp . GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> sumexp . LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> sumexp . NE saveOperator sumexp generateQuadCOMPARE

    AND             reduce using rule 60 (compexp -> sumexp .)
    OR              reduce using rule 60 (compexp -> sumexp .)
    RBRACKET        reduce using rule 60 (compexp -> sumexp .)
    RPAREN          reduce using rule 60 (compexp -> sumexp .)
    COMMA           reduce using rule 60 (compexp -> sumexp .)
    SEMMICOLON      reduce using rule 60 (compexp -> sumexp .)
    TO              reduce using rule 60 (compexp -> sumexp .)
    GT              shift and go to state 102
    LT              shift and go to state 103
    GTE             shift and go to state 104
    LTE             shift and go to state 105
    NE              shift and go to state 106


state 66

    (61) compexp -> compexp1 . sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

    sumexp                         shift and go to state 107
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 67

    (68) sumexp -> mulexp .
    (69) sumexp -> mulexp . PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> mulexp . MINUS saveOperator mulexp generateQuadSUM

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 68 (sumexp -> mulexp .)
    LT              reduce using rule 68 (sumexp -> mulexp .)
    GTE             reduce using rule 68 (sumexp -> mulexp .)
    LTE             reduce using rule 68 (sumexp -> mulexp .)
    NE              reduce using rule 68 (sumexp -> mulexp .)
    AND             reduce using rule 68 (sumexp -> mulexp .)
    OR              reduce using rule 68 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 68 (sumexp -> mulexp .)
    RPAREN          reduce using rule 68 (sumexp -> mulexp .)
    COMMA           reduce using rule 68 (sumexp -> mulexp .)
    SEMMICOLON      reduce using rule 68 (sumexp -> mulexp .)
    TO              reduce using rule 68 (sumexp -> mulexp .)
    ID              reduce using rule 68 (sumexp -> mulexp .)
    CTEI            reduce using rule 68 (sumexp -> mulexp .)
    CTEF            reduce using rule 68 (sumexp -> mulexp .)
    CTEC            reduce using rule 68 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 68 (sumexp -> mulexp .)
    LPAREN          reduce using rule 68 (sumexp -> mulexp .)
    MUL             reduce using rule 68 (sumexp -> mulexp .)
    DIV             reduce using rule 68 (sumexp -> mulexp .)
    PLUS            shift and go to state 109
    MINUS           shift and go to state 110

  ! PLUS            [ reduce using rule 68 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 68 (sumexp -> mulexp .) ]


state 68

    (72) mulexp -> pexp .
    (73) mulexp -> pexp . MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> pexp . DIV saveOperator pexp generateQuadMUL

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 72 (mulexp -> pexp .)
    MINUS           reduce using rule 72 (mulexp -> pexp .)
    GT              reduce using rule 72 (mulexp -> pexp .)
    LT              reduce using rule 72 (mulexp -> pexp .)
    GTE             reduce using rule 72 (mulexp -> pexp .)
    LTE             reduce using rule 72 (mulexp -> pexp .)
    NE              reduce using rule 72 (mulexp -> pexp .)
    AND             reduce using rule 72 (mulexp -> pexp .)
    OR              reduce using rule 72 (mulexp -> pexp .)
    RBRACKET        reduce using rule 72 (mulexp -> pexp .)
    RPAREN          reduce using rule 72 (mulexp -> pexp .)
    COMMA           reduce using rule 72 (mulexp -> pexp .)
    SEMMICOLON      reduce using rule 72 (mulexp -> pexp .)
    TO              reduce using rule 72 (mulexp -> pexp .)
    ID              reduce using rule 72 (mulexp -> pexp .)
    CTEI            reduce using rule 72 (mulexp -> pexp .)
    CTEF            reduce using rule 72 (mulexp -> pexp .)
    CTEC            reduce using rule 72 (mulexp -> pexp .)
    CTESTRING       reduce using rule 72 (mulexp -> pexp .)
    LPAREN          reduce using rule 72 (mulexp -> pexp .)
    MUL             shift and go to state 111
    DIV             shift and go to state 112

  ! MUL             [ reduce using rule 72 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 72 (mulexp -> pexp .) ]


state 69

    (76) pexp -> ID . add_id2
    (83) pexp -> ID . arr add_id3
    (25) functionCall -> ID . LPAREN exp RPAREN
    (23) add_id2 -> .
    (102) arr -> . LBRACKET CTEI RBRACKET
    (103) arr -> . LBRACKET exp RBRACKET

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 115
    MUL             reduce using rule 23 (add_id2 -> .)
    DIV             reduce using rule 23 (add_id2 -> .)
    PLUS            reduce using rule 23 (add_id2 -> .)
    MINUS           reduce using rule 23 (add_id2 -> .)
    GT              reduce using rule 23 (add_id2 -> .)
    LT              reduce using rule 23 (add_id2 -> .)
    GTE             reduce using rule 23 (add_id2 -> .)
    LTE             reduce using rule 23 (add_id2 -> .)
    NE              reduce using rule 23 (add_id2 -> .)
    AND             reduce using rule 23 (add_id2 -> .)
    OR              reduce using rule 23 (add_id2 -> .)
    RBRACKET        reduce using rule 23 (add_id2 -> .)
    RPAREN          reduce using rule 23 (add_id2 -> .)
    COMMA           reduce using rule 23 (add_id2 -> .)
    SEMMICOLON      reduce using rule 23 (add_id2 -> .)
    TO              reduce using rule 23 (add_id2 -> .)
    ID              reduce using rule 23 (add_id2 -> .)
    CTEI            reduce using rule 23 (add_id2 -> .)
    CTEF            reduce using rule 23 (add_id2 -> .)
    CTEC            reduce using rule 23 (add_id2 -> .)
    CTESTRING       reduce using rule 23 (add_id2 -> .)
    LBRACKET        shift and go to state 55

  ! LPAREN          [ reduce using rule 23 (add_id2 -> .) ]

    add_id2                        shift and go to state 113
    arr                            shift and go to state 114

state 70

    (78) pexp -> CTEF . saveCTE
    (85) saveCTE -> .

    MUL             reduce using rule 85 (saveCTE -> .)
    DIV             reduce using rule 85 (saveCTE -> .)
    PLUS            reduce using rule 85 (saveCTE -> .)
    MINUS           reduce using rule 85 (saveCTE -> .)
    GT              reduce using rule 85 (saveCTE -> .)
    LT              reduce using rule 85 (saveCTE -> .)
    GTE             reduce using rule 85 (saveCTE -> .)
    LTE             reduce using rule 85 (saveCTE -> .)
    NE              reduce using rule 85 (saveCTE -> .)
    AND             reduce using rule 85 (saveCTE -> .)
    OR              reduce using rule 85 (saveCTE -> .)
    RBRACKET        reduce using rule 85 (saveCTE -> .)
    RPAREN          reduce using rule 85 (saveCTE -> .)
    COMMA           reduce using rule 85 (saveCTE -> .)
    SEMMICOLON      reduce using rule 85 (saveCTE -> .)
    TO              reduce using rule 85 (saveCTE -> .)
    ID              reduce using rule 85 (saveCTE -> .)
    CTEI            reduce using rule 85 (saveCTE -> .)
    CTEF            reduce using rule 85 (saveCTE -> .)
    CTEC            reduce using rule 85 (saveCTE -> .)
    CTESTRING       reduce using rule 85 (saveCTE -> .)
    LPAREN          reduce using rule 85 (saveCTE -> .)

    saveCTE                        shift and go to state 116

state 71

    (79) pexp -> CTEC . saveCTE
    (85) saveCTE -> .

    MUL             reduce using rule 85 (saveCTE -> .)
    DIV             reduce using rule 85 (saveCTE -> .)
    PLUS            reduce using rule 85 (saveCTE -> .)
    MINUS           reduce using rule 85 (saveCTE -> .)
    GT              reduce using rule 85 (saveCTE -> .)
    LT              reduce using rule 85 (saveCTE -> .)
    GTE             reduce using rule 85 (saveCTE -> .)
    LTE             reduce using rule 85 (saveCTE -> .)
    NE              reduce using rule 85 (saveCTE -> .)
    AND             reduce using rule 85 (saveCTE -> .)
    OR              reduce using rule 85 (saveCTE -> .)
    RBRACKET        reduce using rule 85 (saveCTE -> .)
    RPAREN          reduce using rule 85 (saveCTE -> .)
    COMMA           reduce using rule 85 (saveCTE -> .)
    SEMMICOLON      reduce using rule 85 (saveCTE -> .)
    TO              reduce using rule 85 (saveCTE -> .)
    ID              reduce using rule 85 (saveCTE -> .)
    CTEI            reduce using rule 85 (saveCTE -> .)
    CTEF            reduce using rule 85 (saveCTE -> .)
    CTEC            reduce using rule 85 (saveCTE -> .)
    CTESTRING       reduce using rule 85 (saveCTE -> .)
    LPAREN          reduce using rule 85 (saveCTE -> .)

    saveCTE                        shift and go to state 117

state 72

    (80) pexp -> CTESTRING . saveCTE
    (85) saveCTE -> .

    MUL             reduce using rule 85 (saveCTE -> .)
    DIV             reduce using rule 85 (saveCTE -> .)
    PLUS            reduce using rule 85 (saveCTE -> .)
    MINUS           reduce using rule 85 (saveCTE -> .)
    GT              reduce using rule 85 (saveCTE -> .)
    LT              reduce using rule 85 (saveCTE -> .)
    GTE             reduce using rule 85 (saveCTE -> .)
    LTE             reduce using rule 85 (saveCTE -> .)
    NE              reduce using rule 85 (saveCTE -> .)
    AND             reduce using rule 85 (saveCTE -> .)
    OR              reduce using rule 85 (saveCTE -> .)
    RBRACKET        reduce using rule 85 (saveCTE -> .)
    RPAREN          reduce using rule 85 (saveCTE -> .)
    COMMA           reduce using rule 85 (saveCTE -> .)
    SEMMICOLON      reduce using rule 85 (saveCTE -> .)
    TO              reduce using rule 85 (saveCTE -> .)
    ID              reduce using rule 85 (saveCTE -> .)
    CTEI            reduce using rule 85 (saveCTE -> .)
    CTEF            reduce using rule 85 (saveCTE -> .)
    CTEC            reduce using rule 85 (saveCTE -> .)
    CTESTRING       reduce using rule 85 (saveCTE -> .)
    LPAREN          reduce using rule 85 (saveCTE -> .)

    saveCTE                        shift and go to state 118

state 73

    (81) pexp -> functionCall .

    MUL             reduce using rule 81 (pexp -> functionCall .)
    DIV             reduce using rule 81 (pexp -> functionCall .)
    PLUS            reduce using rule 81 (pexp -> functionCall .)
    MINUS           reduce using rule 81 (pexp -> functionCall .)
    GT              reduce using rule 81 (pexp -> functionCall .)
    LT              reduce using rule 81 (pexp -> functionCall .)
    GTE             reduce using rule 81 (pexp -> functionCall .)
    LTE             reduce using rule 81 (pexp -> functionCall .)
    NE              reduce using rule 81 (pexp -> functionCall .)
    AND             reduce using rule 81 (pexp -> functionCall .)
    OR              reduce using rule 81 (pexp -> functionCall .)
    RBRACKET        reduce using rule 81 (pexp -> functionCall .)
    RPAREN          reduce using rule 81 (pexp -> functionCall .)
    COMMA           reduce using rule 81 (pexp -> functionCall .)
    SEMMICOLON      reduce using rule 81 (pexp -> functionCall .)
    TO              reduce using rule 81 (pexp -> functionCall .)
    ID              reduce using rule 81 (pexp -> functionCall .)
    CTEI            reduce using rule 81 (pexp -> functionCall .)
    CTEF            reduce using rule 81 (pexp -> functionCall .)
    CTEC            reduce using rule 81 (pexp -> functionCall .)
    CTESTRING       reduce using rule 81 (pexp -> functionCall .)
    LPAREN          reduce using rule 81 (pexp -> functionCall .)


state 74

    (82) pexp -> LPAREN . exp RPAREN
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)

    exp                            shift and go to state 119
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 75

    (84) pexp -> empty .

    MUL             reduce using rule 84 (pexp -> empty .)
    DIV             reduce using rule 84 (pexp -> empty .)
    PLUS            reduce using rule 84 (pexp -> empty .)
    MINUS           reduce using rule 84 (pexp -> empty .)
    GT              reduce using rule 84 (pexp -> empty .)
    LT              reduce using rule 84 (pexp -> empty .)
    GTE             reduce using rule 84 (pexp -> empty .)
    LTE             reduce using rule 84 (pexp -> empty .)
    NE              reduce using rule 84 (pexp -> empty .)
    AND             reduce using rule 84 (pexp -> empty .)
    OR              reduce using rule 84 (pexp -> empty .)
    RBRACKET        reduce using rule 84 (pexp -> empty .)
    RPAREN          reduce using rule 84 (pexp -> empty .)
    COMMA           reduce using rule 84 (pexp -> empty .)
    SEMMICOLON      reduce using rule 84 (pexp -> empty .)
    TO              reduce using rule 84 (pexp -> empty .)
    ID              reduce using rule 84 (pexp -> empty .)
    CTEI            reduce using rule 84 (pexp -> empty .)
    CTEF            reduce using rule 84 (pexp -> empty .)
    CTEC            reduce using rule 84 (pexp -> empty .)
    CTESTRING       reduce using rule 84 (pexp -> empty .)
    LPAREN          reduce using rule 84 (pexp -> empty .)


state 76

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements . RCURLY

    RCURLY          shift and go to state 120


state 77

    (10) statements -> assign . SEMMICOLON statements

    SEMMICOLON      shift and go to state 121


state 78

    (11) statements -> functionCall . SEMMICOLON statements

    SEMMICOLON      shift and go to state 122


state 79

    (12) statements -> read . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    SEMMICOLON      reduce using rule 119 (empty -> .)

    read                           shift and go to state 79
    statements                     shift and go to state 123
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 80

    (13) statements -> write . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    SEMMICOLON      reduce using rule 119 (empty -> .)

    write                          shift and go to state 80
    statements                     shift and go to state 124
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 81

    (14) statements -> for . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    for                            shift and go to state 81
    statements                     shift and go to state 125
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 82

    (15) statements -> while . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    while                          shift and go to state 82
    statements                     shift and go to state 126
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 83

    (16) statements -> if . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    if                             shift and go to state 83
    statements                     shift and go to state 127
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 84

    (17) statements -> return . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    return                         shift and go to state 84
    statements                     shift and go to state 128
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    empty                          shift and go to state 85

state 85

    (18) statements -> empty .

    RCURLY          reduce using rule 18 (statements -> empty .)
    SEMMICOLON      reduce using rule 18 (statements -> empty .)


state 86

    (19) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> ID . add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> ID . LPAREN exp RPAREN
    (23) add_id2 -> .

    LPAREN          shift and go to state 115
    EQUALS          reduce using rule 23 (add_id2 -> .)
    LBRACKET        reduce using rule 23 (add_id2 -> .)

    add_id2                        shift and go to state 129

state 87

    (27) read -> READ . operatorRead LPAREN paramReadAux RPAREN
    (32) operatorRead -> .

    LPAREN          reduce using rule 32 (operatorRead -> .)

    operatorRead                   shift and go to state 130

state 88

    (34) write -> WRITE . writeOperator LPAREN paramWrite RPAREN
    (39) writeOperator -> .

    LPAREN          reduce using rule 39 (writeOperator -> .)

    writeOperator                  shift and go to state 131

state 89

    (42) for -> FOR . forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (43) forOP -> .

    ID              reduce using rule 43 (forOP -> .)

    forOP                          shift and go to state 132

state 90

    (45) while -> WHILE . whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (46) whileOP -> .

    LPAREN          reduce using rule 46 (whileOP -> .)

    whileOP                        shift and go to state 133

state 91

    (48) if -> IF . LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    LPAREN          shift and go to state 134


state 92

    (117) return -> RETURN . LPAREN exp RPAREN SEMMICOLON
    (118) return -> RETURN . LPAREN exp RPAREN

    LPAREN          shift and go to state 135


state 93

    (109) functions1 -> ID saveFunction LPAREN args . RPAREN vars LCURLY statements RCURLY
    (112) args -> args . type TWOPOINTS var1 addVar
    (99) type -> . INT saveTypeVar
    (100) type -> . CHAR saveTypeVar
    (101) type -> . FLOAT saveTypeVar

    RPAREN          shift and go to state 136
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    FLOAT           shift and go to state 24

    type                           shift and go to state 137

state 94

    (113) args -> empty .

    RPAREN          reduce using rule 113 (args -> empty .)
    INT             reduce using rule 113 (args -> empty .)
    CHAR            reduce using rule 113 (args -> empty .)
    FLOAT           reduce using rule 113 (args -> empty .)


state 95

    (93) var1 -> ID COMMA var1 addVar .

    SEMMICOLON      reduce using rule 93 (var1 -> ID COMMA var1 addVar .)
    RPAREN          reduce using rule 93 (var1 -> ID COMMA var1 addVar .)
    INT             reduce using rule 93 (var1 -> ID COMMA var1 addVar .)
    CHAR            reduce using rule 93 (var1 -> ID COMMA var1 addVar .)
    FLOAT           reduce using rule 93 (var1 -> ID COMMA var1 addVar .)


state 96

    (95) var1 -> ID arr COMMA var1 . addVar
    (97) addVar -> .

    SEMMICOLON      reduce using rule 97 (addVar -> .)
    RPAREN          reduce using rule 97 (addVar -> .)
    INT             reduce using rule 97 (addVar -> .)
    CHAR            reduce using rule 97 (addVar -> .)
    FLOAT           reduce using rule 97 (addVar -> .)

    addVar                         shift and go to state 138

state 97

    (102) arr -> LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    SEMMICOLON      reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 102 (arr -> LBRACKET CTEI RBRACKET .)


state 98

    (77) pexp -> CTEI saveCTE .

    MUL             reduce using rule 77 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 77 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 77 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 77 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 77 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 77 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 77 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 77 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 77 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 77 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 77 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 77 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 77 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 77 (pexp -> CTEI saveCTE .)
    SEMMICOLON      reduce using rule 77 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 77 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 77 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 77 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 77 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 77 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 77 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 77 (pexp -> CTEI saveCTE .)


state 99

    (103) arr -> LBRACKET exp RBRACKET .

    COMMA           reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    SEMMICOLON      reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 103 (arr -> LBRACKET exp RBRACKET .)


state 100

    (54) exp -> nexp generateQuadOR .
    (55) exp -> nexp generateQuadOR . OR saveOperator nexp

    RBRACKET        reduce using rule 54 (exp -> nexp generateQuadOR .)
    RPAREN          reduce using rule 54 (exp -> nexp generateQuadOR .)
    COMMA           reduce using rule 54 (exp -> nexp generateQuadOR .)
    SEMMICOLON      reduce using rule 54 (exp -> nexp generateQuadOR .)
    TO              reduce using rule 54 (exp -> nexp generateQuadOR .)
    OR              shift and go to state 139


state 101

    (57) nexp -> compexp generateQuadAND .
    (58) nexp -> compexp generateQuadAND . AND saveOperator compexp

    OR              reduce using rule 57 (nexp -> compexp generateQuadAND .)
    RBRACKET        reduce using rule 57 (nexp -> compexp generateQuadAND .)
    RPAREN          reduce using rule 57 (nexp -> compexp generateQuadAND .)
    COMMA           reduce using rule 57 (nexp -> compexp generateQuadAND .)
    SEMMICOLON      reduce using rule 57 (nexp -> compexp generateQuadAND .)
    TO              reduce using rule 57 (nexp -> compexp generateQuadAND .)
    AND             shift and go to state 140


state 102

    (62) compexp1 -> sumexp GT . saveOperator sumexp generateQuadCOMPARE
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 141

state 103

    (63) compexp1 -> sumexp LT . saveOperator sumexp generateQuadCOMPARE
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 142

state 104

    (64) compexp1 -> sumexp GTE . saveOperator sumexp generateQuadCOMPARE
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 143

state 105

    (65) compexp1 -> sumexp LTE . saveOperator sumexp generateQuadCOMPARE
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 144

state 106

    (66) compexp1 -> sumexp NE . saveOperator sumexp generateQuadCOMPARE
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 145

state 107

    (61) compexp -> compexp1 sumexp .

    AND             reduce using rule 61 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 61 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 61 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 61 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 61 (compexp -> compexp1 sumexp .)
    SEMMICOLON      reduce using rule 61 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 61 (compexp -> compexp1 sumexp .)


state 108

    (77) pexp -> CTEI . saveCTE
    (85) saveCTE -> .

    MUL             reduce using rule 85 (saveCTE -> .)
    DIV             reduce using rule 85 (saveCTE -> .)
    PLUS            reduce using rule 85 (saveCTE -> .)
    MINUS           reduce using rule 85 (saveCTE -> .)
    AND             reduce using rule 85 (saveCTE -> .)
    OR              reduce using rule 85 (saveCTE -> .)
    RBRACKET        reduce using rule 85 (saveCTE -> .)
    RPAREN          reduce using rule 85 (saveCTE -> .)
    COMMA           reduce using rule 85 (saveCTE -> .)
    SEMMICOLON      reduce using rule 85 (saveCTE -> .)
    TO              reduce using rule 85 (saveCTE -> .)
    GT              reduce using rule 85 (saveCTE -> .)
    LT              reduce using rule 85 (saveCTE -> .)
    GTE             reduce using rule 85 (saveCTE -> .)
    LTE             reduce using rule 85 (saveCTE -> .)
    NE              reduce using rule 85 (saveCTE -> .)
    ID              reduce using rule 85 (saveCTE -> .)
    CTEI            reduce using rule 85 (saveCTE -> .)
    CTEF            reduce using rule 85 (saveCTE -> .)
    CTEC            reduce using rule 85 (saveCTE -> .)
    CTESTRING       reduce using rule 85 (saveCTE -> .)
    LPAREN          reduce using rule 85 (saveCTE -> .)

    saveCTE                        shift and go to state 98

state 109

    (69) sumexp -> mulexp PLUS . saveOperator mulexp generateQuadSUM
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    GT              reduce using rule 86 (saveOperator -> .)
    LT              reduce using rule 86 (saveOperator -> .)
    GTE             reduce using rule 86 (saveOperator -> .)
    LTE             reduce using rule 86 (saveOperator -> .)
    NE              reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 146

state 110

    (70) sumexp -> mulexp MINUS . saveOperator mulexp generateQuadSUM
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    GT              reduce using rule 86 (saveOperator -> .)
    LT              reduce using rule 86 (saveOperator -> .)
    GTE             reduce using rule 86 (saveOperator -> .)
    LTE             reduce using rule 86 (saveOperator -> .)
    NE              reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 147

state 111

    (73) mulexp -> pexp MUL . saveOperator pexp generateQuadMUL
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    GT              reduce using rule 86 (saveOperator -> .)
    LT              reduce using rule 86 (saveOperator -> .)
    GTE             reduce using rule 86 (saveOperator -> .)
    LTE             reduce using rule 86 (saveOperator -> .)
    NE              reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 148

state 112

    (74) mulexp -> pexp DIV . saveOperator pexp generateQuadMUL
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    GT              reduce using rule 86 (saveOperator -> .)
    LT              reduce using rule 86 (saveOperator -> .)
    GTE             reduce using rule 86 (saveOperator -> .)
    LTE             reduce using rule 86 (saveOperator -> .)
    NE              reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 149

state 113

    (76) pexp -> ID add_id2 .

    MUL             reduce using rule 76 (pexp -> ID add_id2 .)
    DIV             reduce using rule 76 (pexp -> ID add_id2 .)
    PLUS            reduce using rule 76 (pexp -> ID add_id2 .)
    MINUS           reduce using rule 76 (pexp -> ID add_id2 .)
    GT              reduce using rule 76 (pexp -> ID add_id2 .)
    LT              reduce using rule 76 (pexp -> ID add_id2 .)
    GTE             reduce using rule 76 (pexp -> ID add_id2 .)
    LTE             reduce using rule 76 (pexp -> ID add_id2 .)
    NE              reduce using rule 76 (pexp -> ID add_id2 .)
    AND             reduce using rule 76 (pexp -> ID add_id2 .)
    OR              reduce using rule 76 (pexp -> ID add_id2 .)
    RBRACKET        reduce using rule 76 (pexp -> ID add_id2 .)
    RPAREN          reduce using rule 76 (pexp -> ID add_id2 .)
    COMMA           reduce using rule 76 (pexp -> ID add_id2 .)
    SEMMICOLON      reduce using rule 76 (pexp -> ID add_id2 .)
    TO              reduce using rule 76 (pexp -> ID add_id2 .)
    ID              reduce using rule 76 (pexp -> ID add_id2 .)
    CTEI            reduce using rule 76 (pexp -> ID add_id2 .)
    CTEF            reduce using rule 76 (pexp -> ID add_id2 .)
    CTEC            reduce using rule 76 (pexp -> ID add_id2 .)
    CTESTRING       reduce using rule 76 (pexp -> ID add_id2 .)
    LPAREN          reduce using rule 76 (pexp -> ID add_id2 .)


state 114

    (83) pexp -> ID arr . add_id3
    (24) add_id3 -> .

    MUL             reduce using rule 24 (add_id3 -> .)
    DIV             reduce using rule 24 (add_id3 -> .)
    PLUS            reduce using rule 24 (add_id3 -> .)
    MINUS           reduce using rule 24 (add_id3 -> .)
    GT              reduce using rule 24 (add_id3 -> .)
    LT              reduce using rule 24 (add_id3 -> .)
    GTE             reduce using rule 24 (add_id3 -> .)
    LTE             reduce using rule 24 (add_id3 -> .)
    NE              reduce using rule 24 (add_id3 -> .)
    AND             reduce using rule 24 (add_id3 -> .)
    OR              reduce using rule 24 (add_id3 -> .)
    RBRACKET        reduce using rule 24 (add_id3 -> .)
    RPAREN          reduce using rule 24 (add_id3 -> .)
    COMMA           reduce using rule 24 (add_id3 -> .)
    SEMMICOLON      reduce using rule 24 (add_id3 -> .)
    TO              reduce using rule 24 (add_id3 -> .)
    ID              reduce using rule 24 (add_id3 -> .)
    CTEI            reduce using rule 24 (add_id3 -> .)
    CTEF            reduce using rule 24 (add_id3 -> .)
    CTEC            reduce using rule 24 (add_id3 -> .)
    CTESTRING       reduce using rule 24 (add_id3 -> .)
    LPAREN          reduce using rule 24 (add_id3 -> .)

    add_id3                        shift and go to state 150

state 115

    (25) functionCall -> ID LPAREN . exp RPAREN
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)

    exp                            shift and go to state 151
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 116

    (78) pexp -> CTEF saveCTE .

    MUL             reduce using rule 78 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 78 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 78 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 78 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 78 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 78 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 78 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 78 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 78 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 78 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 78 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 78 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 78 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 78 (pexp -> CTEF saveCTE .)
    SEMMICOLON      reduce using rule 78 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 78 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 78 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 78 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 78 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 78 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 78 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 78 (pexp -> CTEF saveCTE .)


state 117

    (79) pexp -> CTEC saveCTE .

    MUL             reduce using rule 79 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 79 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 79 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 79 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 79 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 79 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 79 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 79 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 79 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 79 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 79 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 79 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 79 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 79 (pexp -> CTEC saveCTE .)
    SEMMICOLON      reduce using rule 79 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 79 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 79 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 79 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 79 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 79 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 79 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 79 (pexp -> CTEC saveCTE .)


state 118

    (80) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    SEMMICOLON      reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 80 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 80 (pexp -> CTESTRING saveCTE .)


state 119

    (82) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 152


state 120

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .

    $end            reduce using rule 7 (principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .)


state 121

    (10) statements -> assign SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    assign                         shift and go to state 77
    statements                     shift and go to state 153
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 122

    (11) statements -> functionCall SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    functionCall                   shift and go to state 78
    statements                     shift and go to state 154
    assign                         shift and go to state 77
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 123

    (12) statements -> read statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 155


state 124

    (13) statements -> write statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 156


state 125

    (14) statements -> for statements .

    RCURLY          reduce using rule 14 (statements -> for statements .)
    SEMMICOLON      reduce using rule 14 (statements -> for statements .)


state 126

    (15) statements -> while statements .

    RCURLY          reduce using rule 15 (statements -> while statements .)
    SEMMICOLON      reduce using rule 15 (statements -> while statements .)


state 127

    (16) statements -> if statements .

    RCURLY          reduce using rule 16 (statements -> if statements .)
    SEMMICOLON      reduce using rule 16 (statements -> if statements .)


state 128

    (17) statements -> return statements .

    RCURLY          reduce using rule 17 (statements -> return statements .)
    SEMMICOLON      reduce using rule 17 (statements -> return statements .)


state 129

    (19) assign -> ID add_id2 . EQUALS saveOperator exp generateAssignQuad
    (20) assign -> ID add_id2 . arr EQUALS saveOperator exp generateAssignQuad
    (102) arr -> . LBRACKET CTEI RBRACKET
    (103) arr -> . LBRACKET exp RBRACKET

    EQUALS          shift and go to state 157
    LBRACKET        shift and go to state 55

    arr                            shift and go to state 158

state 130

    (27) read -> READ operatorRead . LPAREN paramReadAux RPAREN

    LPAREN          shift and go to state 159


state 131

    (34) write -> WRITE writeOperator . LPAREN paramWrite RPAREN

    LPAREN          shift and go to state 160


state 132

    (42) for -> FOR forOP . assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad

    ID              shift and go to state 162

    assign                         shift and go to state 161

state 133

    (45) while -> WHILE whileOP . LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    LPAREN          shift and go to state 163


state 134

    (48) if -> IF LPAREN . exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)

    exp                            shift and go to state 164
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 135

    (117) return -> RETURN LPAREN . exp RPAREN SEMMICOLON
    (118) return -> RETURN LPAREN . exp RPAREN
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)

    exp                            shift and go to state 165
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 136

    (109) functions1 -> ID saveFunction LPAREN args RPAREN . vars LCURLY statements RCURLY
    (87) vars -> . var
    (88) vars -> . empty
    (89) var -> . VARS var2
    (119) empty -> .

    VARS            shift and go to state 12
    LCURLY          reduce using rule 119 (empty -> .)

    vars                           shift and go to state 166
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 137

    (112) args -> args type . TWOPOINTS var1 addVar

    TWOPOINTS       shift and go to state 167


state 138

    (95) var1 -> ID arr COMMA var1 addVar .

    SEMMICOLON      reduce using rule 95 (var1 -> ID arr COMMA var1 addVar .)
    RPAREN          reduce using rule 95 (var1 -> ID arr COMMA var1 addVar .)
    INT             reduce using rule 95 (var1 -> ID arr COMMA var1 addVar .)
    CHAR            reduce using rule 95 (var1 -> ID arr COMMA var1 addVar .)
    FLOAT           reduce using rule 95 (var1 -> ID arr COMMA var1 addVar .)


state 139

    (55) exp -> nexp generateQuadOR OR . saveOperator nexp
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    GT              reduce using rule 86 (saveOperator -> .)
    LT              reduce using rule 86 (saveOperator -> .)
    GTE             reduce using rule 86 (saveOperator -> .)
    LTE             reduce using rule 86 (saveOperator -> .)
    NE              reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 168

state 140

    (58) nexp -> compexp generateQuadAND AND . saveOperator compexp
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    GT              reduce using rule 86 (saveOperator -> .)
    LT              reduce using rule 86 (saveOperator -> .)
    GTE             reduce using rule 86 (saveOperator -> .)
    LTE             reduce using rule 86 (saveOperator -> .)
    NE              reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    RBRACKET        reduce using rule 86 (saveOperator -> .)
    RPAREN          reduce using rule 86 (saveOperator -> .)
    COMMA           reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 169

state 141

    (62) compexp1 -> sumexp GT saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    sumexp                         shift and go to state 170
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 142

    (63) compexp1 -> sumexp LT saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    sumexp                         shift and go to state 171
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 143

    (64) compexp1 -> sumexp GTE saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    sumexp                         shift and go to state 172
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 144

    (65) compexp1 -> sumexp LTE saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    sumexp                         shift and go to state 173
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 145

    (66) compexp1 -> sumexp NE saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    sumexp                         shift and go to state 174
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 146

    (69) sumexp -> mulexp PLUS saveOperator . mulexp generateQuadSUM
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    mulexp                         shift and go to state 175
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 147

    (70) sumexp -> mulexp MINUS saveOperator . mulexp generateQuadSUM
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    mulexp                         shift and go to state 176
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 148

    (73) mulexp -> pexp MUL saveOperator . pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    pexp                           shift and go to state 177
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 149

    (74) mulexp -> pexp DIV saveOperator . pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)

  ! ID              [ reduce using rule 119 (empty -> .) ]
  ! CTEI            [ reduce using rule 119 (empty -> .) ]
  ! CTEF            [ reduce using rule 119 (empty -> .) ]
  ! CTEC            [ reduce using rule 119 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 119 (empty -> .) ]
  ! LPAREN          [ reduce using rule 119 (empty -> .) ]

    pexp                           shift and go to state 178
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 150

    (83) pexp -> ID arr add_id3 .

    MUL             reduce using rule 83 (pexp -> ID arr add_id3 .)
    DIV             reduce using rule 83 (pexp -> ID arr add_id3 .)
    PLUS            reduce using rule 83 (pexp -> ID arr add_id3 .)
    MINUS           reduce using rule 83 (pexp -> ID arr add_id3 .)
    GT              reduce using rule 83 (pexp -> ID arr add_id3 .)
    LT              reduce using rule 83 (pexp -> ID arr add_id3 .)
    GTE             reduce using rule 83 (pexp -> ID arr add_id3 .)
    LTE             reduce using rule 83 (pexp -> ID arr add_id3 .)
    NE              reduce using rule 83 (pexp -> ID arr add_id3 .)
    AND             reduce using rule 83 (pexp -> ID arr add_id3 .)
    OR              reduce using rule 83 (pexp -> ID arr add_id3 .)
    RBRACKET        reduce using rule 83 (pexp -> ID arr add_id3 .)
    RPAREN          reduce using rule 83 (pexp -> ID arr add_id3 .)
    COMMA           reduce using rule 83 (pexp -> ID arr add_id3 .)
    SEMMICOLON      reduce using rule 83 (pexp -> ID arr add_id3 .)
    TO              reduce using rule 83 (pexp -> ID arr add_id3 .)
    ID              reduce using rule 83 (pexp -> ID arr add_id3 .)
    CTEI            reduce using rule 83 (pexp -> ID arr add_id3 .)
    CTEF            reduce using rule 83 (pexp -> ID arr add_id3 .)
    CTEC            reduce using rule 83 (pexp -> ID arr add_id3 .)
    CTESTRING       reduce using rule 83 (pexp -> ID arr add_id3 .)
    LPAREN          reduce using rule 83 (pexp -> ID arr add_id3 .)


state 151

    (25) functionCall -> ID LPAREN exp . RPAREN

    RPAREN          shift and go to state 179


state 152

    (82) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    SEMMICOLON      reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 82 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 82 (pexp -> LPAREN exp RPAREN .)


state 153

    (10) statements -> assign SEMMICOLON statements .

    RCURLY          reduce using rule 10 (statements -> assign SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 10 (statements -> assign SEMMICOLON statements .)


state 154

    (11) statements -> functionCall SEMMICOLON statements .

    RCURLY          reduce using rule 11 (statements -> functionCall SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 11 (statements -> functionCall SEMMICOLON statements .)


state 155

    (12) statements -> read statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    read                           shift and go to state 79
    statements                     shift and go to state 180
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 156

    (13) statements -> write statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    write                          shift and go to state 80
    statements                     shift and go to state 181
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 157

    (19) assign -> ID add_id2 EQUALS . saveOperator exp generateAssignQuad
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    GT              reduce using rule 86 (saveOperator -> .)
    LT              reduce using rule 86 (saveOperator -> .)
    GTE             reduce using rule 86 (saveOperator -> .)
    LTE             reduce using rule 86 (saveOperator -> .)
    NE              reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 182

state 158

    (20) assign -> ID add_id2 arr . EQUALS saveOperator exp generateAssignQuad

    EQUALS          shift and go to state 183


state 159

    (27) read -> READ operatorRead LPAREN . paramReadAux RPAREN
    (30) paramReadAux -> . exp generateQuadREAD
    (31) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)

    paramReadAux                   shift and go to state 184
    exp                            shift and go to state 185
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 160

    (34) write -> WRITE writeOperator LPAREN . paramWrite RPAREN
    (35) paramWrite -> . paramWriteAux
    (36) paramWrite -> . empty
    (37) paramWriteAux -> . exp generateQuadPRINT
    (38) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (119) empty -> .
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN

    RPAREN          reduce using rule 119 (empty -> .)
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    paramWrite                     shift and go to state 186
    paramWriteAux                  shift and go to state 187
    empty                          shift and go to state 188
    exp                            shift and go to state 189
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 161

    (42) for -> FOR forOP assign . TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    TO              shift and go to state 190


state 162

    (19) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> ID . add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (23) add_id2 -> .

    EQUALS          reduce using rule 23 (add_id2 -> .)
    LBRACKET        reduce using rule 23 (add_id2 -> .)

    add_id2                        shift and go to state 129

state 163

    (45) while -> WHILE whileOP LPAREN . exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)

    exp                            shift and go to state 191
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 164

    (48) if -> IF LPAREN exp . RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    RPAREN          shift and go to state 192


state 165

    (117) return -> RETURN LPAREN exp . RPAREN SEMMICOLON
    (118) return -> RETURN LPAREN exp . RPAREN

    RPAREN          shift and go to state 193


state 166

    (109) functions1 -> ID saveFunction LPAREN args RPAREN vars . LCURLY statements RCURLY

    LCURLY          shift and go to state 194


state 167

    (112) args -> args type TWOPOINTS . var1 addVar
    (92) var1 -> . ID
    (93) var1 -> . ID COMMA var1 addVar
    (94) var1 -> . ID arr
    (95) var1 -> . ID arr COMMA var1 addVar
    (96) var1 -> . empty
    (119) empty -> .

    ID              shift and go to state 44
    RPAREN          reduce using rule 119 (empty -> .)
    INT             reduce using rule 119 (empty -> .)
    CHAR            reduce using rule 119 (empty -> .)
    FLOAT           reduce using rule 119 (empty -> .)

    var1                           shift and go to state 195
    empty                          shift and go to state 45

state 168

    (55) exp -> nexp generateQuadOR OR saveOperator . nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

    nexp                           shift and go to state 196
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 169

    (58) nexp -> compexp generateQuadAND AND saveOperator . compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    RBRACKET        reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

    compexp                        shift and go to state 197
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 170

    (62) compexp1 -> sumexp GT saveOperator sumexp . generateQuadCOMPARE
    (67) generateQuadCOMPARE -> .

    ID              reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 67 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 67 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 67 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 67 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 67 (generateQuadCOMPARE -> .)
    AND             reduce using rule 67 (generateQuadCOMPARE -> .)
    OR              reduce using rule 67 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 67 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 67 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 67 (generateQuadCOMPARE -> .)
    TO              reduce using rule 67 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 198

state 171

    (63) compexp1 -> sumexp LT saveOperator sumexp . generateQuadCOMPARE
    (67) generateQuadCOMPARE -> .

    ID              reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 67 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 67 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 67 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 67 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 67 (generateQuadCOMPARE -> .)
    AND             reduce using rule 67 (generateQuadCOMPARE -> .)
    OR              reduce using rule 67 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 67 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 67 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 67 (generateQuadCOMPARE -> .)
    TO              reduce using rule 67 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 199

state 172

    (64) compexp1 -> sumexp GTE saveOperator sumexp . generateQuadCOMPARE
    (67) generateQuadCOMPARE -> .

    ID              reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 67 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 67 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 67 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 67 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 67 (generateQuadCOMPARE -> .)
    AND             reduce using rule 67 (generateQuadCOMPARE -> .)
    OR              reduce using rule 67 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 67 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 67 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 67 (generateQuadCOMPARE -> .)
    TO              reduce using rule 67 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 200

state 173

    (65) compexp1 -> sumexp LTE saveOperator sumexp . generateQuadCOMPARE
    (67) generateQuadCOMPARE -> .

    ID              reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 67 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 67 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 67 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 67 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 67 (generateQuadCOMPARE -> .)
    AND             reduce using rule 67 (generateQuadCOMPARE -> .)
    OR              reduce using rule 67 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 67 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 67 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 67 (generateQuadCOMPARE -> .)
    TO              reduce using rule 67 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 201

state 174

    (66) compexp1 -> sumexp NE saveOperator sumexp . generateQuadCOMPARE
    (67) generateQuadCOMPARE -> .

    ID              reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 67 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 67 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 67 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 67 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 67 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 67 (generateQuadCOMPARE -> .)
    AND             reduce using rule 67 (generateQuadCOMPARE -> .)
    OR              reduce using rule 67 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 67 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 67 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 67 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 67 (generateQuadCOMPARE -> .)
    TO              reduce using rule 67 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 202

state 175

    (69) sumexp -> mulexp PLUS saveOperator mulexp . generateQuadSUM
    (71) generateQuadSUM -> .

    GT              reduce using rule 71 (generateQuadSUM -> .)
    LT              reduce using rule 71 (generateQuadSUM -> .)
    GTE             reduce using rule 71 (generateQuadSUM -> .)
    LTE             reduce using rule 71 (generateQuadSUM -> .)
    NE              reduce using rule 71 (generateQuadSUM -> .)
    AND             reduce using rule 71 (generateQuadSUM -> .)
    OR              reduce using rule 71 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 71 (generateQuadSUM -> .)
    RPAREN          reduce using rule 71 (generateQuadSUM -> .)
    COMMA           reduce using rule 71 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 71 (generateQuadSUM -> .)
    TO              reduce using rule 71 (generateQuadSUM -> .)
    ID              reduce using rule 71 (generateQuadSUM -> .)
    CTEI            reduce using rule 71 (generateQuadSUM -> .)
    CTEF            reduce using rule 71 (generateQuadSUM -> .)
    CTEC            reduce using rule 71 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 71 (generateQuadSUM -> .)
    LPAREN          reduce using rule 71 (generateQuadSUM -> .)
    PLUS            reduce using rule 71 (generateQuadSUM -> .)
    MINUS           reduce using rule 71 (generateQuadSUM -> .)
    MUL             reduce using rule 71 (generateQuadSUM -> .)
    DIV             reduce using rule 71 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 203

state 176

    (70) sumexp -> mulexp MINUS saveOperator mulexp . generateQuadSUM
    (71) generateQuadSUM -> .

    GT              reduce using rule 71 (generateQuadSUM -> .)
    LT              reduce using rule 71 (generateQuadSUM -> .)
    GTE             reduce using rule 71 (generateQuadSUM -> .)
    LTE             reduce using rule 71 (generateQuadSUM -> .)
    NE              reduce using rule 71 (generateQuadSUM -> .)
    AND             reduce using rule 71 (generateQuadSUM -> .)
    OR              reduce using rule 71 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 71 (generateQuadSUM -> .)
    RPAREN          reduce using rule 71 (generateQuadSUM -> .)
    COMMA           reduce using rule 71 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 71 (generateQuadSUM -> .)
    TO              reduce using rule 71 (generateQuadSUM -> .)
    ID              reduce using rule 71 (generateQuadSUM -> .)
    CTEI            reduce using rule 71 (generateQuadSUM -> .)
    CTEF            reduce using rule 71 (generateQuadSUM -> .)
    CTEC            reduce using rule 71 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 71 (generateQuadSUM -> .)
    LPAREN          reduce using rule 71 (generateQuadSUM -> .)
    PLUS            reduce using rule 71 (generateQuadSUM -> .)
    MINUS           reduce using rule 71 (generateQuadSUM -> .)
    MUL             reduce using rule 71 (generateQuadSUM -> .)
    DIV             reduce using rule 71 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 204

state 177

    (73) mulexp -> pexp MUL saveOperator pexp . generateQuadMUL
    (75) generateQuadMUL -> .

    PLUS            reduce using rule 75 (generateQuadMUL -> .)
    MINUS           reduce using rule 75 (generateQuadMUL -> .)
    GT              reduce using rule 75 (generateQuadMUL -> .)
    LT              reduce using rule 75 (generateQuadMUL -> .)
    GTE             reduce using rule 75 (generateQuadMUL -> .)
    LTE             reduce using rule 75 (generateQuadMUL -> .)
    NE              reduce using rule 75 (generateQuadMUL -> .)
    AND             reduce using rule 75 (generateQuadMUL -> .)
    OR              reduce using rule 75 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 75 (generateQuadMUL -> .)
    RPAREN          reduce using rule 75 (generateQuadMUL -> .)
    COMMA           reduce using rule 75 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 75 (generateQuadMUL -> .)
    TO              reduce using rule 75 (generateQuadMUL -> .)
    ID              reduce using rule 75 (generateQuadMUL -> .)
    CTEI            reduce using rule 75 (generateQuadMUL -> .)
    CTEF            reduce using rule 75 (generateQuadMUL -> .)
    CTEC            reduce using rule 75 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 75 (generateQuadMUL -> .)
    LPAREN          reduce using rule 75 (generateQuadMUL -> .)
    MUL             reduce using rule 75 (generateQuadMUL -> .)
    DIV             reduce using rule 75 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 205

state 178

    (74) mulexp -> pexp DIV saveOperator pexp . generateQuadMUL
    (75) generateQuadMUL -> .

    PLUS            reduce using rule 75 (generateQuadMUL -> .)
    MINUS           reduce using rule 75 (generateQuadMUL -> .)
    GT              reduce using rule 75 (generateQuadMUL -> .)
    LT              reduce using rule 75 (generateQuadMUL -> .)
    GTE             reduce using rule 75 (generateQuadMUL -> .)
    LTE             reduce using rule 75 (generateQuadMUL -> .)
    NE              reduce using rule 75 (generateQuadMUL -> .)
    AND             reduce using rule 75 (generateQuadMUL -> .)
    OR              reduce using rule 75 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 75 (generateQuadMUL -> .)
    RPAREN          reduce using rule 75 (generateQuadMUL -> .)
    COMMA           reduce using rule 75 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 75 (generateQuadMUL -> .)
    TO              reduce using rule 75 (generateQuadMUL -> .)
    ID              reduce using rule 75 (generateQuadMUL -> .)
    CTEI            reduce using rule 75 (generateQuadMUL -> .)
    CTEF            reduce using rule 75 (generateQuadMUL -> .)
    CTEC            reduce using rule 75 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 75 (generateQuadMUL -> .)
    LPAREN          reduce using rule 75 (generateQuadMUL -> .)
    MUL             reduce using rule 75 (generateQuadMUL -> .)
    DIV             reduce using rule 75 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 206

state 179

    (25) functionCall -> ID LPAREN exp RPAREN .

    MUL             reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    DIV             reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    PLUS            reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    MINUS           reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    GT              reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    LT              reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    GTE             reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    LTE             reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    NE              reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    AND             reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    OR              reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    SEMMICOLON      reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    RPAREN          reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    COMMA           reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    TO              reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    ID              reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    CTEI            reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    CTEF            reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    CTEC            reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)
    LPAREN          reduce using rule 25 (functionCall -> ID LPAREN exp RPAREN .)


state 180

    (12) statements -> read statements SEMMICOLON statements .

    RCURLY          reduce using rule 12 (statements -> read statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 12 (statements -> read statements SEMMICOLON statements .)


state 181

    (13) statements -> write statements SEMMICOLON statements .

    RCURLY          reduce using rule 13 (statements -> write statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 13 (statements -> write statements SEMMICOLON statements .)


state 182

    (19) assign -> ID add_id2 EQUALS saveOperator . exp generateAssignQuad
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

    exp                            shift and go to state 207
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 183

    (20) assign -> ID add_id2 arr EQUALS . saveOperator exp generateAssignQuad
    (86) saveOperator -> .

    ID              reduce using rule 86 (saveOperator -> .)
    CTEI            reduce using rule 86 (saveOperator -> .)
    CTEF            reduce using rule 86 (saveOperator -> .)
    CTEC            reduce using rule 86 (saveOperator -> .)
    CTESTRING       reduce using rule 86 (saveOperator -> .)
    LPAREN          reduce using rule 86 (saveOperator -> .)
    OR              reduce using rule 86 (saveOperator -> .)
    AND             reduce using rule 86 (saveOperator -> .)
    GT              reduce using rule 86 (saveOperator -> .)
    LT              reduce using rule 86 (saveOperator -> .)
    GTE             reduce using rule 86 (saveOperator -> .)
    LTE             reduce using rule 86 (saveOperator -> .)
    NE              reduce using rule 86 (saveOperator -> .)
    PLUS            reduce using rule 86 (saveOperator -> .)
    MINUS           reduce using rule 86 (saveOperator -> .)
    MUL             reduce using rule 86 (saveOperator -> .)
    DIV             reduce using rule 86 (saveOperator -> .)
    SEMMICOLON      reduce using rule 86 (saveOperator -> .)
    TO              reduce using rule 86 (saveOperator -> .)

    saveOperator                   shift and go to state 208

state 184

    (27) read -> READ operatorRead LPAREN paramReadAux . RPAREN

    RPAREN          shift and go to state 209


state 185

    (30) paramReadAux -> exp . generateQuadREAD
    (31) paramReadAux -> exp . generateQuadREAD COMMA operatorRead paramReadAux
    (33) generateQuadREAD -> .

    COMMA           reduce using rule 33 (generateQuadREAD -> .)
    RPAREN          reduce using rule 33 (generateQuadREAD -> .)

    generateQuadREAD               shift and go to state 210

state 186

    (34) write -> WRITE writeOperator LPAREN paramWrite . RPAREN

    RPAREN          shift and go to state 211


state 187

    (35) paramWrite -> paramWriteAux .

    RPAREN          reduce using rule 35 (paramWrite -> paramWriteAux .)


state 188

    (36) paramWrite -> empty .
    (84) pexp -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 36 (paramWrite -> empty .)
    RPAREN          reduce using rule 36 (paramWrite -> empty .)
    MUL             reduce using rule 84 (pexp -> empty .)
    DIV             reduce using rule 84 (pexp -> empty .)
    PLUS            reduce using rule 84 (pexp -> empty .)
    MINUS           reduce using rule 84 (pexp -> empty .)
    GT              reduce using rule 84 (pexp -> empty .)
    LT              reduce using rule 84 (pexp -> empty .)
    GTE             reduce using rule 84 (pexp -> empty .)
    LTE             reduce using rule 84 (pexp -> empty .)
    NE              reduce using rule 84 (pexp -> empty .)
    AND             reduce using rule 84 (pexp -> empty .)
    OR              reduce using rule 84 (pexp -> empty .)
    COMMA           reduce using rule 84 (pexp -> empty .)

  ! RPAREN          [ reduce using rule 84 (pexp -> empty .) ]


state 189

    (37) paramWriteAux -> exp . generateQuadPRINT
    (38) paramWriteAux -> exp . generateQuadPRINT COMMA writeOperator paramWriteAux
    (40) generateQuadPRINT -> .

    COMMA           reduce using rule 40 (generateQuadPRINT -> .)
    RPAREN          reduce using rule 40 (generateQuadPRINT -> .)

    generateQuadPRINT              shift and go to state 212

state 190

    (42) for -> FOR forOP assign TO . CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    CTEI            shift and go to state 213


state 191

    (45) while -> WHILE whileOP LPAREN exp . RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    RPAREN          shift and go to state 214


state 192

    (48) if -> IF LPAREN exp RPAREN . generateQuadIF THEN LCURLY statements RCURLY else endIF
    (51) generateQuadIF -> .

    THEN            reduce using rule 51 (generateQuadIF -> .)

    generateQuadIF                 shift and go to state 215

state 193

    (117) return -> RETURN LPAREN exp RPAREN . SEMMICOLON
    (118) return -> RETURN LPAREN exp RPAREN .

  ! shift/reduce conflict for SEMMICOLON resolved as shift
    SEMMICOLON      shift and go to state 216
    ID              reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .)
    READ            reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .)
    WRITE           reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .)
    FOR             reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .)
    WHILE           reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .)
    IF              reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .)
    RETURN          reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .)
    RCURLY          reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .)

  ! SEMMICOLON      [ reduce using rule 118 (return -> RETURN LPAREN exp RPAREN .) ]


state 194

    (109) functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)

    statements                     shift and go to state 217
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 195

    (112) args -> args type TWOPOINTS var1 . addVar
    (97) addVar -> .

    RPAREN          reduce using rule 97 (addVar -> .)
    INT             reduce using rule 97 (addVar -> .)
    CHAR            reduce using rule 97 (addVar -> .)
    FLOAT           reduce using rule 97 (addVar -> .)

    addVar                         shift and go to state 218

state 196

    (55) exp -> nexp generateQuadOR OR saveOperator nexp .

    RBRACKET        reduce using rule 55 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    RPAREN          reduce using rule 55 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    COMMA           reduce using rule 55 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    SEMMICOLON      reduce using rule 55 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    TO              reduce using rule 55 (exp -> nexp generateQuadOR OR saveOperator nexp .)


state 197

    (58) nexp -> compexp generateQuadAND AND saveOperator compexp .

    OR              reduce using rule 58 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RBRACKET        reduce using rule 58 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RPAREN          reduce using rule 58 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    COMMA           reduce using rule 58 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    SEMMICOLON      reduce using rule 58 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    TO              reduce using rule 58 (nexp -> compexp generateQuadAND AND saveOperator compexp .)


state 198

    (62) compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 62 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)


state 199

    (63) compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 63 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)


state 200

    (64) compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 64 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)


state 201

    (65) compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 65 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)


state 202

    (66) compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 66 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)


state 203

    (69) sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    PLUS            reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    MINUS           reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    MUL             reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    DIV             reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)


state 204

    (70) sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    PLUS            reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    MINUS           reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    MUL             reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    DIV             reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)


state 205

    (73) mulexp -> pexp MUL saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MUL             reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    DIV             reduce using rule 73 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)


state 206

    (74) mulexp -> pexp DIV saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MUL             reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    DIV             reduce using rule 74 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)


state 207

    (19) assign -> ID add_id2 EQUALS saveOperator exp . generateAssignQuad
    (21) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 21 (generateAssignQuad -> .)
    TO              reduce using rule 21 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 219

state 208

    (20) assign -> ID add_id2 arr EQUALS saveOperator . exp generateAssignQuad
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)
    TO              reduce using rule 119 (empty -> .)

    exp                            shift and go to state 220
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 209

    (27) read -> READ operatorRead LPAREN paramReadAux RPAREN .

    ID              reduce using rule 27 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    READ            reduce using rule 27 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    WRITE           reduce using rule 27 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    FOR             reduce using rule 27 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    WHILE           reduce using rule 27 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    IF              reduce using rule 27 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    RETURN          reduce using rule 27 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    SEMMICOLON      reduce using rule 27 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)


state 210

    (30) paramReadAux -> exp generateQuadREAD .
    (31) paramReadAux -> exp generateQuadREAD . COMMA operatorRead paramReadAux

    RPAREN          reduce using rule 30 (paramReadAux -> exp generateQuadREAD .)
    COMMA           shift and go to state 221


state 211

    (34) write -> WRITE writeOperator LPAREN paramWrite RPAREN .

    ID              reduce using rule 34 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    READ            reduce using rule 34 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WRITE           reduce using rule 34 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    FOR             reduce using rule 34 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WHILE           reduce using rule 34 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    IF              reduce using rule 34 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    RETURN          reduce using rule 34 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    SEMMICOLON      reduce using rule 34 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)


state 212

    (37) paramWriteAux -> exp generateQuadPRINT .
    (38) paramWriteAux -> exp generateQuadPRINT . COMMA writeOperator paramWriteAux

    RPAREN          reduce using rule 37 (paramWriteAux -> exp generateQuadPRINT .)
    COMMA           shift and go to state 222


state 213

    (42) for -> FOR forOP assign TO CTEI . DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 223


state 214

    (45) while -> WHILE whileOP LPAREN exp RPAREN . DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 224


state 215

    (48) if -> IF LPAREN exp RPAREN generateQuadIF . THEN LCURLY statements RCURLY else endIF

    THEN            shift and go to state 225


state 216

    (117) return -> RETURN LPAREN exp RPAREN SEMMICOLON .

    ID              reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    READ            reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    WRITE           reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    FOR             reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    WHILE           reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    IF              reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    RETURN          reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    RCURLY          reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    SEMMICOLON      reduce using rule 117 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)


state 217

    (109) functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements . RCURLY

    RCURLY          shift and go to state 226


state 218

    (112) args -> args type TWOPOINTS var1 addVar .

    RPAREN          reduce using rule 112 (args -> args type TWOPOINTS var1 addVar .)
    INT             reduce using rule 112 (args -> args type TWOPOINTS var1 addVar .)
    CHAR            reduce using rule 112 (args -> args type TWOPOINTS var1 addVar .)
    FLOAT           reduce using rule 112 (args -> args type TWOPOINTS var1 addVar .)


state 219

    (19) assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 19 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 19 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)


state 220

    (20) assign -> ID add_id2 arr EQUALS saveOperator exp . generateAssignQuad
    (21) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 21 (generateAssignQuad -> .)
    TO              reduce using rule 21 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 227

state 221

    (31) paramReadAux -> exp generateQuadREAD COMMA . operatorRead paramReadAux
    (32) operatorRead -> .

    ID              reduce using rule 32 (operatorRead -> .)
    CTEI            reduce using rule 32 (operatorRead -> .)
    CTEF            reduce using rule 32 (operatorRead -> .)
    CTEC            reduce using rule 32 (operatorRead -> .)
    CTESTRING       reduce using rule 32 (operatorRead -> .)
    LPAREN          reduce using rule 32 (operatorRead -> .)
    COMMA           reduce using rule 32 (operatorRead -> .)
    OR              reduce using rule 32 (operatorRead -> .)
    AND             reduce using rule 32 (operatorRead -> .)
    GT              reduce using rule 32 (operatorRead -> .)
    LT              reduce using rule 32 (operatorRead -> .)
    GTE             reduce using rule 32 (operatorRead -> .)
    LTE             reduce using rule 32 (operatorRead -> .)
    NE              reduce using rule 32 (operatorRead -> .)
    PLUS            reduce using rule 32 (operatorRead -> .)
    MINUS           reduce using rule 32 (operatorRead -> .)
    MUL             reduce using rule 32 (operatorRead -> .)
    DIV             reduce using rule 32 (operatorRead -> .)
    RPAREN          reduce using rule 32 (operatorRead -> .)

    operatorRead                   shift and go to state 228

state 222

    (38) paramWriteAux -> exp generateQuadPRINT COMMA . writeOperator paramWriteAux
    (39) writeOperator -> .

    ID              reduce using rule 39 (writeOperator -> .)
    CTEI            reduce using rule 39 (writeOperator -> .)
    CTEF            reduce using rule 39 (writeOperator -> .)
    CTEC            reduce using rule 39 (writeOperator -> .)
    CTESTRING       reduce using rule 39 (writeOperator -> .)
    LPAREN          reduce using rule 39 (writeOperator -> .)
    COMMA           reduce using rule 39 (writeOperator -> .)
    OR              reduce using rule 39 (writeOperator -> .)
    AND             reduce using rule 39 (writeOperator -> .)
    GT              reduce using rule 39 (writeOperator -> .)
    LT              reduce using rule 39 (writeOperator -> .)
    GTE             reduce using rule 39 (writeOperator -> .)
    LTE             reduce using rule 39 (writeOperator -> .)
    NE              reduce using rule 39 (writeOperator -> .)
    PLUS            reduce using rule 39 (writeOperator -> .)
    MINUS           reduce using rule 39 (writeOperator -> .)
    MUL             reduce using rule 39 (writeOperator -> .)
    DIV             reduce using rule 39 (writeOperator -> .)
    RPAREN          reduce using rule 39 (writeOperator -> .)

    writeOperator                  shift and go to state 229

state 223

    (42) for -> FOR forOP assign TO CTEI DO . generateQuadFOR LCURLY statements RCURLY LoopEnd
    (44) generateQuadFOR -> .

    LCURLY          reduce using rule 44 (generateQuadFOR -> .)

    generateQuadFOR                shift and go to state 230

state 224

    (45) while -> WHILE whileOP LPAREN exp RPAREN DO . generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (47) generateQuadWHILE -> .

    LCURLY          reduce using rule 47 (generateQuadWHILE -> .)

    generateQuadWHILE              shift and go to state 231

state 225

    (48) if -> IF LPAREN exp RPAREN generateQuadIF THEN . LCURLY statements RCURLY else endIF

    LCURLY          shift and go to state 232


state 226

    (109) functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY .

    FUNCTION        reduce using rule 109 (functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY .)
    PRINCIPAL       reduce using rule 109 (functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY .)
    $end            reduce using rule 109 (functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY .)


state 227

    (20) assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 20 (assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 20 (assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .)


state 228

    (31) paramReadAux -> exp generateQuadREAD COMMA operatorRead . paramReadAux
    (30) paramReadAux -> . exp generateQuadREAD
    (31) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)

    exp                            shift and go to state 185
    paramReadAux                   shift and go to state 233
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 229

    (38) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator . paramWriteAux
    (37) paramWriteAux -> . exp generateQuadPRINT
    (38) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (54) exp -> . nexp generateQuadOR
    (55) exp -> . nexp generateQuadOR OR saveOperator nexp
    (57) nexp -> . compexp generateQuadAND
    (58) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (60) compexp -> . sumexp
    (61) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (62) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (63) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (72) mulexp -> . pexp
    (73) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (74) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (76) pexp -> . ID add_id2
    (77) pexp -> . CTEI saveCTE
    (78) pexp -> . CTEF saveCTE
    (79) pexp -> . CTEC saveCTE
    (80) pexp -> . CTESTRING saveCTE
    (81) pexp -> . functionCall
    (82) pexp -> . LPAREN exp RPAREN
    (83) pexp -> . ID arr add_id3
    (84) pexp -> . empty
    (25) functionCall -> . ID LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 69
    CTEI            shift and go to state 108
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74
    MUL             reduce using rule 119 (empty -> .)
    DIV             reduce using rule 119 (empty -> .)
    PLUS            reduce using rule 119 (empty -> .)
    MINUS           reduce using rule 119 (empty -> .)
    GT              reduce using rule 119 (empty -> .)
    LT              reduce using rule 119 (empty -> .)
    GTE             reduce using rule 119 (empty -> .)
    LTE             reduce using rule 119 (empty -> .)
    NE              reduce using rule 119 (empty -> .)
    AND             reduce using rule 119 (empty -> .)
    OR              reduce using rule 119 (empty -> .)
    COMMA           reduce using rule 119 (empty -> .)
    RPAREN          reduce using rule 119 (empty -> .)

    exp                            shift and go to state 189
    paramWriteAux                  shift and go to state 234
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73
    empty                          shift and go to state 75

state 230

    (42) for -> FOR forOP assign TO CTEI DO generateQuadFOR . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 235


state 231

    (45) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 236


state 232

    (48) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY . statements RCURLY else endIF
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)

    statements                     shift and go to state 237
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 233

    (31) paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .

    RPAREN          reduce using rule 31 (paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .)


state 234

    (38) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .

    RPAREN          reduce using rule 38 (paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .)


state 235

    (42) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY . statements RCURLY LoopEnd
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)

    assign                         shift and go to state 77
    statements                     shift and go to state 238
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 236

    (45) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY . statements RCURLY LoopEnd
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)

    statements                     shift and go to state 239
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 237

    (48) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements . RCURLY else endIF

    RCURLY          shift and go to state 240


state 238

    (42) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 241


state 239

    (45) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 242


state 240

    (48) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY . else endIF
    (49) else -> . ELSE generateQuadELSE LCURLY statements RCURLY
    (50) else -> . empty
    (119) empty -> .

    ELSE            shift and go to state 244
    ID              reduce using rule 119 (empty -> .)
    READ            reduce using rule 119 (empty -> .)
    WRITE           reduce using rule 119 (empty -> .)
    FOR             reduce using rule 119 (empty -> .)
    WHILE           reduce using rule 119 (empty -> .)
    IF              reduce using rule 119 (empty -> .)
    RETURN          reduce using rule 119 (empty -> .)
    RCURLY          reduce using rule 119 (empty -> .)
    SEMMICOLON      reduce using rule 119 (empty -> .)

    else                           shift and go to state 243
    empty                          shift and go to state 245

state 241

    (42) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY . LoopEnd
    (41) LoopEnd -> .

    ID              reduce using rule 41 (LoopEnd -> .)
    READ            reduce using rule 41 (LoopEnd -> .)
    WRITE           reduce using rule 41 (LoopEnd -> .)
    FOR             reduce using rule 41 (LoopEnd -> .)
    WHILE           reduce using rule 41 (LoopEnd -> .)
    IF              reduce using rule 41 (LoopEnd -> .)
    RETURN          reduce using rule 41 (LoopEnd -> .)
    RCURLY          reduce using rule 41 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 41 (LoopEnd -> .)

    LoopEnd                        shift and go to state 246

state 242

    (45) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY . LoopEnd
    (41) LoopEnd -> .

    ID              reduce using rule 41 (LoopEnd -> .)
    READ            reduce using rule 41 (LoopEnd -> .)
    WRITE           reduce using rule 41 (LoopEnd -> .)
    FOR             reduce using rule 41 (LoopEnd -> .)
    WHILE           reduce using rule 41 (LoopEnd -> .)
    IF              reduce using rule 41 (LoopEnd -> .)
    RETURN          reduce using rule 41 (LoopEnd -> .)
    RCURLY          reduce using rule 41 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 41 (LoopEnd -> .)

    LoopEnd                        shift and go to state 247

state 243

    (48) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else . endIF
    (52) endIF -> .

    ID              reduce using rule 52 (endIF -> .)
    READ            reduce using rule 52 (endIF -> .)
    WRITE           reduce using rule 52 (endIF -> .)
    FOR             reduce using rule 52 (endIF -> .)
    WHILE           reduce using rule 52 (endIF -> .)
    IF              reduce using rule 52 (endIF -> .)
    RETURN          reduce using rule 52 (endIF -> .)
    RCURLY          reduce using rule 52 (endIF -> .)
    SEMMICOLON      reduce using rule 52 (endIF -> .)

    endIF                          shift and go to state 248

state 244

    (49) else -> ELSE . generateQuadELSE LCURLY statements RCURLY
    (53) generateQuadELSE -> .

    LCURLY          reduce using rule 53 (generateQuadELSE -> .)

    generateQuadELSE               shift and go to state 249

state 245

    (50) else -> empty .

    ID              reduce using rule 50 (else -> empty .)
    READ            reduce using rule 50 (else -> empty .)
    WRITE           reduce using rule 50 (else -> empty .)
    FOR             reduce using rule 50 (else -> empty .)
    WHILE           reduce using rule 50 (else -> empty .)
    IF              reduce using rule 50 (else -> empty .)
    RETURN          reduce using rule 50 (else -> empty .)
    RCURLY          reduce using rule 50 (else -> empty .)
    SEMMICOLON      reduce using rule 50 (else -> empty .)


state 246

    (42) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 42 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)


state 247

    (45) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 45 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)


state 248

    (48) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .

    ID              reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    READ            reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WRITE           reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    FOR             reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WHILE           reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    IF              reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RETURN          reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RCURLY          reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    SEMMICOLON      reduce using rule 48 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)


state 249

    (49) else -> ELSE generateQuadELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 250


state 250

    (49) else -> ELSE generateQuadELSE LCURLY . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (25) functionCall -> . ID LPAREN exp RPAREN
    (27) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (34) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (42) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (45) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (48) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (117) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (118) return -> . RETURN LPAREN exp RPAREN
    (119) empty -> .

    ID              shift and go to state 86
    READ            shift and go to state 87
    WRITE           shift and go to state 88
    FOR             shift and go to state 89
    WHILE           shift and go to state 90
    IF              shift and go to state 91
    RETURN          shift and go to state 92
    RCURLY          reduce using rule 119 (empty -> .)

    statements                     shift and go to state 251
    assign                         shift and go to state 77
    functionCall                   shift and go to state 78
    read                           shift and go to state 79
    write                          shift and go to state 80
    for                            shift and go to state 81
    while                          shift and go to state 82
    if                             shift and go to state 83
    return                         shift and go to state 84
    empty                          shift and go to state 85

state 251

    (49) else -> ELSE generateQuadELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 252


state 252

    (49) else -> ELSE generateQuadELSE LCURLY statements RCURLY .

    ID              reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    READ            reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WRITE           reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WHILE           reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    IF              reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    SEMMICOLON      reduce using rule 49 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINCIPAL in state 5 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MUL in state 68 resolved as shift
WARNING: shift/reduce conflict for DIV in state 68 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 141 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 141 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 141 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 141 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 141 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 141 resolved as shift
WARNING: shift/reduce conflict for ID in state 142 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 142 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 142 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 142 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 142 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 142 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 143 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 143 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 143 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 143 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 143 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 144 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 144 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 144 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 144 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 145 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 145 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 145 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 145 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 146 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 146 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 146 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 146 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 146 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 146 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 147 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 147 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 147 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 147 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 148 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 148 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 148 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 148 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 148 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 149 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 149 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 149 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 149 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 149 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 149 resolved as shift
WARNING: shift/reduce conflict for SEMMICOLON in state 193 resolved as shift
WARNING: reduce/reduce conflict in state 188 resolved using rule (paramWrite -> empty)
WARNING: rejected rule (pexp -> empty) in state 188
