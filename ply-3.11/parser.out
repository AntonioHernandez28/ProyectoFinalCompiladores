Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA
    COMPARE
    END
    FROM
    MODA
    PLOTXY
    SIMPLEREGRESSION
    VARIANZA

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMMICOLON addProgram program1
Rule 2     addProgram -> <empty>
Rule 3     program1 -> vars functions program2
Rule 4     program1 -> vars functions
Rule 5     program1 -> program2
Rule 6     program2 -> principal
Rule 7     principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
Rule 8     statements -> assign SEMMICOLON statements
Rule 9     statements -> functionCall SEMMICOLON statements
Rule 10    statements -> read statements SEMMICOLON statements
Rule 11    statements -> write statements SEMMICOLON statements
Rule 12    statements -> for statements
Rule 13    statements -> while statements
Rule 14    statements -> if statements
Rule 15    statements -> return statements
Rule 16    statements -> empty
Rule 17    assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad
Rule 18    assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
Rule 19    generateAssignQuad -> <empty>
Rule 20    add_id -> <empty>
Rule 21    add_id2 -> <empty>
Rule 22    functionCall -> ID LPAREN exp RPAREN
Rule 23    read -> READ operatorRead LPAREN paramRead RPAREN
Rule 24    paramRead -> paramReadAux
Rule 25    paramRead -> empty
Rule 26    paramReadAux -> exp generateQuadREAD
Rule 27    paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux
Rule 28    operatorRead -> <empty>
Rule 29    media -> MEDIA LPAREN arr RPAREN SEMMICOLON
Rule 30    write -> WRITE writeOperator LPAREN paramWrite RPAREN
Rule 31    paramWrite -> paramWriteAux
Rule 32    paramWrite -> empty
Rule 33    paramWriteAux -> exp generateQuadPRINT
Rule 34    paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux
Rule 35    writeOperator -> <empty>
Rule 36    for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
Rule 37    forOP -> <empty>
Rule 38    generateQuadFOR -> <empty>
Rule 39    LoopEnd -> <empty>
Rule 40    while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
Rule 41    whileOP -> <empty>
Rule 42    generateQuadWHILE -> <empty>
Rule 43    if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
Rule 44    else -> ELSE generateQuadELSE LCURLY statements RCURLY
Rule 45    else -> empty
Rule 46    generateQuadOR -> <empty>
Rule 47    generateQuadAND -> <empty>
Rule 48    generateQuadCOMPARE -> <empty>
Rule 49    generateQuadIF -> <empty>
Rule 50    generateQuadSUM -> <empty>
Rule 51    generateQuadMUL -> <empty>
Rule 52    generateQuadPRINT -> <empty>
Rule 53    generateQuadREAD -> <empty>
Rule 54    endIF -> <empty>
Rule 55    generateQuadELSE -> <empty>
Rule 56    saveCTE -> <empty>
Rule 57    exp -> nexp generateQuadOR
Rule 58    exp -> nexp generateQuadOR OR saveOperator nexp
Rule 59    nexp -> compexp generateQuadAND
Rule 60    nexp -> compexp generateQuadAND AND saveOperator compexp
Rule 61    compexp -> sumexp
Rule 62    compexp -> compexp1 sumexp
Rule 63    compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE
Rule 64    compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE
Rule 65    compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE
Rule 66    compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE
Rule 67    compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE
Rule 68    sumexp -> mulexp
Rule 69    sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM
Rule 70    sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM
Rule 71    mulexp -> pexp
Rule 72    mulexp -> pexp MUL saveOperator pexp generateQuadMUL
Rule 73    mulexp -> pexp DIV saveOperator pexp generateQuadMUL
Rule 74    pexp -> ID add_id2
Rule 75    pexp -> CTEI saveCTE
Rule 76    pexp -> CTEF saveCTE
Rule 77    pexp -> CTEC saveCTE
Rule 78    pexp -> CTESTRING saveCTE
Rule 79    pexp -> functionCall
Rule 80    pexp -> LPAREN exp RPAREN
Rule 81    saveOperator -> <empty>
Rule 82    vars -> var
Rule 83    vars -> empty
Rule 84    var -> VARS var2
Rule 85    var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar
Rule 86    var2 -> empty
Rule 87    var1 -> ID
Rule 88    var1 -> ID COMMA var1 addVar
Rule 89    var1 -> ID arr
Rule 90    var1 -> ID arr COMMA var1 addVar
Rule 91    var1 -> empty
Rule 92    addVar -> <empty>
Rule 93    saveTypeVar -> <empty>
Rule 94    type -> INT saveTypeVar
Rule 95    type -> CHAR saveTypeVar
Rule 96    type -> FLOAT saveTypeVar
Rule 97    arr -> LBRACKET CTEI RBRACKET
Rule 98    arr -> LBRACKET exp RBRACKET
Rule 99    functions -> FUNCTION INT functions1 functions
Rule 100   functions -> FUNCTION CHAR functions1 functions
Rule 101   functions -> FUNCTION FLOAT functions1 functions
Rule 102   functions -> FUNCTION VOID functions1 functions
Rule 103   functions -> empty
Rule 104   functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
Rule 105   functions1 -> empty
Rule 106   saveFunction -> <empty>
Rule 107   args -> args type TWOPOINTS var1 addVar
Rule 108   args -> empty
Rule 109   args1 -> ID addVar
Rule 110   args1 -> ID COMMA args1
Rule 111   args1 -> empty
Rule 112   return -> RETURN LPAREN exp RPAREN SEMMICOLON
Rule 113   return -> RETURN LPAREN exp RPAREN
Rule 114   empty -> <empty>

Terminals, with rules where they appear

AND                  : 60
CHAR                 : 95 100
COMILLA              : 
COMMA                : 27 34 88 90 110
COMPARE              : 
CTEC                 : 77
CTEF                 : 76
CTEI                 : 36 75 97
CTESTRING            : 78
DIV                  : 73
DO                   : 36 40
ELSE                 : 44
END                  : 
EQUALS               : 17 18
FLOAT                : 96 101
FOR                  : 36
FROM                 : 
FUNCTION             : 99 100 101 102
GT                   : 63
GTE                  : 65
ID                   : 1 17 18 22 74 87 88 89 90 104 109 110
IF                   : 43
INT                  : 94 99
LBRACKET             : 97 98
LCURLY               : 7 36 40 43 44 104
LPAREN               : 7 22 23 29 30 40 43 80 104 112 113
LT                   : 64
LTE                  : 66
MEDIA                : 29
MINUS                : 70
MODA                 : 
MUL                  : 72
NE                   : 67
OR                   : 58
PLOTXY               : 
PLUS                 : 69
PRINCIPAL            : 7
PROGRAM              : 1
RBRACKET             : 97 98
RCURLY               : 7 36 40 43 44 104
READ                 : 23
RETURN               : 112 113
RPAREN               : 7 22 23 29 30 40 43 80 104 112 113
SEMMICOLON           : 1 8 9 10 11 29 85 112
SIMPLEREGRESSION     : 
THEN                 : 43
TO                   : 36
TWOPOINTS            : 85 107
VARIANZA             : 
VARS                 : 84
VOID                 : 102
WHILE                : 40
WRITE                : 30
error                : 

Nonterminals, with rules where they appear

LoopEnd              : 36 40
addProgram           : 1
addVar               : 85 88 90 107 109
add_id               : 
add_id2              : 17 18 74
args                 : 104 107
args1                : 110
arr                  : 18 29 89 90
assign               : 8 36
compexp              : 59 60 60
compexp1             : 62
else                 : 43
empty                : 16 25 32 45 83 86 91 103 105 108 111
endIF                : 43
exp                  : 17 18 22 26 27 33 34 40 43 80 98 112 113
for                  : 12
forOP                : 36
functionCall         : 9 79
functions            : 3 4 99 100 101 102
functions1           : 99 100 101 102
generateAssignQuad   : 17 18
generateQuadAND      : 59 60
generateQuadCOMPARE  : 63 64 65 66 67
generateQuadELSE     : 44
generateQuadFOR      : 36
generateQuadIF       : 43
generateQuadMUL      : 72 73
generateQuadOR       : 57 58
generateQuadPRINT    : 33 34
generateQuadREAD     : 26 27
generateQuadSUM      : 69 70
generateQuadWHILE    : 40
if                   : 14
media                : 
mulexp               : 68 69 69 70 70
nexp                 : 57 58 58
operatorRead         : 23 27
paramRead            : 23
paramReadAux         : 24 27
paramWrite           : 30
paramWriteAux        : 31 34
pexp                 : 71 72 72 73 73
principal            : 6
program              : 0
program1             : 1
program2             : 3 5
read                 : 10
return               : 15
saveCTE              : 75 76 77 78
saveFunction         : 7 104
saveOperator         : 17 18 58 60 63 64 65 66 67 69 70 72 73
saveTypeVar          : 94 95 96
statements           : 7 8 9 10 10 11 11 12 13 14 15 36 40 43 44 104
sumexp               : 61 62 63 63 64 64 65 65 66 66 67 67
type                 : 85 107
var                  : 82
var1                 : 85 88 90 107
var2                 : 84 85
vars                 : 3 4 7 104
while                : 13
whileOP              : 40
write                : 11
writeOperator        : 30 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMMICOLON addProgram program1

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMMICOLON addProgram program1

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMMICOLON addProgram program1

    SEMMICOLON      shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMMICOLON . addProgram program1
    (2) addProgram -> .

    VARS            reduce using rule 2 (addProgram -> .)
    PRINCIPAL       reduce using rule 2 (addProgram -> .)
    FUNCTION        reduce using rule 2 (addProgram -> .)
    $end            reduce using rule 2 (addProgram -> .)

    addProgram                     shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMMICOLON addProgram . program1
    (3) program1 -> . vars functions program2
    (4) program1 -> . vars functions
    (5) program1 -> . program2
    (82) vars -> . var
    (83) vars -> . empty
    (6) program2 -> . principal
    (84) var -> . VARS var2
    (114) empty -> .
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

  ! shift/reduce conflict for PRINCIPAL resolved as shift
    VARS            shift and go to state 12
    FUNCTION        reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)
    PRINCIPAL       shift and go to state 13

  ! PRINCIPAL       [ reduce using rule 114 (empty -> .) ]

    program1                       shift and go to state 6
    vars                           shift and go to state 7
    program2                       shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    principal                      shift and go to state 11

state 6

    (1) program -> PROGRAM ID SEMMICOLON addProgram program1 .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMMICOLON addProgram program1 .)


state 7

    (3) program1 -> vars . functions program2
    (4) program1 -> vars . functions
    (99) functions -> . FUNCTION INT functions1 functions
    (100) functions -> . FUNCTION CHAR functions1 functions
    (101) functions -> . FUNCTION FLOAT functions1 functions
    (102) functions -> . FUNCTION VOID functions1 functions
    (103) functions -> . empty
    (114) empty -> .

    FUNCTION        shift and go to state 15
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions                      shift and go to state 14
    empty                          shift and go to state 16

state 8

    (5) program1 -> program2 .

    $end            reduce using rule 5 (program1 -> program2 .)


state 9

    (82) vars -> var .

    FUNCTION        reduce using rule 82 (vars -> var .)
    PRINCIPAL       reduce using rule 82 (vars -> var .)
    $end            reduce using rule 82 (vars -> var .)
    ID              reduce using rule 82 (vars -> var .)
    READ            reduce using rule 82 (vars -> var .)
    WRITE           reduce using rule 82 (vars -> var .)
    FOR             reduce using rule 82 (vars -> var .)
    WHILE           reduce using rule 82 (vars -> var .)
    IF              reduce using rule 82 (vars -> var .)
    RETURN          reduce using rule 82 (vars -> var .)
    RCURLY          reduce using rule 82 (vars -> var .)
    LCURLY          reduce using rule 82 (vars -> var .)


state 10

    (83) vars -> empty .

    FUNCTION        reduce using rule 83 (vars -> empty .)
    PRINCIPAL       reduce using rule 83 (vars -> empty .)
    $end            reduce using rule 83 (vars -> empty .)
    ID              reduce using rule 83 (vars -> empty .)
    READ            reduce using rule 83 (vars -> empty .)
    WRITE           reduce using rule 83 (vars -> empty .)
    FOR             reduce using rule 83 (vars -> empty .)
    WHILE           reduce using rule 83 (vars -> empty .)
    IF              reduce using rule 83 (vars -> empty .)
    RETURN          reduce using rule 83 (vars -> empty .)
    RCURLY          reduce using rule 83 (vars -> empty .)
    LCURLY          reduce using rule 83 (vars -> empty .)


state 11

    (6) program2 -> principal .

    $end            reduce using rule 6 (program2 -> principal .)


state 12

    (84) var -> VARS . var2
    (85) var2 -> . var2 type TWOPOINTS var1 SEMMICOLON addVar
    (86) var2 -> . empty
    (114) empty -> .

    INT             reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)
    FUNCTION        reduce using rule 114 (empty -> .)
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)
    ID              reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    RCURLY          reduce using rule 114 (empty -> .)
    LCURLY          reduce using rule 114 (empty -> .)

    var2                           shift and go to state 17
    empty                          shift and go to state 18

state 13

    (7) principal -> PRINCIPAL . saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
    (106) saveFunction -> .

    LPAREN          reduce using rule 106 (saveFunction -> .)

    saveFunction                   shift and go to state 19

state 14

    (3) program1 -> vars functions . program2
    (4) program1 -> vars functions .
    (6) program2 -> . principal
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

    $end            reduce using rule 4 (program1 -> vars functions .)
    PRINCIPAL       shift and go to state 13

    program2                       shift and go to state 20
    principal                      shift and go to state 11

state 15

    (99) functions -> FUNCTION . INT functions1 functions
    (100) functions -> FUNCTION . CHAR functions1 functions
    (101) functions -> FUNCTION . FLOAT functions1 functions
    (102) functions -> FUNCTION . VOID functions1 functions

    INT             shift and go to state 21
    CHAR            shift and go to state 22
    FLOAT           shift and go to state 23
    VOID            shift and go to state 24


state 16

    (103) functions -> empty .

    PRINCIPAL       reduce using rule 103 (functions -> empty .)
    $end            reduce using rule 103 (functions -> empty .)


state 17

    (84) var -> VARS var2 .
    (85) var2 -> var2 . type TWOPOINTS var1 SEMMICOLON addVar
    (94) type -> . INT saveTypeVar
    (95) type -> . CHAR saveTypeVar
    (96) type -> . FLOAT saveTypeVar

    FUNCTION        reduce using rule 84 (var -> VARS var2 .)
    PRINCIPAL       reduce using rule 84 (var -> VARS var2 .)
    $end            reduce using rule 84 (var -> VARS var2 .)
    ID              reduce using rule 84 (var -> VARS var2 .)
    READ            reduce using rule 84 (var -> VARS var2 .)
    WRITE           reduce using rule 84 (var -> VARS var2 .)
    FOR             reduce using rule 84 (var -> VARS var2 .)
    WHILE           reduce using rule 84 (var -> VARS var2 .)
    IF              reduce using rule 84 (var -> VARS var2 .)
    RETURN          reduce using rule 84 (var -> VARS var2 .)
    RCURLY          reduce using rule 84 (var -> VARS var2 .)
    LCURLY          reduce using rule 84 (var -> VARS var2 .)
    INT             shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28

    type                           shift and go to state 25

state 18

    (86) var2 -> empty .

    INT             reduce using rule 86 (var2 -> empty .)
    CHAR            reduce using rule 86 (var2 -> empty .)
    FLOAT           reduce using rule 86 (var2 -> empty .)
    FUNCTION        reduce using rule 86 (var2 -> empty .)
    PRINCIPAL       reduce using rule 86 (var2 -> empty .)
    $end            reduce using rule 86 (var2 -> empty .)
    ID              reduce using rule 86 (var2 -> empty .)
    READ            reduce using rule 86 (var2 -> empty .)
    WRITE           reduce using rule 86 (var2 -> empty .)
    FOR             reduce using rule 86 (var2 -> empty .)
    WHILE           reduce using rule 86 (var2 -> empty .)
    IF              reduce using rule 86 (var2 -> empty .)
    RETURN          reduce using rule 86 (var2 -> empty .)
    RCURLY          reduce using rule 86 (var2 -> empty .)
    LCURLY          reduce using rule 86 (var2 -> empty .)


state 19

    (7) principal -> PRINCIPAL saveFunction . LPAREN RPAREN LCURLY vars statements RCURLY

    LPAREN          shift and go to state 29


state 20

    (3) program1 -> vars functions program2 .

    $end            reduce using rule 3 (program1 -> vars functions program2 .)


state 21

    (99) functions -> FUNCTION INT . functions1 functions
    (104) functions1 -> . ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (105) functions1 -> . empty
    (114) empty -> .

    ID              shift and go to state 31
    FUNCTION        reduce using rule 114 (empty -> .)
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions1                     shift and go to state 30
    empty                          shift and go to state 32

state 22

    (100) functions -> FUNCTION CHAR . functions1 functions
    (104) functions1 -> . ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (105) functions1 -> . empty
    (114) empty -> .

    ID              shift and go to state 31
    FUNCTION        reduce using rule 114 (empty -> .)
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions1                     shift and go to state 33
    empty                          shift and go to state 32

state 23

    (101) functions -> FUNCTION FLOAT . functions1 functions
    (104) functions1 -> . ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (105) functions1 -> . empty
    (114) empty -> .

    ID              shift and go to state 31
    FUNCTION        reduce using rule 114 (empty -> .)
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions1                     shift and go to state 34
    empty                          shift and go to state 32

state 24

    (102) functions -> FUNCTION VOID . functions1 functions
    (104) functions1 -> . ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (105) functions1 -> . empty
    (114) empty -> .

    ID              shift and go to state 31
    FUNCTION        reduce using rule 114 (empty -> .)
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions1                     shift and go to state 35
    empty                          shift and go to state 32

state 25

    (85) var2 -> var2 type . TWOPOINTS var1 SEMMICOLON addVar

    TWOPOINTS       shift and go to state 36


state 26

    (94) type -> INT . saveTypeVar
    (93) saveTypeVar -> .

    TWOPOINTS       reduce using rule 93 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 37

state 27

    (95) type -> CHAR . saveTypeVar
    (93) saveTypeVar -> .

    TWOPOINTS       reduce using rule 93 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 38

state 28

    (96) type -> FLOAT . saveTypeVar
    (93) saveTypeVar -> .

    TWOPOINTS       reduce using rule 93 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 39

state 29

    (7) principal -> PRINCIPAL saveFunction LPAREN . RPAREN LCURLY vars statements RCURLY

    RPAREN          shift and go to state 40


state 30

    (99) functions -> FUNCTION INT functions1 . functions
    (99) functions -> . FUNCTION INT functions1 functions
    (100) functions -> . FUNCTION CHAR functions1 functions
    (101) functions -> . FUNCTION FLOAT functions1 functions
    (102) functions -> . FUNCTION VOID functions1 functions
    (103) functions -> . empty
    (114) empty -> .

    FUNCTION        shift and go to state 15
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions                      shift and go to state 41
    empty                          shift and go to state 16

state 31

    (104) functions1 -> ID . saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY
    (106) saveFunction -> .

    LPAREN          reduce using rule 106 (saveFunction -> .)

    saveFunction                   shift and go to state 42

state 32

    (105) functions1 -> empty .

    FUNCTION        reduce using rule 105 (functions1 -> empty .)
    PRINCIPAL       reduce using rule 105 (functions1 -> empty .)
    $end            reduce using rule 105 (functions1 -> empty .)


state 33

    (100) functions -> FUNCTION CHAR functions1 . functions
    (99) functions -> . FUNCTION INT functions1 functions
    (100) functions -> . FUNCTION CHAR functions1 functions
    (101) functions -> . FUNCTION FLOAT functions1 functions
    (102) functions -> . FUNCTION VOID functions1 functions
    (103) functions -> . empty
    (114) empty -> .

    FUNCTION        shift and go to state 15
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions                      shift and go to state 43
    empty                          shift and go to state 16

state 34

    (101) functions -> FUNCTION FLOAT functions1 . functions
    (99) functions -> . FUNCTION INT functions1 functions
    (100) functions -> . FUNCTION CHAR functions1 functions
    (101) functions -> . FUNCTION FLOAT functions1 functions
    (102) functions -> . FUNCTION VOID functions1 functions
    (103) functions -> . empty
    (114) empty -> .

    FUNCTION        shift and go to state 15
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions                      shift and go to state 44
    empty                          shift and go to state 16

state 35

    (102) functions -> FUNCTION VOID functions1 . functions
    (99) functions -> . FUNCTION INT functions1 functions
    (100) functions -> . FUNCTION CHAR functions1 functions
    (101) functions -> . FUNCTION FLOAT functions1 functions
    (102) functions -> . FUNCTION VOID functions1 functions
    (103) functions -> . empty
    (114) empty -> .

    FUNCTION        shift and go to state 15
    PRINCIPAL       reduce using rule 114 (empty -> .)
    $end            reduce using rule 114 (empty -> .)

    functions                      shift and go to state 45
    empty                          shift and go to state 16

state 36

    (85) var2 -> var2 type TWOPOINTS . var1 SEMMICOLON addVar
    (87) var1 -> . ID
    (88) var1 -> . ID COMMA var1 addVar
    (89) var1 -> . ID arr
    (90) var1 -> . ID arr COMMA var1 addVar
    (91) var1 -> . empty
    (114) empty -> .

    ID              shift and go to state 47
    SEMMICOLON      reduce using rule 114 (empty -> .)

    var1                           shift and go to state 46
    empty                          shift and go to state 48

state 37

    (94) type -> INT saveTypeVar .

    TWOPOINTS       reduce using rule 94 (type -> INT saveTypeVar .)


state 38

    (95) type -> CHAR saveTypeVar .

    TWOPOINTS       reduce using rule 95 (type -> CHAR saveTypeVar .)


state 39

    (96) type -> FLOAT saveTypeVar .

    TWOPOINTS       reduce using rule 96 (type -> FLOAT saveTypeVar .)


state 40

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN . LCURLY vars statements RCURLY

    LCURLY          shift and go to state 49


state 41

    (99) functions -> FUNCTION INT functions1 functions .

    PRINCIPAL       reduce using rule 99 (functions -> FUNCTION INT functions1 functions .)
    $end            reduce using rule 99 (functions -> FUNCTION INT functions1 functions .)


state 42

    (104) functions1 -> ID saveFunction . LPAREN args RPAREN vars LCURLY statements RCURLY

    LPAREN          shift and go to state 50


state 43

    (100) functions -> FUNCTION CHAR functions1 functions .

    PRINCIPAL       reduce using rule 100 (functions -> FUNCTION CHAR functions1 functions .)
    $end            reduce using rule 100 (functions -> FUNCTION CHAR functions1 functions .)


state 44

    (101) functions -> FUNCTION FLOAT functions1 functions .

    PRINCIPAL       reduce using rule 101 (functions -> FUNCTION FLOAT functions1 functions .)
    $end            reduce using rule 101 (functions -> FUNCTION FLOAT functions1 functions .)


state 45

    (102) functions -> FUNCTION VOID functions1 functions .

    PRINCIPAL       reduce using rule 102 (functions -> FUNCTION VOID functions1 functions .)
    $end            reduce using rule 102 (functions -> FUNCTION VOID functions1 functions .)


state 46

    (85) var2 -> var2 type TWOPOINTS var1 . SEMMICOLON addVar

    SEMMICOLON      shift and go to state 51


state 47

    (87) var1 -> ID .
    (88) var1 -> ID . COMMA var1 addVar
    (89) var1 -> ID . arr
    (90) var1 -> ID . arr COMMA var1 addVar
    (97) arr -> . LBRACKET CTEI RBRACKET
    (98) arr -> . LBRACKET exp RBRACKET

    SEMMICOLON      reduce using rule 87 (var1 -> ID .)
    RPAREN          reduce using rule 87 (var1 -> ID .)
    INT             reduce using rule 87 (var1 -> ID .)
    CHAR            reduce using rule 87 (var1 -> ID .)
    FLOAT           reduce using rule 87 (var1 -> ID .)
    COMMA           shift and go to state 52
    LBRACKET        shift and go to state 54

    arr                            shift and go to state 53

state 48

    (91) var1 -> empty .

    SEMMICOLON      reduce using rule 91 (var1 -> empty .)
    RPAREN          reduce using rule 91 (var1 -> empty .)
    INT             reduce using rule 91 (var1 -> empty .)
    CHAR            reduce using rule 91 (var1 -> empty .)
    FLOAT           reduce using rule 91 (var1 -> empty .)


state 49

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY . vars statements RCURLY
    (82) vars -> . var
    (83) vars -> . empty
    (84) var -> . VARS var2
    (114) empty -> .

    VARS            shift and go to state 12
    ID              reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    RCURLY          reduce using rule 114 (empty -> .)

    vars                           shift and go to state 55
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 50

    (104) functions1 -> ID saveFunction LPAREN . args RPAREN vars LCURLY statements RCURLY
    (107) args -> . args type TWOPOINTS var1 addVar
    (108) args -> . empty
    (114) empty -> .

    RPAREN          reduce using rule 114 (empty -> .)
    INT             reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)

    args                           shift and go to state 56
    empty                          shift and go to state 57

state 51

    (85) var2 -> var2 type TWOPOINTS var1 SEMMICOLON . addVar
    (92) addVar -> .

    INT             reduce using rule 92 (addVar -> .)
    CHAR            reduce using rule 92 (addVar -> .)
    FLOAT           reduce using rule 92 (addVar -> .)
    FUNCTION        reduce using rule 92 (addVar -> .)
    PRINCIPAL       reduce using rule 92 (addVar -> .)
    $end            reduce using rule 92 (addVar -> .)
    ID              reduce using rule 92 (addVar -> .)
    READ            reduce using rule 92 (addVar -> .)
    WRITE           reduce using rule 92 (addVar -> .)
    FOR             reduce using rule 92 (addVar -> .)
    WHILE           reduce using rule 92 (addVar -> .)
    IF              reduce using rule 92 (addVar -> .)
    RETURN          reduce using rule 92 (addVar -> .)
    RCURLY          reduce using rule 92 (addVar -> .)
    LCURLY          reduce using rule 92 (addVar -> .)

    addVar                         shift and go to state 58

state 52

    (88) var1 -> ID COMMA . var1 addVar
    (87) var1 -> . ID
    (88) var1 -> . ID COMMA var1 addVar
    (89) var1 -> . ID arr
    (90) var1 -> . ID arr COMMA var1 addVar
    (91) var1 -> . empty
    (114) empty -> .

    ID              shift and go to state 47
    SEMMICOLON      reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)
    INT             reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)

    var1                           shift and go to state 59
    empty                          shift and go to state 48

state 53

    (89) var1 -> ID arr .
    (90) var1 -> ID arr . COMMA var1 addVar

    SEMMICOLON      reduce using rule 89 (var1 -> ID arr .)
    RPAREN          reduce using rule 89 (var1 -> ID arr .)
    INT             reduce using rule 89 (var1 -> ID arr .)
    CHAR            reduce using rule 89 (var1 -> ID arr .)
    FLOAT           reduce using rule 89 (var1 -> ID arr .)
    COMMA           shift and go to state 60


state 54

    (97) arr -> LBRACKET . CTEI RBRACKET
    (98) arr -> LBRACKET . exp RBRACKET
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    CTEI            shift and go to state 61
    ID              shift and go to state 69
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 62
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 55

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars . statements RCURLY
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)

    statements                     shift and go to state 75
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 56

    (104) functions1 -> ID saveFunction LPAREN args . RPAREN vars LCURLY statements RCURLY
    (107) args -> args . type TWOPOINTS var1 addVar
    (94) type -> . INT saveTypeVar
    (95) type -> . CHAR saveTypeVar
    (96) type -> . FLOAT saveTypeVar

    RPAREN          shift and go to state 92
    INT             shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28

    type                           shift and go to state 93

state 57

    (108) args -> empty .

    RPAREN          reduce using rule 108 (args -> empty .)
    INT             reduce using rule 108 (args -> empty .)
    CHAR            reduce using rule 108 (args -> empty .)
    FLOAT           reduce using rule 108 (args -> empty .)


state 58

    (85) var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .

    INT             reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    CHAR            reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FLOAT           reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FUNCTION        reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    PRINCIPAL       reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    $end            reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    ID              reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    READ            reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WRITE           reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FOR             reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WHILE           reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    IF              reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RETURN          reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RCURLY          reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    LCURLY          reduce using rule 85 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)


state 59

    (88) var1 -> ID COMMA var1 . addVar
    (92) addVar -> .

    SEMMICOLON      reduce using rule 92 (addVar -> .)
    RPAREN          reduce using rule 92 (addVar -> .)
    INT             reduce using rule 92 (addVar -> .)
    CHAR            reduce using rule 92 (addVar -> .)
    FLOAT           reduce using rule 92 (addVar -> .)

    addVar                         shift and go to state 94

state 60

    (90) var1 -> ID arr COMMA . var1 addVar
    (87) var1 -> . ID
    (88) var1 -> . ID COMMA var1 addVar
    (89) var1 -> . ID arr
    (90) var1 -> . ID arr COMMA var1 addVar
    (91) var1 -> . empty
    (114) empty -> .

    ID              shift and go to state 47
    SEMMICOLON      reduce using rule 114 (empty -> .)
    RPAREN          reduce using rule 114 (empty -> .)
    INT             reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)

    var1                           shift and go to state 95
    empty                          shift and go to state 48

state 61

    (97) arr -> LBRACKET CTEI . RBRACKET
    (75) pexp -> CTEI . saveCTE
    (56) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 96
    MUL             reduce using rule 56 (saveCTE -> .)
    DIV             reduce using rule 56 (saveCTE -> .)
    PLUS            reduce using rule 56 (saveCTE -> .)
    MINUS           reduce using rule 56 (saveCTE -> .)
    GT              reduce using rule 56 (saveCTE -> .)
    LT              reduce using rule 56 (saveCTE -> .)
    GTE             reduce using rule 56 (saveCTE -> .)
    LTE             reduce using rule 56 (saveCTE -> .)
    NE              reduce using rule 56 (saveCTE -> .)
    AND             reduce using rule 56 (saveCTE -> .)
    OR              reduce using rule 56 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 56 (saveCTE -> .) ]

    saveCTE                        shift and go to state 97

state 62

    (98) arr -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 98


state 63

    (57) exp -> nexp . generateQuadOR
    (58) exp -> nexp . generateQuadOR OR saveOperator nexp
    (46) generateQuadOR -> .

    OR              reduce using rule 46 (generateQuadOR -> .)
    RBRACKET        reduce using rule 46 (generateQuadOR -> .)
    RPAREN          reduce using rule 46 (generateQuadOR -> .)
    COMMA           reduce using rule 46 (generateQuadOR -> .)
    SEMMICOLON      reduce using rule 46 (generateQuadOR -> .)
    TO              reduce using rule 46 (generateQuadOR -> .)

    generateQuadOR                 shift and go to state 99

state 64

    (59) nexp -> compexp . generateQuadAND
    (60) nexp -> compexp . generateQuadAND AND saveOperator compexp
    (47) generateQuadAND -> .

    AND             reduce using rule 47 (generateQuadAND -> .)
    OR              reduce using rule 47 (generateQuadAND -> .)
    RBRACKET        reduce using rule 47 (generateQuadAND -> .)
    RPAREN          reduce using rule 47 (generateQuadAND -> .)
    COMMA           reduce using rule 47 (generateQuadAND -> .)
    SEMMICOLON      reduce using rule 47 (generateQuadAND -> .)
    TO              reduce using rule 47 (generateQuadAND -> .)

    generateQuadAND                shift and go to state 100

state 65

    (61) compexp -> sumexp .
    (63) compexp1 -> sumexp . GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> sumexp . LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> sumexp . GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> sumexp . LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> sumexp . NE saveOperator sumexp generateQuadCOMPARE

    AND             reduce using rule 61 (compexp -> sumexp .)
    OR              reduce using rule 61 (compexp -> sumexp .)
    RBRACKET        reduce using rule 61 (compexp -> sumexp .)
    RPAREN          reduce using rule 61 (compexp -> sumexp .)
    COMMA           reduce using rule 61 (compexp -> sumexp .)
    SEMMICOLON      reduce using rule 61 (compexp -> sumexp .)
    TO              reduce using rule 61 (compexp -> sumexp .)
    GT              shift and go to state 101
    LT              shift and go to state 102
    GTE             shift and go to state 103
    LTE             shift and go to state 104
    NE              shift and go to state 105


state 66

    (62) compexp -> compexp1 . sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    sumexp                         shift and go to state 106
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 67

    (68) sumexp -> mulexp .
    (69) sumexp -> mulexp . PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> mulexp . MINUS saveOperator mulexp generateQuadSUM

    GT              reduce using rule 68 (sumexp -> mulexp .)
    LT              reduce using rule 68 (sumexp -> mulexp .)
    GTE             reduce using rule 68 (sumexp -> mulexp .)
    LTE             reduce using rule 68 (sumexp -> mulexp .)
    NE              reduce using rule 68 (sumexp -> mulexp .)
    AND             reduce using rule 68 (sumexp -> mulexp .)
    OR              reduce using rule 68 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 68 (sumexp -> mulexp .)
    RPAREN          reduce using rule 68 (sumexp -> mulexp .)
    COMMA           reduce using rule 68 (sumexp -> mulexp .)
    SEMMICOLON      reduce using rule 68 (sumexp -> mulexp .)
    TO              reduce using rule 68 (sumexp -> mulexp .)
    ID              reduce using rule 68 (sumexp -> mulexp .)
    CTEI            reduce using rule 68 (sumexp -> mulexp .)
    CTEF            reduce using rule 68 (sumexp -> mulexp .)
    CTEC            reduce using rule 68 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 68 (sumexp -> mulexp .)
    LPAREN          reduce using rule 68 (sumexp -> mulexp .)
    PLUS            shift and go to state 108
    MINUS           shift and go to state 109


state 68

    (71) mulexp -> pexp .
    (72) mulexp -> pexp . MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> pexp . DIV saveOperator pexp generateQuadMUL

    PLUS            reduce using rule 71 (mulexp -> pexp .)
    MINUS           reduce using rule 71 (mulexp -> pexp .)
    GT              reduce using rule 71 (mulexp -> pexp .)
    LT              reduce using rule 71 (mulexp -> pexp .)
    GTE             reduce using rule 71 (mulexp -> pexp .)
    LTE             reduce using rule 71 (mulexp -> pexp .)
    NE              reduce using rule 71 (mulexp -> pexp .)
    AND             reduce using rule 71 (mulexp -> pexp .)
    OR              reduce using rule 71 (mulexp -> pexp .)
    RBRACKET        reduce using rule 71 (mulexp -> pexp .)
    RPAREN          reduce using rule 71 (mulexp -> pexp .)
    COMMA           reduce using rule 71 (mulexp -> pexp .)
    SEMMICOLON      reduce using rule 71 (mulexp -> pexp .)
    TO              reduce using rule 71 (mulexp -> pexp .)
    ID              reduce using rule 71 (mulexp -> pexp .)
    CTEI            reduce using rule 71 (mulexp -> pexp .)
    CTEF            reduce using rule 71 (mulexp -> pexp .)
    CTEC            reduce using rule 71 (mulexp -> pexp .)
    CTESTRING       reduce using rule 71 (mulexp -> pexp .)
    LPAREN          reduce using rule 71 (mulexp -> pexp .)
    MUL             shift and go to state 110
    DIV             shift and go to state 111


state 69

    (74) pexp -> ID . add_id2
    (22) functionCall -> ID . LPAREN exp RPAREN
    (21) add_id2 -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 113
    MUL             reduce using rule 21 (add_id2 -> .)
    DIV             reduce using rule 21 (add_id2 -> .)
    PLUS            reduce using rule 21 (add_id2 -> .)
    MINUS           reduce using rule 21 (add_id2 -> .)
    GT              reduce using rule 21 (add_id2 -> .)
    LT              reduce using rule 21 (add_id2 -> .)
    GTE             reduce using rule 21 (add_id2 -> .)
    LTE             reduce using rule 21 (add_id2 -> .)
    NE              reduce using rule 21 (add_id2 -> .)
    AND             reduce using rule 21 (add_id2 -> .)
    OR              reduce using rule 21 (add_id2 -> .)
    RBRACKET        reduce using rule 21 (add_id2 -> .)
    RPAREN          reduce using rule 21 (add_id2 -> .)
    COMMA           reduce using rule 21 (add_id2 -> .)
    SEMMICOLON      reduce using rule 21 (add_id2 -> .)
    TO              reduce using rule 21 (add_id2 -> .)
    ID              reduce using rule 21 (add_id2 -> .)
    CTEI            reduce using rule 21 (add_id2 -> .)
    CTEF            reduce using rule 21 (add_id2 -> .)
    CTEC            reduce using rule 21 (add_id2 -> .)
    CTESTRING       reduce using rule 21 (add_id2 -> .)

  ! LPAREN          [ reduce using rule 21 (add_id2 -> .) ]

    add_id2                        shift and go to state 112

state 70

    (76) pexp -> CTEF . saveCTE
    (56) saveCTE -> .

    MUL             reduce using rule 56 (saveCTE -> .)
    DIV             reduce using rule 56 (saveCTE -> .)
    PLUS            reduce using rule 56 (saveCTE -> .)
    MINUS           reduce using rule 56 (saveCTE -> .)
    GT              reduce using rule 56 (saveCTE -> .)
    LT              reduce using rule 56 (saveCTE -> .)
    GTE             reduce using rule 56 (saveCTE -> .)
    LTE             reduce using rule 56 (saveCTE -> .)
    NE              reduce using rule 56 (saveCTE -> .)
    AND             reduce using rule 56 (saveCTE -> .)
    OR              reduce using rule 56 (saveCTE -> .)
    RBRACKET        reduce using rule 56 (saveCTE -> .)
    RPAREN          reduce using rule 56 (saveCTE -> .)
    COMMA           reduce using rule 56 (saveCTE -> .)
    SEMMICOLON      reduce using rule 56 (saveCTE -> .)
    TO              reduce using rule 56 (saveCTE -> .)
    ID              reduce using rule 56 (saveCTE -> .)
    CTEI            reduce using rule 56 (saveCTE -> .)
    CTEF            reduce using rule 56 (saveCTE -> .)
    CTEC            reduce using rule 56 (saveCTE -> .)
    CTESTRING       reduce using rule 56 (saveCTE -> .)
    LPAREN          reduce using rule 56 (saveCTE -> .)

    saveCTE                        shift and go to state 114

state 71

    (77) pexp -> CTEC . saveCTE
    (56) saveCTE -> .

    MUL             reduce using rule 56 (saveCTE -> .)
    DIV             reduce using rule 56 (saveCTE -> .)
    PLUS            reduce using rule 56 (saveCTE -> .)
    MINUS           reduce using rule 56 (saveCTE -> .)
    GT              reduce using rule 56 (saveCTE -> .)
    LT              reduce using rule 56 (saveCTE -> .)
    GTE             reduce using rule 56 (saveCTE -> .)
    LTE             reduce using rule 56 (saveCTE -> .)
    NE              reduce using rule 56 (saveCTE -> .)
    AND             reduce using rule 56 (saveCTE -> .)
    OR              reduce using rule 56 (saveCTE -> .)
    RBRACKET        reduce using rule 56 (saveCTE -> .)
    RPAREN          reduce using rule 56 (saveCTE -> .)
    COMMA           reduce using rule 56 (saveCTE -> .)
    SEMMICOLON      reduce using rule 56 (saveCTE -> .)
    TO              reduce using rule 56 (saveCTE -> .)
    ID              reduce using rule 56 (saveCTE -> .)
    CTEI            reduce using rule 56 (saveCTE -> .)
    CTEF            reduce using rule 56 (saveCTE -> .)
    CTEC            reduce using rule 56 (saveCTE -> .)
    CTESTRING       reduce using rule 56 (saveCTE -> .)
    LPAREN          reduce using rule 56 (saveCTE -> .)

    saveCTE                        shift and go to state 115

state 72

    (78) pexp -> CTESTRING . saveCTE
    (56) saveCTE -> .

    MUL             reduce using rule 56 (saveCTE -> .)
    DIV             reduce using rule 56 (saveCTE -> .)
    PLUS            reduce using rule 56 (saveCTE -> .)
    MINUS           reduce using rule 56 (saveCTE -> .)
    GT              reduce using rule 56 (saveCTE -> .)
    LT              reduce using rule 56 (saveCTE -> .)
    GTE             reduce using rule 56 (saveCTE -> .)
    LTE             reduce using rule 56 (saveCTE -> .)
    NE              reduce using rule 56 (saveCTE -> .)
    AND             reduce using rule 56 (saveCTE -> .)
    OR              reduce using rule 56 (saveCTE -> .)
    RBRACKET        reduce using rule 56 (saveCTE -> .)
    RPAREN          reduce using rule 56 (saveCTE -> .)
    COMMA           reduce using rule 56 (saveCTE -> .)
    SEMMICOLON      reduce using rule 56 (saveCTE -> .)
    TO              reduce using rule 56 (saveCTE -> .)
    ID              reduce using rule 56 (saveCTE -> .)
    CTEI            reduce using rule 56 (saveCTE -> .)
    CTEF            reduce using rule 56 (saveCTE -> .)
    CTEC            reduce using rule 56 (saveCTE -> .)
    CTESTRING       reduce using rule 56 (saveCTE -> .)
    LPAREN          reduce using rule 56 (saveCTE -> .)

    saveCTE                        shift and go to state 116

state 73

    (79) pexp -> functionCall .

    MUL             reduce using rule 79 (pexp -> functionCall .)
    DIV             reduce using rule 79 (pexp -> functionCall .)
    PLUS            reduce using rule 79 (pexp -> functionCall .)
    MINUS           reduce using rule 79 (pexp -> functionCall .)
    GT              reduce using rule 79 (pexp -> functionCall .)
    LT              reduce using rule 79 (pexp -> functionCall .)
    GTE             reduce using rule 79 (pexp -> functionCall .)
    LTE             reduce using rule 79 (pexp -> functionCall .)
    NE              reduce using rule 79 (pexp -> functionCall .)
    AND             reduce using rule 79 (pexp -> functionCall .)
    OR              reduce using rule 79 (pexp -> functionCall .)
    RBRACKET        reduce using rule 79 (pexp -> functionCall .)
    RPAREN          reduce using rule 79 (pexp -> functionCall .)
    COMMA           reduce using rule 79 (pexp -> functionCall .)
    SEMMICOLON      reduce using rule 79 (pexp -> functionCall .)
    TO              reduce using rule 79 (pexp -> functionCall .)
    ID              reduce using rule 79 (pexp -> functionCall .)
    CTEI            reduce using rule 79 (pexp -> functionCall .)
    CTEF            reduce using rule 79 (pexp -> functionCall .)
    CTEC            reduce using rule 79 (pexp -> functionCall .)
    CTESTRING       reduce using rule 79 (pexp -> functionCall .)
    LPAREN          reduce using rule 79 (pexp -> functionCall .)


state 74

    (80) pexp -> LPAREN . exp RPAREN
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 117
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 75

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements . RCURLY

    RCURLY          shift and go to state 118


state 76

    (8) statements -> assign . SEMMICOLON statements

    SEMMICOLON      shift and go to state 119


state 77

    (9) statements -> functionCall . SEMMICOLON statements

    SEMMICOLON      shift and go to state 120


state 78

    (10) statements -> read . statements SEMMICOLON statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    SEMMICOLON      reduce using rule 114 (empty -> .)

    read                           shift and go to state 78
    statements                     shift and go to state 121
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 79

    (11) statements -> write . statements SEMMICOLON statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    SEMMICOLON      reduce using rule 114 (empty -> .)

    write                          shift and go to state 79
    statements                     shift and go to state 122
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 80

    (12) statements -> for . statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    for                            shift and go to state 80
    statements                     shift and go to state 123
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 81

    (13) statements -> while . statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    while                          shift and go to state 81
    statements                     shift and go to state 124
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 82

    (14) statements -> if . statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    if                             shift and go to state 82
    statements                     shift and go to state 125
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 83

    (15) statements -> return . statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    return                         shift and go to state 83
    statements                     shift and go to state 126
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    empty                          shift and go to state 84

state 84

    (16) statements -> empty .

    RCURLY          reduce using rule 16 (statements -> empty .)
    SEMMICOLON      reduce using rule 16 (statements -> empty .)


state 85

    (17) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> ID . add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> ID . LPAREN exp RPAREN
    (21) add_id2 -> .

    LPAREN          shift and go to state 113
    EQUALS          reduce using rule 21 (add_id2 -> .)
    LBRACKET        reduce using rule 21 (add_id2 -> .)

    add_id2                        shift and go to state 127

state 86

    (23) read -> READ . operatorRead LPAREN paramRead RPAREN
    (28) operatorRead -> .

    LPAREN          reduce using rule 28 (operatorRead -> .)

    operatorRead                   shift and go to state 128

state 87

    (30) write -> WRITE . writeOperator LPAREN paramWrite RPAREN
    (35) writeOperator -> .

    LPAREN          reduce using rule 35 (writeOperator -> .)

    writeOperator                  shift and go to state 129

state 88

    (36) for -> FOR . forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (37) forOP -> .

    ID              reduce using rule 37 (forOP -> .)

    forOP                          shift and go to state 130

state 89

    (40) while -> WHILE . whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (41) whileOP -> .

    LPAREN          reduce using rule 41 (whileOP -> .)

    whileOP                        shift and go to state 131

state 90

    (43) if -> IF . LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    LPAREN          shift and go to state 132


state 91

    (112) return -> RETURN . LPAREN exp RPAREN SEMMICOLON
    (113) return -> RETURN . LPAREN exp RPAREN

    LPAREN          shift and go to state 133


state 92

    (104) functions1 -> ID saveFunction LPAREN args RPAREN . vars LCURLY statements RCURLY
    (82) vars -> . var
    (83) vars -> . empty
    (84) var -> . VARS var2
    (114) empty -> .

    VARS            shift and go to state 12
    LCURLY          reduce using rule 114 (empty -> .)

    vars                           shift and go to state 134
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 93

    (107) args -> args type . TWOPOINTS var1 addVar

    TWOPOINTS       shift and go to state 135


state 94

    (88) var1 -> ID COMMA var1 addVar .

    SEMMICOLON      reduce using rule 88 (var1 -> ID COMMA var1 addVar .)
    RPAREN          reduce using rule 88 (var1 -> ID COMMA var1 addVar .)
    INT             reduce using rule 88 (var1 -> ID COMMA var1 addVar .)
    CHAR            reduce using rule 88 (var1 -> ID COMMA var1 addVar .)
    FLOAT           reduce using rule 88 (var1 -> ID COMMA var1 addVar .)


state 95

    (90) var1 -> ID arr COMMA var1 . addVar
    (92) addVar -> .

    SEMMICOLON      reduce using rule 92 (addVar -> .)
    RPAREN          reduce using rule 92 (addVar -> .)
    INT             reduce using rule 92 (addVar -> .)
    CHAR            reduce using rule 92 (addVar -> .)
    FLOAT           reduce using rule 92 (addVar -> .)

    addVar                         shift and go to state 136

state 96

    (97) arr -> LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 97 (arr -> LBRACKET CTEI RBRACKET .)
    SEMMICOLON      reduce using rule 97 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 97 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 97 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 97 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 97 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 97 (arr -> LBRACKET CTEI RBRACKET .)


state 97

    (75) pexp -> CTEI saveCTE .

    MUL             reduce using rule 75 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 75 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 75 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 75 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 75 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 75 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 75 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 75 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 75 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 75 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 75 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 75 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 75 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 75 (pexp -> CTEI saveCTE .)
    SEMMICOLON      reduce using rule 75 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 75 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 75 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 75 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 75 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 75 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 75 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 75 (pexp -> CTEI saveCTE .)


state 98

    (98) arr -> LBRACKET exp RBRACKET .

    COMMA           reduce using rule 98 (arr -> LBRACKET exp RBRACKET .)
    SEMMICOLON      reduce using rule 98 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 98 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 98 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 98 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 98 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 98 (arr -> LBRACKET exp RBRACKET .)


state 99

    (57) exp -> nexp generateQuadOR .
    (58) exp -> nexp generateQuadOR . OR saveOperator nexp

    RBRACKET        reduce using rule 57 (exp -> nexp generateQuadOR .)
    RPAREN          reduce using rule 57 (exp -> nexp generateQuadOR .)
    COMMA           reduce using rule 57 (exp -> nexp generateQuadOR .)
    SEMMICOLON      reduce using rule 57 (exp -> nexp generateQuadOR .)
    TO              reduce using rule 57 (exp -> nexp generateQuadOR .)
    OR              shift and go to state 137


state 100

    (59) nexp -> compexp generateQuadAND .
    (60) nexp -> compexp generateQuadAND . AND saveOperator compexp

    OR              reduce using rule 59 (nexp -> compexp generateQuadAND .)
    RBRACKET        reduce using rule 59 (nexp -> compexp generateQuadAND .)
    RPAREN          reduce using rule 59 (nexp -> compexp generateQuadAND .)
    COMMA           reduce using rule 59 (nexp -> compexp generateQuadAND .)
    SEMMICOLON      reduce using rule 59 (nexp -> compexp generateQuadAND .)
    TO              reduce using rule 59 (nexp -> compexp generateQuadAND .)
    AND             shift and go to state 138


state 101

    (63) compexp1 -> sumexp GT . saveOperator sumexp generateQuadCOMPARE
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 139

state 102

    (64) compexp1 -> sumexp LT . saveOperator sumexp generateQuadCOMPARE
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 140

state 103

    (65) compexp1 -> sumexp GTE . saveOperator sumexp generateQuadCOMPARE
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 141

state 104

    (66) compexp1 -> sumexp LTE . saveOperator sumexp generateQuadCOMPARE
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 142

state 105

    (67) compexp1 -> sumexp NE . saveOperator sumexp generateQuadCOMPARE
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 143

state 106

    (62) compexp -> compexp1 sumexp .

    AND             reduce using rule 62 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 62 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 62 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 62 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 62 (compexp -> compexp1 sumexp .)
    SEMMICOLON      reduce using rule 62 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 62 (compexp -> compexp1 sumexp .)


state 107

    (75) pexp -> CTEI . saveCTE
    (56) saveCTE -> .

    MUL             reduce using rule 56 (saveCTE -> .)
    DIV             reduce using rule 56 (saveCTE -> .)
    PLUS            reduce using rule 56 (saveCTE -> .)
    MINUS           reduce using rule 56 (saveCTE -> .)
    AND             reduce using rule 56 (saveCTE -> .)
    OR              reduce using rule 56 (saveCTE -> .)
    RBRACKET        reduce using rule 56 (saveCTE -> .)
    RPAREN          reduce using rule 56 (saveCTE -> .)
    COMMA           reduce using rule 56 (saveCTE -> .)
    SEMMICOLON      reduce using rule 56 (saveCTE -> .)
    TO              reduce using rule 56 (saveCTE -> .)
    GT              reduce using rule 56 (saveCTE -> .)
    LT              reduce using rule 56 (saveCTE -> .)
    GTE             reduce using rule 56 (saveCTE -> .)
    LTE             reduce using rule 56 (saveCTE -> .)
    NE              reduce using rule 56 (saveCTE -> .)
    ID              reduce using rule 56 (saveCTE -> .)
    CTEI            reduce using rule 56 (saveCTE -> .)
    CTEF            reduce using rule 56 (saveCTE -> .)
    CTEC            reduce using rule 56 (saveCTE -> .)
    CTESTRING       reduce using rule 56 (saveCTE -> .)
    LPAREN          reduce using rule 56 (saveCTE -> .)

    saveCTE                        shift and go to state 97

state 108

    (69) sumexp -> mulexp PLUS . saveOperator mulexp generateQuadSUM
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 144

state 109

    (70) sumexp -> mulexp MINUS . saveOperator mulexp generateQuadSUM
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 145

state 110

    (72) mulexp -> pexp MUL . saveOperator pexp generateQuadMUL
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 146

state 111

    (73) mulexp -> pexp DIV . saveOperator pexp generateQuadMUL
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 147

state 112

    (74) pexp -> ID add_id2 .

    MUL             reduce using rule 74 (pexp -> ID add_id2 .)
    DIV             reduce using rule 74 (pexp -> ID add_id2 .)
    PLUS            reduce using rule 74 (pexp -> ID add_id2 .)
    MINUS           reduce using rule 74 (pexp -> ID add_id2 .)
    GT              reduce using rule 74 (pexp -> ID add_id2 .)
    LT              reduce using rule 74 (pexp -> ID add_id2 .)
    GTE             reduce using rule 74 (pexp -> ID add_id2 .)
    LTE             reduce using rule 74 (pexp -> ID add_id2 .)
    NE              reduce using rule 74 (pexp -> ID add_id2 .)
    AND             reduce using rule 74 (pexp -> ID add_id2 .)
    OR              reduce using rule 74 (pexp -> ID add_id2 .)
    RBRACKET        reduce using rule 74 (pexp -> ID add_id2 .)
    RPAREN          reduce using rule 74 (pexp -> ID add_id2 .)
    COMMA           reduce using rule 74 (pexp -> ID add_id2 .)
    SEMMICOLON      reduce using rule 74 (pexp -> ID add_id2 .)
    TO              reduce using rule 74 (pexp -> ID add_id2 .)
    ID              reduce using rule 74 (pexp -> ID add_id2 .)
    CTEI            reduce using rule 74 (pexp -> ID add_id2 .)
    CTEF            reduce using rule 74 (pexp -> ID add_id2 .)
    CTEC            reduce using rule 74 (pexp -> ID add_id2 .)
    CTESTRING       reduce using rule 74 (pexp -> ID add_id2 .)
    LPAREN          reduce using rule 74 (pexp -> ID add_id2 .)


state 113

    (22) functionCall -> ID LPAREN . exp RPAREN
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 148
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 114

    (76) pexp -> CTEF saveCTE .

    MUL             reduce using rule 76 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 76 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 76 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 76 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 76 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 76 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 76 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 76 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 76 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 76 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 76 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 76 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 76 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 76 (pexp -> CTEF saveCTE .)
    SEMMICOLON      reduce using rule 76 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 76 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 76 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 76 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 76 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 76 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 76 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 76 (pexp -> CTEF saveCTE .)


state 115

    (77) pexp -> CTEC saveCTE .

    MUL             reduce using rule 77 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 77 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 77 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 77 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 77 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 77 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 77 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 77 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 77 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 77 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 77 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 77 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 77 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 77 (pexp -> CTEC saveCTE .)
    SEMMICOLON      reduce using rule 77 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 77 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 77 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 77 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 77 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 77 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 77 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 77 (pexp -> CTEC saveCTE .)


state 116

    (78) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    SEMMICOLON      reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 78 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 78 (pexp -> CTESTRING saveCTE .)


state 117

    (80) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 149


state 118

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .

    $end            reduce using rule 7 (principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .)


state 119

    (8) statements -> assign SEMMICOLON . statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    assign                         shift and go to state 76
    statements                     shift and go to state 150
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 120

    (9) statements -> functionCall SEMMICOLON . statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    functionCall                   shift and go to state 77
    statements                     shift and go to state 151
    assign                         shift and go to state 76
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 121

    (10) statements -> read statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 152


state 122

    (11) statements -> write statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 153


state 123

    (12) statements -> for statements .

    RCURLY          reduce using rule 12 (statements -> for statements .)
    SEMMICOLON      reduce using rule 12 (statements -> for statements .)


state 124

    (13) statements -> while statements .

    RCURLY          reduce using rule 13 (statements -> while statements .)
    SEMMICOLON      reduce using rule 13 (statements -> while statements .)


state 125

    (14) statements -> if statements .

    RCURLY          reduce using rule 14 (statements -> if statements .)
    SEMMICOLON      reduce using rule 14 (statements -> if statements .)


state 126

    (15) statements -> return statements .

    RCURLY          reduce using rule 15 (statements -> return statements .)
    SEMMICOLON      reduce using rule 15 (statements -> return statements .)


state 127

    (17) assign -> ID add_id2 . EQUALS saveOperator exp generateAssignQuad
    (18) assign -> ID add_id2 . arr EQUALS saveOperator exp generateAssignQuad
    (97) arr -> . LBRACKET CTEI RBRACKET
    (98) arr -> . LBRACKET exp RBRACKET

    EQUALS          shift and go to state 154
    LBRACKET        shift and go to state 54

    arr                            shift and go to state 155

state 128

    (23) read -> READ operatorRead . LPAREN paramRead RPAREN

    LPAREN          shift and go to state 156


state 129

    (30) write -> WRITE writeOperator . LPAREN paramWrite RPAREN

    LPAREN          shift and go to state 157


state 130

    (36) for -> FOR forOP . assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad

    ID              shift and go to state 159

    assign                         shift and go to state 158

state 131

    (40) while -> WHILE whileOP . LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    LPAREN          shift and go to state 160


state 132

    (43) if -> IF LPAREN . exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 161
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 133

    (112) return -> RETURN LPAREN . exp RPAREN SEMMICOLON
    (113) return -> RETURN LPAREN . exp RPAREN
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 162
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 134

    (104) functions1 -> ID saveFunction LPAREN args RPAREN vars . LCURLY statements RCURLY

    LCURLY          shift and go to state 163


state 135

    (107) args -> args type TWOPOINTS . var1 addVar
    (87) var1 -> . ID
    (88) var1 -> . ID COMMA var1 addVar
    (89) var1 -> . ID arr
    (90) var1 -> . ID arr COMMA var1 addVar
    (91) var1 -> . empty
    (114) empty -> .

    ID              shift and go to state 47
    RPAREN          reduce using rule 114 (empty -> .)
    INT             reduce using rule 114 (empty -> .)
    CHAR            reduce using rule 114 (empty -> .)
    FLOAT           reduce using rule 114 (empty -> .)

    var1                           shift and go to state 164
    empty                          shift and go to state 48

state 136

    (90) var1 -> ID arr COMMA var1 addVar .

    SEMMICOLON      reduce using rule 90 (var1 -> ID arr COMMA var1 addVar .)
    RPAREN          reduce using rule 90 (var1 -> ID arr COMMA var1 addVar .)
    INT             reduce using rule 90 (var1 -> ID arr COMMA var1 addVar .)
    CHAR            reduce using rule 90 (var1 -> ID arr COMMA var1 addVar .)
    FLOAT           reduce using rule 90 (var1 -> ID arr COMMA var1 addVar .)


state 137

    (58) exp -> nexp generateQuadOR OR . saveOperator nexp
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 165

state 138

    (60) nexp -> compexp generateQuadAND AND . saveOperator compexp
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 166

state 139

    (63) compexp1 -> sumexp GT saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    sumexp                         shift and go to state 167
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 140

    (64) compexp1 -> sumexp LT saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    sumexp                         shift and go to state 168
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 141

    (65) compexp1 -> sumexp GTE saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    sumexp                         shift and go to state 169
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 142

    (66) compexp1 -> sumexp LTE saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    sumexp                         shift and go to state 170
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 143

    (67) compexp1 -> sumexp NE saveOperator . sumexp generateQuadCOMPARE
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    sumexp                         shift and go to state 171
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 144

    (69) sumexp -> mulexp PLUS saveOperator . mulexp generateQuadSUM
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    mulexp                         shift and go to state 172
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 145

    (70) sumexp -> mulexp MINUS saveOperator . mulexp generateQuadSUM
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    mulexp                         shift and go to state 173
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 146

    (72) mulexp -> pexp MUL saveOperator . pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    pexp                           shift and go to state 174
    functionCall                   shift and go to state 73

state 147

    (73) mulexp -> pexp DIV saveOperator . pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    pexp                           shift and go to state 175
    functionCall                   shift and go to state 73

state 148

    (22) functionCall -> ID LPAREN exp . RPAREN

    RPAREN          shift and go to state 176


state 149

    (80) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    SEMMICOLON      reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 80 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 80 (pexp -> LPAREN exp RPAREN .)


state 150

    (8) statements -> assign SEMMICOLON statements .

    RCURLY          reduce using rule 8 (statements -> assign SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 8 (statements -> assign SEMMICOLON statements .)


state 151

    (9) statements -> functionCall SEMMICOLON statements .

    RCURLY          reduce using rule 9 (statements -> functionCall SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 9 (statements -> functionCall SEMMICOLON statements .)


state 152

    (10) statements -> read statements SEMMICOLON . statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    read                           shift and go to state 78
    statements                     shift and go to state 177
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 153

    (11) statements -> write statements SEMMICOLON . statements
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    write                          shift and go to state 79
    statements                     shift and go to state 178
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 154

    (17) assign -> ID add_id2 EQUALS . saveOperator exp generateAssignQuad
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 179

state 155

    (18) assign -> ID add_id2 arr . EQUALS saveOperator exp generateAssignQuad

    EQUALS          shift and go to state 180


state 156

    (23) read -> READ operatorRead LPAREN . paramRead RPAREN
    (24) paramRead -> . paramReadAux
    (25) paramRead -> . empty
    (26) paramReadAux -> . exp generateQuadREAD
    (27) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (114) empty -> .
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    RPAREN          reduce using rule 114 (empty -> .)
    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    paramRead                      shift and go to state 181
    paramReadAux                   shift and go to state 182
    empty                          shift and go to state 183
    exp                            shift and go to state 184
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 157

    (30) write -> WRITE writeOperator LPAREN . paramWrite RPAREN
    (31) paramWrite -> . paramWriteAux
    (32) paramWrite -> . empty
    (33) paramWriteAux -> . exp generateQuadPRINT
    (34) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (114) empty -> .
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    RPAREN          reduce using rule 114 (empty -> .)
    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    paramWrite                     shift and go to state 185
    paramWriteAux                  shift and go to state 186
    empty                          shift and go to state 187
    exp                            shift and go to state 188
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 158

    (36) for -> FOR forOP assign . TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    TO              shift and go to state 189


state 159

    (17) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> ID . add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (21) add_id2 -> .

    EQUALS          reduce using rule 21 (add_id2 -> .)
    LBRACKET        reduce using rule 21 (add_id2 -> .)

    add_id2                        shift and go to state 127

state 160

    (40) while -> WHILE whileOP LPAREN . exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 190
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 161

    (43) if -> IF LPAREN exp . RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    RPAREN          shift and go to state 191


state 162

    (112) return -> RETURN LPAREN exp . RPAREN SEMMICOLON
    (113) return -> RETURN LPAREN exp . RPAREN

    RPAREN          shift and go to state 192


state 163

    (104) functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY . statements RCURLY
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)

    statements                     shift and go to state 193
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 164

    (107) args -> args type TWOPOINTS var1 . addVar
    (92) addVar -> .

    RPAREN          reduce using rule 92 (addVar -> .)
    INT             reduce using rule 92 (addVar -> .)
    CHAR            reduce using rule 92 (addVar -> .)
    FLOAT           reduce using rule 92 (addVar -> .)

    addVar                         shift and go to state 194

state 165

    (58) exp -> nexp generateQuadOR OR saveOperator . nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    nexp                           shift and go to state 195
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 166

    (60) nexp -> compexp generateQuadAND AND saveOperator . compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    compexp                        shift and go to state 196
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 167

    (63) compexp1 -> sumexp GT saveOperator sumexp . generateQuadCOMPARE
    (48) generateQuadCOMPARE -> .

    ID              reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 48 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 48 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 197

state 168

    (64) compexp1 -> sumexp LT saveOperator sumexp . generateQuadCOMPARE
    (48) generateQuadCOMPARE -> .

    ID              reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 48 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 48 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 198

state 169

    (65) compexp1 -> sumexp GTE saveOperator sumexp . generateQuadCOMPARE
    (48) generateQuadCOMPARE -> .

    ID              reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 48 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 48 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 199

state 170

    (66) compexp1 -> sumexp LTE saveOperator sumexp . generateQuadCOMPARE
    (48) generateQuadCOMPARE -> .

    ID              reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 48 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 48 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 200

state 171

    (67) compexp1 -> sumexp NE saveOperator sumexp . generateQuadCOMPARE
    (48) generateQuadCOMPARE -> .

    ID              reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 48 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 48 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 48 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 201

state 172

    (69) sumexp -> mulexp PLUS saveOperator mulexp . generateQuadSUM
    (50) generateQuadSUM -> .

    GT              reduce using rule 50 (generateQuadSUM -> .)
    LT              reduce using rule 50 (generateQuadSUM -> .)
    GTE             reduce using rule 50 (generateQuadSUM -> .)
    LTE             reduce using rule 50 (generateQuadSUM -> .)
    NE              reduce using rule 50 (generateQuadSUM -> .)
    AND             reduce using rule 50 (generateQuadSUM -> .)
    OR              reduce using rule 50 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 50 (generateQuadSUM -> .)
    RPAREN          reduce using rule 50 (generateQuadSUM -> .)
    COMMA           reduce using rule 50 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 50 (generateQuadSUM -> .)
    TO              reduce using rule 50 (generateQuadSUM -> .)
    ID              reduce using rule 50 (generateQuadSUM -> .)
    CTEI            reduce using rule 50 (generateQuadSUM -> .)
    CTEF            reduce using rule 50 (generateQuadSUM -> .)
    CTEC            reduce using rule 50 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 50 (generateQuadSUM -> .)
    LPAREN          reduce using rule 50 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 202

state 173

    (70) sumexp -> mulexp MINUS saveOperator mulexp . generateQuadSUM
    (50) generateQuadSUM -> .

    GT              reduce using rule 50 (generateQuadSUM -> .)
    LT              reduce using rule 50 (generateQuadSUM -> .)
    GTE             reduce using rule 50 (generateQuadSUM -> .)
    LTE             reduce using rule 50 (generateQuadSUM -> .)
    NE              reduce using rule 50 (generateQuadSUM -> .)
    AND             reduce using rule 50 (generateQuadSUM -> .)
    OR              reduce using rule 50 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 50 (generateQuadSUM -> .)
    RPAREN          reduce using rule 50 (generateQuadSUM -> .)
    COMMA           reduce using rule 50 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 50 (generateQuadSUM -> .)
    TO              reduce using rule 50 (generateQuadSUM -> .)
    ID              reduce using rule 50 (generateQuadSUM -> .)
    CTEI            reduce using rule 50 (generateQuadSUM -> .)
    CTEF            reduce using rule 50 (generateQuadSUM -> .)
    CTEC            reduce using rule 50 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 50 (generateQuadSUM -> .)
    LPAREN          reduce using rule 50 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 203

state 174

    (72) mulexp -> pexp MUL saveOperator pexp . generateQuadMUL
    (51) generateQuadMUL -> .

    PLUS            reduce using rule 51 (generateQuadMUL -> .)
    MINUS           reduce using rule 51 (generateQuadMUL -> .)
    GT              reduce using rule 51 (generateQuadMUL -> .)
    LT              reduce using rule 51 (generateQuadMUL -> .)
    GTE             reduce using rule 51 (generateQuadMUL -> .)
    LTE             reduce using rule 51 (generateQuadMUL -> .)
    NE              reduce using rule 51 (generateQuadMUL -> .)
    AND             reduce using rule 51 (generateQuadMUL -> .)
    OR              reduce using rule 51 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 51 (generateQuadMUL -> .)
    RPAREN          reduce using rule 51 (generateQuadMUL -> .)
    COMMA           reduce using rule 51 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 51 (generateQuadMUL -> .)
    TO              reduce using rule 51 (generateQuadMUL -> .)
    ID              reduce using rule 51 (generateQuadMUL -> .)
    CTEI            reduce using rule 51 (generateQuadMUL -> .)
    CTEF            reduce using rule 51 (generateQuadMUL -> .)
    CTEC            reduce using rule 51 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 51 (generateQuadMUL -> .)
    LPAREN          reduce using rule 51 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 204

state 175

    (73) mulexp -> pexp DIV saveOperator pexp . generateQuadMUL
    (51) generateQuadMUL -> .

    PLUS            reduce using rule 51 (generateQuadMUL -> .)
    MINUS           reduce using rule 51 (generateQuadMUL -> .)
    GT              reduce using rule 51 (generateQuadMUL -> .)
    LT              reduce using rule 51 (generateQuadMUL -> .)
    GTE             reduce using rule 51 (generateQuadMUL -> .)
    LTE             reduce using rule 51 (generateQuadMUL -> .)
    NE              reduce using rule 51 (generateQuadMUL -> .)
    AND             reduce using rule 51 (generateQuadMUL -> .)
    OR              reduce using rule 51 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 51 (generateQuadMUL -> .)
    RPAREN          reduce using rule 51 (generateQuadMUL -> .)
    COMMA           reduce using rule 51 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 51 (generateQuadMUL -> .)
    TO              reduce using rule 51 (generateQuadMUL -> .)
    ID              reduce using rule 51 (generateQuadMUL -> .)
    CTEI            reduce using rule 51 (generateQuadMUL -> .)
    CTEF            reduce using rule 51 (generateQuadMUL -> .)
    CTEC            reduce using rule 51 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 51 (generateQuadMUL -> .)
    LPAREN          reduce using rule 51 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 205

state 176

    (22) functionCall -> ID LPAREN exp RPAREN .

    MUL             reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    DIV             reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    PLUS            reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    MINUS           reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    GT              reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    LT              reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    GTE             reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    LTE             reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    NE              reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    AND             reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    OR              reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    SEMMICOLON      reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    RPAREN          reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    COMMA           reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    TO              reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    ID              reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    CTEI            reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    CTEF            reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    CTEC            reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)
    LPAREN          reduce using rule 22 (functionCall -> ID LPAREN exp RPAREN .)


state 177

    (10) statements -> read statements SEMMICOLON statements .

    RCURLY          reduce using rule 10 (statements -> read statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 10 (statements -> read statements SEMMICOLON statements .)


state 178

    (11) statements -> write statements SEMMICOLON statements .

    RCURLY          reduce using rule 11 (statements -> write statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 11 (statements -> write statements SEMMICOLON statements .)


state 179

    (17) assign -> ID add_id2 EQUALS saveOperator . exp generateAssignQuad
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 206
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 180

    (18) assign -> ID add_id2 arr EQUALS . saveOperator exp generateAssignQuad
    (81) saveOperator -> .

    ID              reduce using rule 81 (saveOperator -> .)
    CTEI            reduce using rule 81 (saveOperator -> .)
    CTEF            reduce using rule 81 (saveOperator -> .)
    CTEC            reduce using rule 81 (saveOperator -> .)
    CTESTRING       reduce using rule 81 (saveOperator -> .)
    LPAREN          reduce using rule 81 (saveOperator -> .)

    saveOperator                   shift and go to state 207

state 181

    (23) read -> READ operatorRead LPAREN paramRead . RPAREN

    RPAREN          shift and go to state 208


state 182

    (24) paramRead -> paramReadAux .

    RPAREN          reduce using rule 24 (paramRead -> paramReadAux .)


state 183

    (25) paramRead -> empty .

    RPAREN          reduce using rule 25 (paramRead -> empty .)


state 184

    (26) paramReadAux -> exp . generateQuadREAD
    (27) paramReadAux -> exp . generateQuadREAD COMMA operatorRead paramReadAux
    (53) generateQuadREAD -> .

    COMMA           reduce using rule 53 (generateQuadREAD -> .)
    RPAREN          reduce using rule 53 (generateQuadREAD -> .)

    generateQuadREAD               shift and go to state 209

state 185

    (30) write -> WRITE writeOperator LPAREN paramWrite . RPAREN

    RPAREN          shift and go to state 210


state 186

    (31) paramWrite -> paramWriteAux .

    RPAREN          reduce using rule 31 (paramWrite -> paramWriteAux .)


state 187

    (32) paramWrite -> empty .

    RPAREN          reduce using rule 32 (paramWrite -> empty .)


state 188

    (33) paramWriteAux -> exp . generateQuadPRINT
    (34) paramWriteAux -> exp . generateQuadPRINT COMMA writeOperator paramWriteAux
    (52) generateQuadPRINT -> .

    COMMA           reduce using rule 52 (generateQuadPRINT -> .)
    RPAREN          reduce using rule 52 (generateQuadPRINT -> .)

    generateQuadPRINT              shift and go to state 211

state 189

    (36) for -> FOR forOP assign TO . CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    CTEI            shift and go to state 212


state 190

    (40) while -> WHILE whileOP LPAREN exp . RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    RPAREN          shift and go to state 213


state 191

    (43) if -> IF LPAREN exp RPAREN . generateQuadIF THEN LCURLY statements RCURLY else endIF
    (49) generateQuadIF -> .

    THEN            reduce using rule 49 (generateQuadIF -> .)

    generateQuadIF                 shift and go to state 214

state 192

    (112) return -> RETURN LPAREN exp RPAREN . SEMMICOLON
    (113) return -> RETURN LPAREN exp RPAREN .

  ! shift/reduce conflict for SEMMICOLON resolved as shift
    SEMMICOLON      shift and go to state 215
    ID              reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .)
    READ            reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .)
    WRITE           reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .)
    FOR             reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .)
    WHILE           reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .)
    IF              reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .)
    RETURN          reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .)
    RCURLY          reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .)

  ! SEMMICOLON      [ reduce using rule 113 (return -> RETURN LPAREN exp RPAREN .) ]


state 193

    (104) functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements . RCURLY

    RCURLY          shift and go to state 216


state 194

    (107) args -> args type TWOPOINTS var1 addVar .

    RPAREN          reduce using rule 107 (args -> args type TWOPOINTS var1 addVar .)
    INT             reduce using rule 107 (args -> args type TWOPOINTS var1 addVar .)
    CHAR            reduce using rule 107 (args -> args type TWOPOINTS var1 addVar .)
    FLOAT           reduce using rule 107 (args -> args type TWOPOINTS var1 addVar .)


state 195

    (58) exp -> nexp generateQuadOR OR saveOperator nexp .

    RBRACKET        reduce using rule 58 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    RPAREN          reduce using rule 58 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    COMMA           reduce using rule 58 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    SEMMICOLON      reduce using rule 58 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    TO              reduce using rule 58 (exp -> nexp generateQuadOR OR saveOperator nexp .)


state 196

    (60) nexp -> compexp generateQuadAND AND saveOperator compexp .

    OR              reduce using rule 60 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RBRACKET        reduce using rule 60 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RPAREN          reduce using rule 60 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    COMMA           reduce using rule 60 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    SEMMICOLON      reduce using rule 60 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    TO              reduce using rule 60 (nexp -> compexp generateQuadAND AND saveOperator compexp .)


state 197

    (63) compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 63 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 63 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 63 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 63 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 63 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 63 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)


state 198

    (64) compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 64 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 64 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 64 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 64 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 64 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 64 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)


state 199

    (65) compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 65 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 65 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 65 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 65 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 65 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 65 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)


state 200

    (66) compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 66 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 66 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 66 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 66 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 66 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 66 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)


state 201

    (67) compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 67 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 67 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 67 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 67 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 67 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 67 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)


state 202

    (69) sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 69 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)


state 203

    (70) sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 70 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)


state 204

    (72) mulexp -> pexp MUL saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 72 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)


state 205

    (73) mulexp -> pexp DIV saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 73 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)


state 206

    (17) assign -> ID add_id2 EQUALS saveOperator exp . generateAssignQuad
    (19) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 19 (generateAssignQuad -> .)
    TO              reduce using rule 19 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 217

state 207

    (18) assign -> ID add_id2 arr EQUALS saveOperator . exp generateAssignQuad
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 218
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 208

    (23) read -> READ operatorRead LPAREN paramRead RPAREN .

    ID              reduce using rule 23 (read -> READ operatorRead LPAREN paramRead RPAREN .)
    READ            reduce using rule 23 (read -> READ operatorRead LPAREN paramRead RPAREN .)
    WRITE           reduce using rule 23 (read -> READ operatorRead LPAREN paramRead RPAREN .)
    FOR             reduce using rule 23 (read -> READ operatorRead LPAREN paramRead RPAREN .)
    WHILE           reduce using rule 23 (read -> READ operatorRead LPAREN paramRead RPAREN .)
    IF              reduce using rule 23 (read -> READ operatorRead LPAREN paramRead RPAREN .)
    RETURN          reduce using rule 23 (read -> READ operatorRead LPAREN paramRead RPAREN .)
    SEMMICOLON      reduce using rule 23 (read -> READ operatorRead LPAREN paramRead RPAREN .)


state 209

    (26) paramReadAux -> exp generateQuadREAD .
    (27) paramReadAux -> exp generateQuadREAD . COMMA operatorRead paramReadAux

    RPAREN          reduce using rule 26 (paramReadAux -> exp generateQuadREAD .)
    COMMA           shift and go to state 219


state 210

    (30) write -> WRITE writeOperator LPAREN paramWrite RPAREN .

    ID              reduce using rule 30 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    READ            reduce using rule 30 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WRITE           reduce using rule 30 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    FOR             reduce using rule 30 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WHILE           reduce using rule 30 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    IF              reduce using rule 30 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    RETURN          reduce using rule 30 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    SEMMICOLON      reduce using rule 30 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)


state 211

    (33) paramWriteAux -> exp generateQuadPRINT .
    (34) paramWriteAux -> exp generateQuadPRINT . COMMA writeOperator paramWriteAux

    RPAREN          reduce using rule 33 (paramWriteAux -> exp generateQuadPRINT .)
    COMMA           shift and go to state 220


state 212

    (36) for -> FOR forOP assign TO CTEI . DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 221


state 213

    (40) while -> WHILE whileOP LPAREN exp RPAREN . DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 222


state 214

    (43) if -> IF LPAREN exp RPAREN generateQuadIF . THEN LCURLY statements RCURLY else endIF

    THEN            shift and go to state 223


state 215

    (112) return -> RETURN LPAREN exp RPAREN SEMMICOLON .

    ID              reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    READ            reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    WRITE           reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    FOR             reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    WHILE           reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    IF              reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    RETURN          reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    RCURLY          reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    SEMMICOLON      reduce using rule 112 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)


state 216

    (104) functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY .

    FUNCTION        reduce using rule 104 (functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY .)
    PRINCIPAL       reduce using rule 104 (functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY .)
    $end            reduce using rule 104 (functions1 -> ID saveFunction LPAREN args RPAREN vars LCURLY statements RCURLY .)


state 217

    (17) assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 17 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 17 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)


state 218

    (18) assign -> ID add_id2 arr EQUALS saveOperator exp . generateAssignQuad
    (19) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 19 (generateAssignQuad -> .)
    TO              reduce using rule 19 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 224

state 219

    (27) paramReadAux -> exp generateQuadREAD COMMA . operatorRead paramReadAux
    (28) operatorRead -> .

    ID              reduce using rule 28 (operatorRead -> .)
    CTEI            reduce using rule 28 (operatorRead -> .)
    CTEF            reduce using rule 28 (operatorRead -> .)
    CTEC            reduce using rule 28 (operatorRead -> .)
    CTESTRING       reduce using rule 28 (operatorRead -> .)
    LPAREN          reduce using rule 28 (operatorRead -> .)

    operatorRead                   shift and go to state 225

state 220

    (34) paramWriteAux -> exp generateQuadPRINT COMMA . writeOperator paramWriteAux
    (35) writeOperator -> .

    ID              reduce using rule 35 (writeOperator -> .)
    CTEI            reduce using rule 35 (writeOperator -> .)
    CTEF            reduce using rule 35 (writeOperator -> .)
    CTEC            reduce using rule 35 (writeOperator -> .)
    CTESTRING       reduce using rule 35 (writeOperator -> .)
    LPAREN          reduce using rule 35 (writeOperator -> .)

    writeOperator                  shift and go to state 226

state 221

    (36) for -> FOR forOP assign TO CTEI DO . generateQuadFOR LCURLY statements RCURLY LoopEnd
    (38) generateQuadFOR -> .

    LCURLY          reduce using rule 38 (generateQuadFOR -> .)

    generateQuadFOR                shift and go to state 227

state 222

    (40) while -> WHILE whileOP LPAREN exp RPAREN DO . generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (42) generateQuadWHILE -> .

    LCURLY          reduce using rule 42 (generateQuadWHILE -> .)

    generateQuadWHILE              shift and go to state 228

state 223

    (43) if -> IF LPAREN exp RPAREN generateQuadIF THEN . LCURLY statements RCURLY else endIF

    LCURLY          shift and go to state 229


state 224

    (18) assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 18 (assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 18 (assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .)


state 225

    (27) paramReadAux -> exp generateQuadREAD COMMA operatorRead . paramReadAux
    (26) paramReadAux -> . exp generateQuadREAD
    (27) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 184
    paramReadAux                   shift and go to state 230
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 226

    (34) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator . paramWriteAux
    (33) paramWriteAux -> . exp generateQuadPRINT
    (34) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (57) exp -> . nexp generateQuadOR
    (58) exp -> . nexp generateQuadOR OR saveOperator nexp
    (59) nexp -> . compexp generateQuadAND
    (60) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (61) compexp -> . sumexp
    (62) compexp -> . compexp1 sumexp
    (68) sumexp -> . mulexp
    (69) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (70) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (63) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (64) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (65) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (66) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (67) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (71) mulexp -> . pexp
    (72) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (73) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (74) pexp -> . ID add_id2
    (75) pexp -> . CTEI saveCTE
    (76) pexp -> . CTEF saveCTE
    (77) pexp -> . CTEC saveCTE
    (78) pexp -> . CTESTRING saveCTE
    (79) pexp -> . functionCall
    (80) pexp -> . LPAREN exp RPAREN
    (22) functionCall -> . ID LPAREN exp RPAREN

    ID              shift and go to state 69
    CTEI            shift and go to state 107
    CTEF            shift and go to state 70
    CTEC            shift and go to state 71
    CTESTRING       shift and go to state 72
    LPAREN          shift and go to state 74

    exp                            shift and go to state 188
    paramWriteAux                  shift and go to state 231
    nexp                           shift and go to state 63
    compexp                        shift and go to state 64
    sumexp                         shift and go to state 65
    compexp1                       shift and go to state 66
    mulexp                         shift and go to state 67
    pexp                           shift and go to state 68
    functionCall                   shift and go to state 73

state 227

    (36) for -> FOR forOP assign TO CTEI DO generateQuadFOR . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 232


state 228

    (40) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 233


state 229

    (43) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY . statements RCURLY else endIF
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)

    statements                     shift and go to state 234
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 230

    (27) paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .

    RPAREN          reduce using rule 27 (paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .)


state 231

    (34) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .

    RPAREN          reduce using rule 34 (paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .)


state 232

    (36) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY . statements RCURLY LoopEnd
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)

    assign                         shift and go to state 76
    statements                     shift and go to state 235
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 233

    (40) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY . statements RCURLY LoopEnd
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)

    statements                     shift and go to state 236
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 234

    (43) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements . RCURLY else endIF

    RCURLY          shift and go to state 237


state 235

    (36) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 238


state 236

    (40) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 239


state 237

    (43) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY . else endIF
    (44) else -> . ELSE generateQuadELSE LCURLY statements RCURLY
    (45) else -> . empty
    (114) empty -> .

    ELSE            shift and go to state 241
    ID              reduce using rule 114 (empty -> .)
    READ            reduce using rule 114 (empty -> .)
    WRITE           reduce using rule 114 (empty -> .)
    FOR             reduce using rule 114 (empty -> .)
    WHILE           reduce using rule 114 (empty -> .)
    IF              reduce using rule 114 (empty -> .)
    RETURN          reduce using rule 114 (empty -> .)
    RCURLY          reduce using rule 114 (empty -> .)
    SEMMICOLON      reduce using rule 114 (empty -> .)

    else                           shift and go to state 240
    empty                          shift and go to state 242

state 238

    (36) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY . LoopEnd
    (39) LoopEnd -> .

    ID              reduce using rule 39 (LoopEnd -> .)
    READ            reduce using rule 39 (LoopEnd -> .)
    WRITE           reduce using rule 39 (LoopEnd -> .)
    FOR             reduce using rule 39 (LoopEnd -> .)
    WHILE           reduce using rule 39 (LoopEnd -> .)
    IF              reduce using rule 39 (LoopEnd -> .)
    RETURN          reduce using rule 39 (LoopEnd -> .)
    RCURLY          reduce using rule 39 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 39 (LoopEnd -> .)

    LoopEnd                        shift and go to state 243

state 239

    (40) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY . LoopEnd
    (39) LoopEnd -> .

    ID              reduce using rule 39 (LoopEnd -> .)
    READ            reduce using rule 39 (LoopEnd -> .)
    WRITE           reduce using rule 39 (LoopEnd -> .)
    FOR             reduce using rule 39 (LoopEnd -> .)
    WHILE           reduce using rule 39 (LoopEnd -> .)
    IF              reduce using rule 39 (LoopEnd -> .)
    RETURN          reduce using rule 39 (LoopEnd -> .)
    RCURLY          reduce using rule 39 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 39 (LoopEnd -> .)

    LoopEnd                        shift and go to state 244

state 240

    (43) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else . endIF
    (54) endIF -> .

    ID              reduce using rule 54 (endIF -> .)
    READ            reduce using rule 54 (endIF -> .)
    WRITE           reduce using rule 54 (endIF -> .)
    FOR             reduce using rule 54 (endIF -> .)
    WHILE           reduce using rule 54 (endIF -> .)
    IF              reduce using rule 54 (endIF -> .)
    RETURN          reduce using rule 54 (endIF -> .)
    RCURLY          reduce using rule 54 (endIF -> .)
    SEMMICOLON      reduce using rule 54 (endIF -> .)

    endIF                          shift and go to state 245

state 241

    (44) else -> ELSE . generateQuadELSE LCURLY statements RCURLY
    (55) generateQuadELSE -> .

    LCURLY          reduce using rule 55 (generateQuadELSE -> .)

    generateQuadELSE               shift and go to state 246

state 242

    (45) else -> empty .

    ID              reduce using rule 45 (else -> empty .)
    READ            reduce using rule 45 (else -> empty .)
    WRITE           reduce using rule 45 (else -> empty .)
    FOR             reduce using rule 45 (else -> empty .)
    WHILE           reduce using rule 45 (else -> empty .)
    IF              reduce using rule 45 (else -> empty .)
    RETURN          reduce using rule 45 (else -> empty .)
    RCURLY          reduce using rule 45 (else -> empty .)
    SEMMICOLON      reduce using rule 45 (else -> empty .)


state 243

    (36) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 36 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)


state 244

    (40) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 40 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)


state 245

    (43) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .

    ID              reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    READ            reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WRITE           reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    FOR             reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WHILE           reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    IF              reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RETURN          reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RCURLY          reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    SEMMICOLON      reduce using rule 43 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)


state 246

    (44) else -> ELSE generateQuadELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 247


state 247

    (44) else -> ELSE generateQuadELSE LCURLY . statements RCURLY
    (8) statements -> . assign SEMMICOLON statements
    (9) statements -> . functionCall SEMMICOLON statements
    (10) statements -> . read statements SEMMICOLON statements
    (11) statements -> . write statements SEMMICOLON statements
    (12) statements -> . for statements
    (13) statements -> . while statements
    (14) statements -> . if statements
    (15) statements -> . return statements
    (16) statements -> . empty
    (17) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (18) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (22) functionCall -> . ID LPAREN exp RPAREN
    (23) read -> . READ operatorRead LPAREN paramRead RPAREN
    (30) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (36) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (40) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (43) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (112) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (113) return -> . RETURN LPAREN exp RPAREN
    (114) empty -> .

    ID              shift and go to state 85
    READ            shift and go to state 86
    WRITE           shift and go to state 87
    FOR             shift and go to state 88
    WHILE           shift and go to state 89
    IF              shift and go to state 90
    RETURN          shift and go to state 91
    RCURLY          reduce using rule 114 (empty -> .)

    statements                     shift and go to state 248
    assign                         shift and go to state 76
    functionCall                   shift and go to state 77
    read                           shift and go to state 78
    write                          shift and go to state 79
    for                            shift and go to state 80
    while                          shift and go to state 81
    if                             shift and go to state 82
    return                         shift and go to state 83
    empty                          shift and go to state 84

state 248

    (44) else -> ELSE generateQuadELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 249


state 249

    (44) else -> ELSE generateQuadELSE LCURLY statements RCURLY .

    ID              reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    READ            reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WRITE           reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WHILE           reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    IF              reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    SEMMICOLON      reduce using rule 44 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINCIPAL in state 5 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 61 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 69 resolved as shift
WARNING: shift/reduce conflict for SEMMICOLON in state 192 resolved as shift
