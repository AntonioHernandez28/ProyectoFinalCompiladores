Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA
    COMPARE
    END
    FROM
    MODA
    PLOTXY
    SIMPLEREGRESSION
    VARIANZA

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMMICOLON addProgram program1
Rule 2     addProgram -> <empty>
Rule 3     program1 -> vars mainQuad functions mainEnd program2
Rule 4     program1 -> vars mainQuad functions
Rule 5     program1 -> program2
Rule 6     program2 -> principal
Rule 7     principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
Rule 8     mainQuad -> <empty>
Rule 9     mainEnd -> <empty>
Rule 10    statements -> assign SEMMICOLON statements
Rule 11    statements -> functionCall SEMMICOLON statements
Rule 12    statements -> read statements SEMMICOLON statements
Rule 13    statements -> write statements SEMMICOLON statements
Rule 14    statements -> for statements
Rule 15    statements -> while statements
Rule 16    statements -> if statements
Rule 17    statements -> return statements
Rule 18    statements -> empty
Rule 19    assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad
Rule 20    assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
Rule 21    generateAssignQuad -> <empty>
Rule 22    add_id -> <empty>
Rule 23    add_id2 -> <empty>
Rule 24    add_id3 -> <empty>
Rule 25    media -> MEDIA LPAREN arr RPAREN SEMMICOLON
Rule 26    functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
Rule 27    validateFunctionID -> <empty>
Rule 28    verifyParams -> <empty>
Rule 29    paramsCount -> <empty>
Rule 30    generateQuadPARAM -> <empty>
Rule 31    expAux -> exp generateQuadPARAM paramsCount
Rule 32    expAux -> exp generateQuadPARAM COMMA paramsCount expAux
Rule 33    expAux -> empty
Rule 34    generateQuadGOSUB -> <empty>
Rule 35    fillEndProc -> <empty>
Rule 36    functionERA -> <empty>
Rule 37    read -> READ operatorRead LPAREN paramReadAux RPAREN
Rule 38    paramRead -> paramReadAux
Rule 39    paramRead -> empty
Rule 40    paramReadAux -> exp generateQuadREAD
Rule 41    paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux
Rule 42    operatorRead -> <empty>
Rule 43    generateQuadREAD -> <empty>
Rule 44    write -> WRITE writeOperator LPAREN paramWrite RPAREN
Rule 45    paramWrite -> paramWriteAux
Rule 46    paramWrite -> empty
Rule 47    paramWriteAux -> exp generateQuadPRINT
Rule 48    paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux
Rule 49    writeOperator -> <empty>
Rule 50    generateQuadPRINT -> <empty>
Rule 51    LoopEnd -> <empty>
Rule 52    for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
Rule 53    forOP -> <empty>
Rule 54    generateQuadFOR -> <empty>
Rule 55    while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
Rule 56    whileOP -> <empty>
Rule 57    generateQuadWHILE -> <empty>
Rule 58    if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
Rule 59    else -> ELSE generateQuadELSE LCURLY statements RCURLY
Rule 60    else -> empty
Rule 61    generateQuadIF -> <empty>
Rule 62    endIF -> <empty>
Rule 63    generateQuadELSE -> <empty>
Rule 64    exp -> nexp generateQuadOR
Rule 65    exp -> nexp generateQuadOR OR saveOperator nexp
Rule 66    generateQuadOR -> <empty>
Rule 67    nexp -> compexp generateQuadAND
Rule 68    nexp -> compexp generateQuadAND AND saveOperator compexp
Rule 69    generateQuadAND -> <empty>
Rule 70    compexp -> sumexp
Rule 71    compexp -> compexp1 sumexp
Rule 72    compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE
Rule 73    compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE
Rule 74    compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE
Rule 75    compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE
Rule 76    compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE
Rule 77    generateQuadCOMPARE -> <empty>
Rule 78    sumexp -> mulexp
Rule 79    sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM
Rule 80    sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM
Rule 81    generateQuadSUM -> <empty>
Rule 82    mulexp -> pexp
Rule 83    mulexp -> pexp MUL saveOperator pexp generateQuadMUL
Rule 84    mulexp -> pexp DIV saveOperator pexp generateQuadMUL
Rule 85    generateQuadMUL -> <empty>
Rule 86    pexp -> ID add_id2
Rule 87    pexp -> CTEI saveCTE
Rule 88    pexp -> CTEF saveCTE
Rule 89    pexp -> CTEC saveCTE
Rule 90    pexp -> CTESTRING saveCTE
Rule 91    pexp -> functionCall
Rule 92    pexp -> LPAREN exp RPAREN
Rule 93    pexp -> ID arr add_id3
Rule 94    pexp -> empty
Rule 95    saveCTE -> <empty>
Rule 96    saveOperator -> <empty>
Rule 97    vars -> var
Rule 98    vars -> empty
Rule 99    var -> VARS var2
Rule 100   var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar
Rule 101   var2 -> empty
Rule 102   var1 -> ID
Rule 103   var1 -> ID COMMA var1 addVar
Rule 104   var1 -> ID arr
Rule 105   var1 -> ID arr COMMA var1 addVar
Rule 106   var1 -> empty
Rule 107   addVar -> <empty>
Rule 108   saveTypeVar -> <empty>
Rule 109   type -> INT saveTypeVar
Rule 110   type -> CHAR saveTypeVar
Rule 111   type -> FLOAT saveTypeVar
Rule 112   arr -> LBRACKET CTEI RBRACKET
Rule 113   arr -> LBRACKET exp RBRACKET
Rule 114   functions -> FUNCTION INT functions1 endFunc functions
Rule 115   functions -> FUNCTION CHAR functions1 endFunc functions
Rule 116   functions -> FUNCTION FLOAT functions1 endFunc functions
Rule 117   functions -> FUNCTION VOID functions1 endFunc functions
Rule 118   functions -> empty
Rule 119   functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
Rule 120   functions1 -> empty
Rule 121   setStartDirection -> <empty>
Rule 122   addParameter -> <empty>
Rule 123   parameters -> paramsAux
Rule 124   parameters -> empty
Rule 125   paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 126   paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 127   paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam
Rule 128   nextParam -> COMMA paramsAux
Rule 129   nextParam -> empty
Rule 130   endFunc -> <empty>
Rule 131   saveFunction -> <empty>
Rule 132   args -> args type TWOPOINTS var1 addVar
Rule 133   args -> empty
Rule 134   args1 -> ID addVar
Rule 135   args1 -> ID COMMA args1
Rule 136   args1 -> empty
Rule 137   return -> RETURN LPAREN exp RPAREN SEMMICOLON
Rule 138   return -> RETURN LPAREN exp RPAREN
Rule 139   empty -> <empty>

Terminals, with rules where they appear

AND                  : 68
CHAR                 : 110 115 127
COMILLA              : 
COMMA                : 32 41 48 103 105 128 135
COMPARE              : 
CTEC                 : 89
CTEF                 : 88
CTEI                 : 52 87 112
CTESTRING            : 90
DIV                  : 84
DO                   : 52 55
ELSE                 : 59
END                  : 
EQUALS               : 19 20
FLOAT                : 111 116 126
FOR                  : 52
FROM                 : 
FUNCTION             : 114 115 116 117
GT                   : 72
GTE                  : 74
ID                   : 1 19 20 26 86 93 102 103 104 105 119 125 126 127 134 135
IF                   : 58
INT                  : 109 114 125
LBRACKET             : 112 113
LCURLY               : 7 52 55 58 59 119
LPAREN               : 7 25 26 37 44 55 58 92 119 137 138
LT                   : 73
LTE                  : 75
MEDIA                : 25
MINUS                : 80
MODA                 : 
MUL                  : 83
NE                   : 76
OR                   : 65
PLOTXY               : 
PLUS                 : 79
PRINCIPAL            : 7
PROGRAM              : 1
RBRACKET             : 112 113
RCURLY               : 7 52 55 58 59 119
READ                 : 37
RETURN               : 137 138
RPAREN               : 7 25 26 37 44 55 58 92 119 137 138
SEMMICOLON           : 1 10 11 12 13 25 100 137
SIMPLEREGRESSION     : 
THEN                 : 58
TO                   : 52
TWOPOINTS            : 100 125 126 127 132
VARIANZA             : 
VARS                 : 99
VOID                 : 117
WHILE                : 55
WRITE                : 44
error                : 

Nonterminals, with rules where they appear

LoopEnd              : 52 55
addParameter         : 125 126 127
addProgram           : 1
addVar               : 100 103 105 132 134
add_id               : 
add_id2              : 19 20 86
add_id3              : 93
args                 : 132
args1                : 135
arr                  : 20 25 93 104 105
assign               : 10 52
compexp              : 67 68 68
compexp1             : 71
else                 : 58
empty                : 18 33 39 46 60 94 98 101 106 118 120 124 129 133 136
endFunc              : 114 115 116 117
endIF                : 58
exp                  : 19 20 31 32 40 41 47 48 55 58 92 113 137 138
expAux               : 26 32
fillEndProc          : 
for                  : 14
forOP                : 52
functionCall         : 11 91
functionERA          : 26
functions            : 3 4 114 115 116 117
functions1           : 114 115 116 117
generateAssignQuad   : 19 20
generateQuadAND      : 67 68
generateQuadCOMPARE  : 72 73 74 75 76
generateQuadELSE     : 59
generateQuadFOR      : 52
generateQuadGOSUB    : 26
generateQuadIF       : 58
generateQuadMUL      : 83 84
generateQuadOR       : 64 65
generateQuadPARAM    : 31 32
generateQuadPRINT    : 47 48
generateQuadREAD     : 40 41
generateQuadSUM      : 79 80
generateQuadWHILE    : 55
if                   : 16
mainEnd              : 3
mainQuad             : 3 4
media                : 
mulexp               : 78 79 79 80 80
nexp                 : 64 65 65
nextParam            : 125 126 127
operatorRead         : 37 41
paramRead            : 
paramReadAux         : 37 38 41
paramWrite           : 44
paramWriteAux        : 45 48
parameters           : 119
paramsAux            : 123 128
paramsCount          : 31 32
pexp                 : 82 83 83 84 84
principal            : 6
program              : 0
program1             : 1
program2             : 3 5
read                 : 12
return               : 17
saveCTE              : 87 88 89 90
saveFunction         : 7 119
saveOperator         : 19 20 65 68 72 73 74 75 76 79 80 83 84
saveTypeVar          : 109 110 111 125 126 127
setStartDirection    : 119
statements           : 7 10 11 12 12 13 13 14 15 16 17 52 55 58 59 119
sumexp               : 70 71 72 72 73 73 74 74 75 75 76 76
type                 : 100 132
validateFunctionID   : 26
var                  : 97
var1                 : 100 103 105 132
var2                 : 99 100
vars                 : 3 4 7 119
verifyParams         : 26
while                : 15
whileOP              : 55
write                : 13
writeOperator        : 44 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMMICOLON addProgram program1

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMMICOLON addProgram program1

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMMICOLON addProgram program1

    SEMMICOLON      shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMMICOLON . addProgram program1
    (2) addProgram -> .

    VARS            reduce using rule 2 (addProgram -> .)
    PRINCIPAL       reduce using rule 2 (addProgram -> .)
    FUNCTION        reduce using rule 2 (addProgram -> .)
    $end            reduce using rule 2 (addProgram -> .)

    addProgram                     shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMMICOLON addProgram . program1
    (3) program1 -> . vars mainQuad functions mainEnd program2
    (4) program1 -> . vars mainQuad functions
    (5) program1 -> . program2
    (97) vars -> . var
    (98) vars -> . empty
    (6) program2 -> . principal
    (99) var -> . VARS var2
    (139) empty -> .
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

  ! shift/reduce conflict for PRINCIPAL resolved as shift
    VARS            shift and go to state 12
    FUNCTION        reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)
    PRINCIPAL       shift and go to state 13

  ! PRINCIPAL       [ reduce using rule 139 (empty -> .) ]

    program1                       shift and go to state 6
    vars                           shift and go to state 7
    program2                       shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    principal                      shift and go to state 11

state 6

    (1) program -> PROGRAM ID SEMMICOLON addProgram program1 .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMMICOLON addProgram program1 .)


state 7

    (3) program1 -> vars . mainQuad functions mainEnd program2
    (4) program1 -> vars . mainQuad functions
    (8) mainQuad -> .

    FUNCTION        reduce using rule 8 (mainQuad -> .)
    PRINCIPAL       reduce using rule 8 (mainQuad -> .)
    $end            reduce using rule 8 (mainQuad -> .)

    mainQuad                       shift and go to state 14

state 8

    (5) program1 -> program2 .

    $end            reduce using rule 5 (program1 -> program2 .)


state 9

    (97) vars -> var .

    FUNCTION        reduce using rule 97 (vars -> var .)
    PRINCIPAL       reduce using rule 97 (vars -> var .)
    $end            reduce using rule 97 (vars -> var .)
    ID              reduce using rule 97 (vars -> var .)
    READ            reduce using rule 97 (vars -> var .)
    WRITE           reduce using rule 97 (vars -> var .)
    FOR             reduce using rule 97 (vars -> var .)
    WHILE           reduce using rule 97 (vars -> var .)
    IF              reduce using rule 97 (vars -> var .)
    RETURN          reduce using rule 97 (vars -> var .)
    RCURLY          reduce using rule 97 (vars -> var .)
    LCURLY          reduce using rule 97 (vars -> var .)


state 10

    (98) vars -> empty .

    FUNCTION        reduce using rule 98 (vars -> empty .)
    PRINCIPAL       reduce using rule 98 (vars -> empty .)
    $end            reduce using rule 98 (vars -> empty .)
    ID              reduce using rule 98 (vars -> empty .)
    READ            reduce using rule 98 (vars -> empty .)
    WRITE           reduce using rule 98 (vars -> empty .)
    FOR             reduce using rule 98 (vars -> empty .)
    WHILE           reduce using rule 98 (vars -> empty .)
    IF              reduce using rule 98 (vars -> empty .)
    RETURN          reduce using rule 98 (vars -> empty .)
    RCURLY          reduce using rule 98 (vars -> empty .)
    LCURLY          reduce using rule 98 (vars -> empty .)


state 11

    (6) program2 -> principal .

    $end            reduce using rule 6 (program2 -> principal .)


state 12

    (99) var -> VARS . var2
    (100) var2 -> . var2 type TWOPOINTS var1 SEMMICOLON addVar
    (101) var2 -> . empty
    (139) empty -> .

    INT             reduce using rule 139 (empty -> .)
    CHAR            reduce using rule 139 (empty -> .)
    FLOAT           reduce using rule 139 (empty -> .)
    FUNCTION        reduce using rule 139 (empty -> .)
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    RCURLY          reduce using rule 139 (empty -> .)
    LCURLY          reduce using rule 139 (empty -> .)

    var2                           shift and go to state 15
    empty                          shift and go to state 16

state 13

    (7) principal -> PRINCIPAL . saveFunction LPAREN RPAREN LCURLY vars statements RCURLY
    (131) saveFunction -> .

    LPAREN          reduce using rule 131 (saveFunction -> .)

    saveFunction                   shift and go to state 17

state 14

    (3) program1 -> vars mainQuad . functions mainEnd program2
    (4) program1 -> vars mainQuad . functions
    (114) functions -> . FUNCTION INT functions1 endFunc functions
    (115) functions -> . FUNCTION CHAR functions1 endFunc functions
    (116) functions -> . FUNCTION FLOAT functions1 endFunc functions
    (117) functions -> . FUNCTION VOID functions1 endFunc functions
    (118) functions -> . empty
    (139) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions                      shift and go to state 18
    empty                          shift and go to state 20

state 15

    (99) var -> VARS var2 .
    (100) var2 -> var2 . type TWOPOINTS var1 SEMMICOLON addVar
    (109) type -> . INT saveTypeVar
    (110) type -> . CHAR saveTypeVar
    (111) type -> . FLOAT saveTypeVar

    FUNCTION        reduce using rule 99 (var -> VARS var2 .)
    PRINCIPAL       reduce using rule 99 (var -> VARS var2 .)
    $end            reduce using rule 99 (var -> VARS var2 .)
    ID              reduce using rule 99 (var -> VARS var2 .)
    READ            reduce using rule 99 (var -> VARS var2 .)
    WRITE           reduce using rule 99 (var -> VARS var2 .)
    FOR             reduce using rule 99 (var -> VARS var2 .)
    WHILE           reduce using rule 99 (var -> VARS var2 .)
    IF              reduce using rule 99 (var -> VARS var2 .)
    RETURN          reduce using rule 99 (var -> VARS var2 .)
    RCURLY          reduce using rule 99 (var -> VARS var2 .)
    LCURLY          reduce using rule 99 (var -> VARS var2 .)
    INT             shift and go to state 22
    CHAR            shift and go to state 23
    FLOAT           shift and go to state 24

    type                           shift and go to state 21

state 16

    (101) var2 -> empty .

    INT             reduce using rule 101 (var2 -> empty .)
    CHAR            reduce using rule 101 (var2 -> empty .)
    FLOAT           reduce using rule 101 (var2 -> empty .)
    FUNCTION        reduce using rule 101 (var2 -> empty .)
    PRINCIPAL       reduce using rule 101 (var2 -> empty .)
    $end            reduce using rule 101 (var2 -> empty .)
    ID              reduce using rule 101 (var2 -> empty .)
    READ            reduce using rule 101 (var2 -> empty .)
    WRITE           reduce using rule 101 (var2 -> empty .)
    FOR             reduce using rule 101 (var2 -> empty .)
    WHILE           reduce using rule 101 (var2 -> empty .)
    IF              reduce using rule 101 (var2 -> empty .)
    RETURN          reduce using rule 101 (var2 -> empty .)
    RCURLY          reduce using rule 101 (var2 -> empty .)
    LCURLY          reduce using rule 101 (var2 -> empty .)


state 17

    (7) principal -> PRINCIPAL saveFunction . LPAREN RPAREN LCURLY vars statements RCURLY

    LPAREN          shift and go to state 25


state 18

    (3) program1 -> vars mainQuad functions . mainEnd program2
    (4) program1 -> vars mainQuad functions .
    (9) mainEnd -> .

    $end            reduce using rule 4 (program1 -> vars mainQuad functions .)
    PRINCIPAL       reduce using rule 9 (mainEnd -> .)

    mainEnd                        shift and go to state 26

state 19

    (114) functions -> FUNCTION . INT functions1 endFunc functions
    (115) functions -> FUNCTION . CHAR functions1 endFunc functions
    (116) functions -> FUNCTION . FLOAT functions1 endFunc functions
    (117) functions -> FUNCTION . VOID functions1 endFunc functions

    INT             shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30


state 20

    (118) functions -> empty .

    PRINCIPAL       reduce using rule 118 (functions -> empty .)
    $end            reduce using rule 118 (functions -> empty .)


state 21

    (100) var2 -> var2 type . TWOPOINTS var1 SEMMICOLON addVar

    TWOPOINTS       shift and go to state 31


state 22

    (109) type -> INT . saveTypeVar
    (108) saveTypeVar -> .

    TWOPOINTS       reduce using rule 108 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 32

state 23

    (110) type -> CHAR . saveTypeVar
    (108) saveTypeVar -> .

    TWOPOINTS       reduce using rule 108 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 33

state 24

    (111) type -> FLOAT . saveTypeVar
    (108) saveTypeVar -> .

    TWOPOINTS       reduce using rule 108 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 34

state 25

    (7) principal -> PRINCIPAL saveFunction LPAREN . RPAREN LCURLY vars statements RCURLY

    RPAREN          shift and go to state 35


state 26

    (3) program1 -> vars mainQuad functions mainEnd . program2
    (6) program2 -> . principal
    (7) principal -> . PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY

    PRINCIPAL       shift and go to state 13

    program2                       shift and go to state 36
    principal                      shift and go to state 11

state 27

    (114) functions -> FUNCTION INT . functions1 endFunc functions
    (119) functions1 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (120) functions1 -> . empty
    (139) empty -> .

    ID              shift and go to state 38
    FUNCTION        reduce using rule 139 (empty -> .)
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions1                     shift and go to state 37
    empty                          shift and go to state 39

state 28

    (115) functions -> FUNCTION CHAR . functions1 endFunc functions
    (119) functions1 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (120) functions1 -> . empty
    (139) empty -> .

    ID              shift and go to state 38
    FUNCTION        reduce using rule 139 (empty -> .)
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions1                     shift and go to state 40
    empty                          shift and go to state 39

state 29

    (116) functions -> FUNCTION FLOAT . functions1 endFunc functions
    (119) functions1 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (120) functions1 -> . empty
    (139) empty -> .

    ID              shift and go to state 38
    FUNCTION        reduce using rule 139 (empty -> .)
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions1                     shift and go to state 41
    empty                          shift and go to state 39

state 30

    (117) functions -> FUNCTION VOID . functions1 endFunc functions
    (119) functions1 -> . ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (120) functions1 -> . empty
    (139) empty -> .

    ID              shift and go to state 38
    FUNCTION        reduce using rule 139 (empty -> .)
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions1                     shift and go to state 42
    empty                          shift and go to state 39

state 31

    (100) var2 -> var2 type TWOPOINTS . var1 SEMMICOLON addVar
    (102) var1 -> . ID
    (103) var1 -> . ID COMMA var1 addVar
    (104) var1 -> . ID arr
    (105) var1 -> . ID arr COMMA var1 addVar
    (106) var1 -> . empty
    (139) empty -> .

    ID              shift and go to state 44
    SEMMICOLON      reduce using rule 139 (empty -> .)

    var1                           shift and go to state 43
    empty                          shift and go to state 45

state 32

    (109) type -> INT saveTypeVar .

    TWOPOINTS       reduce using rule 109 (type -> INT saveTypeVar .)


state 33

    (110) type -> CHAR saveTypeVar .

    TWOPOINTS       reduce using rule 110 (type -> CHAR saveTypeVar .)


state 34

    (111) type -> FLOAT saveTypeVar .

    TWOPOINTS       reduce using rule 111 (type -> FLOAT saveTypeVar .)


state 35

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN . LCURLY vars statements RCURLY

    LCURLY          shift and go to state 46


state 36

    (3) program1 -> vars mainQuad functions mainEnd program2 .

    $end            reduce using rule 3 (program1 -> vars mainQuad functions mainEnd program2 .)


state 37

    (114) functions -> FUNCTION INT functions1 . endFunc functions
    (130) endFunc -> .

    FUNCTION        reduce using rule 130 (endFunc -> .)
    PRINCIPAL       reduce using rule 130 (endFunc -> .)
    $end            reduce using rule 130 (endFunc -> .)

    endFunc                        shift and go to state 47

state 38

    (119) functions1 -> ID . saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (131) saveFunction -> .

    LPAREN          reduce using rule 131 (saveFunction -> .)

    saveFunction                   shift and go to state 48

state 39

    (120) functions1 -> empty .

    FUNCTION        reduce using rule 120 (functions1 -> empty .)
    PRINCIPAL       reduce using rule 120 (functions1 -> empty .)
    $end            reduce using rule 120 (functions1 -> empty .)


state 40

    (115) functions -> FUNCTION CHAR functions1 . endFunc functions
    (130) endFunc -> .

    FUNCTION        reduce using rule 130 (endFunc -> .)
    PRINCIPAL       reduce using rule 130 (endFunc -> .)
    $end            reduce using rule 130 (endFunc -> .)

    endFunc                        shift and go to state 49

state 41

    (116) functions -> FUNCTION FLOAT functions1 . endFunc functions
    (130) endFunc -> .

    FUNCTION        reduce using rule 130 (endFunc -> .)
    PRINCIPAL       reduce using rule 130 (endFunc -> .)
    $end            reduce using rule 130 (endFunc -> .)

    endFunc                        shift and go to state 50

state 42

    (117) functions -> FUNCTION VOID functions1 . endFunc functions
    (130) endFunc -> .

    FUNCTION        reduce using rule 130 (endFunc -> .)
    PRINCIPAL       reduce using rule 130 (endFunc -> .)
    $end            reduce using rule 130 (endFunc -> .)

    endFunc                        shift and go to state 51

state 43

    (100) var2 -> var2 type TWOPOINTS var1 . SEMMICOLON addVar

    SEMMICOLON      shift and go to state 52


state 44

    (102) var1 -> ID .
    (103) var1 -> ID . COMMA var1 addVar
    (104) var1 -> ID . arr
    (105) var1 -> ID . arr COMMA var1 addVar
    (112) arr -> . LBRACKET CTEI RBRACKET
    (113) arr -> . LBRACKET exp RBRACKET

    SEMMICOLON      reduce using rule 102 (var1 -> ID .)
    COMMA           shift and go to state 53
    LBRACKET        shift and go to state 55

    arr                            shift and go to state 54

state 45

    (106) var1 -> empty .

    SEMMICOLON      reduce using rule 106 (var1 -> empty .)


state 46

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY . vars statements RCURLY
    (97) vars -> . var
    (98) vars -> . empty
    (99) var -> . VARS var2
    (139) empty -> .

    VARS            shift and go to state 12
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    RCURLY          reduce using rule 139 (empty -> .)

    vars                           shift and go to state 56
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 47

    (114) functions -> FUNCTION INT functions1 endFunc . functions
    (114) functions -> . FUNCTION INT functions1 endFunc functions
    (115) functions -> . FUNCTION CHAR functions1 endFunc functions
    (116) functions -> . FUNCTION FLOAT functions1 endFunc functions
    (117) functions -> . FUNCTION VOID functions1 endFunc functions
    (118) functions -> . empty
    (139) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions                      shift and go to state 57
    empty                          shift and go to state 20

state 48

    (119) functions1 -> ID saveFunction . LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY

    LPAREN          shift and go to state 58


state 49

    (115) functions -> FUNCTION CHAR functions1 endFunc . functions
    (114) functions -> . FUNCTION INT functions1 endFunc functions
    (115) functions -> . FUNCTION CHAR functions1 endFunc functions
    (116) functions -> . FUNCTION FLOAT functions1 endFunc functions
    (117) functions -> . FUNCTION VOID functions1 endFunc functions
    (118) functions -> . empty
    (139) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions                      shift and go to state 59
    empty                          shift and go to state 20

state 50

    (116) functions -> FUNCTION FLOAT functions1 endFunc . functions
    (114) functions -> . FUNCTION INT functions1 endFunc functions
    (115) functions -> . FUNCTION CHAR functions1 endFunc functions
    (116) functions -> . FUNCTION FLOAT functions1 endFunc functions
    (117) functions -> . FUNCTION VOID functions1 endFunc functions
    (118) functions -> . empty
    (139) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions                      shift and go to state 60
    empty                          shift and go to state 20

state 51

    (117) functions -> FUNCTION VOID functions1 endFunc . functions
    (114) functions -> . FUNCTION INT functions1 endFunc functions
    (115) functions -> . FUNCTION CHAR functions1 endFunc functions
    (116) functions -> . FUNCTION FLOAT functions1 endFunc functions
    (117) functions -> . FUNCTION VOID functions1 endFunc functions
    (118) functions -> . empty
    (139) empty -> .

    FUNCTION        shift and go to state 19
    PRINCIPAL       reduce using rule 139 (empty -> .)
    $end            reduce using rule 139 (empty -> .)

    functions                      shift and go to state 61
    empty                          shift and go to state 20

state 52

    (100) var2 -> var2 type TWOPOINTS var1 SEMMICOLON . addVar
    (107) addVar -> .

    INT             reduce using rule 107 (addVar -> .)
    CHAR            reduce using rule 107 (addVar -> .)
    FLOAT           reduce using rule 107 (addVar -> .)
    FUNCTION        reduce using rule 107 (addVar -> .)
    PRINCIPAL       reduce using rule 107 (addVar -> .)
    $end            reduce using rule 107 (addVar -> .)
    ID              reduce using rule 107 (addVar -> .)
    READ            reduce using rule 107 (addVar -> .)
    WRITE           reduce using rule 107 (addVar -> .)
    FOR             reduce using rule 107 (addVar -> .)
    WHILE           reduce using rule 107 (addVar -> .)
    IF              reduce using rule 107 (addVar -> .)
    RETURN          reduce using rule 107 (addVar -> .)
    RCURLY          reduce using rule 107 (addVar -> .)
    LCURLY          reduce using rule 107 (addVar -> .)

    addVar                         shift and go to state 62

state 53

    (103) var1 -> ID COMMA . var1 addVar
    (102) var1 -> . ID
    (103) var1 -> . ID COMMA var1 addVar
    (104) var1 -> . ID arr
    (105) var1 -> . ID arr COMMA var1 addVar
    (106) var1 -> . empty
    (139) empty -> .

    ID              shift and go to state 44
    SEMMICOLON      reduce using rule 139 (empty -> .)

    var1                           shift and go to state 63
    empty                          shift and go to state 45

state 54

    (104) var1 -> ID arr .
    (105) var1 -> ID arr . COMMA var1 addVar

    SEMMICOLON      reduce using rule 104 (var1 -> ID arr .)
    COMMA           shift and go to state 64


state 55

    (112) arr -> LBRACKET . CTEI RBRACKET
    (113) arr -> LBRACKET . exp RBRACKET
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    CTEI            shift and go to state 65
    ID              shift and go to state 73
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)

    exp                            shift and go to state 66
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 56

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)

    statements                     shift and go to state 80
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 57

    (114) functions -> FUNCTION INT functions1 endFunc functions .

    PRINCIPAL       reduce using rule 114 (functions -> FUNCTION INT functions1 endFunc functions .)
    $end            reduce using rule 114 (functions -> FUNCTION INT functions1 endFunc functions .)


state 58

    (119) functions1 -> ID saveFunction LPAREN . parameters RPAREN vars LCURLY setStartDirection statements RCURLY
    (123) parameters -> . paramsAux
    (124) parameters -> . empty
    (125) paramsAux -> . INT saveTypeVar TWOPOINTS ID addParameter nextParam
    (126) paramsAux -> . FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
    (127) paramsAux -> . CHAR saveTypeVar TWOPOINTS ID addParameter nextParam
    (139) empty -> .

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    CHAR            shift and go to state 102
    RPAREN          reduce using rule 139 (empty -> .)

    parameters                     shift and go to state 97
    paramsAux                      shift and go to state 98
    empty                          shift and go to state 99

state 59

    (115) functions -> FUNCTION CHAR functions1 endFunc functions .

    PRINCIPAL       reduce using rule 115 (functions -> FUNCTION CHAR functions1 endFunc functions .)
    $end            reduce using rule 115 (functions -> FUNCTION CHAR functions1 endFunc functions .)


state 60

    (116) functions -> FUNCTION FLOAT functions1 endFunc functions .

    PRINCIPAL       reduce using rule 116 (functions -> FUNCTION FLOAT functions1 endFunc functions .)
    $end            reduce using rule 116 (functions -> FUNCTION FLOAT functions1 endFunc functions .)


state 61

    (117) functions -> FUNCTION VOID functions1 endFunc functions .

    PRINCIPAL       reduce using rule 117 (functions -> FUNCTION VOID functions1 endFunc functions .)
    $end            reduce using rule 117 (functions -> FUNCTION VOID functions1 endFunc functions .)


state 62

    (100) var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .

    INT             reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    CHAR            reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FLOAT           reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FUNCTION        reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    PRINCIPAL       reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    $end            reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    ID              reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    READ            reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WRITE           reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    FOR             reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    WHILE           reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    IF              reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RETURN          reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    RCURLY          reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)
    LCURLY          reduce using rule 100 (var2 -> var2 type TWOPOINTS var1 SEMMICOLON addVar .)


state 63

    (103) var1 -> ID COMMA var1 . addVar
    (107) addVar -> .

    SEMMICOLON      reduce using rule 107 (addVar -> .)

    addVar                         shift and go to state 103

state 64

    (105) var1 -> ID arr COMMA . var1 addVar
    (102) var1 -> . ID
    (103) var1 -> . ID COMMA var1 addVar
    (104) var1 -> . ID arr
    (105) var1 -> . ID arr COMMA var1 addVar
    (106) var1 -> . empty
    (139) empty -> .

    ID              shift and go to state 44
    SEMMICOLON      reduce using rule 139 (empty -> .)

    var1                           shift and go to state 104
    empty                          shift and go to state 45

state 65

    (112) arr -> LBRACKET CTEI . RBRACKET
    (87) pexp -> CTEI . saveCTE
    (95) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 105
    MUL             reduce using rule 95 (saveCTE -> .)
    DIV             reduce using rule 95 (saveCTE -> .)
    PLUS            reduce using rule 95 (saveCTE -> .)
    MINUS           reduce using rule 95 (saveCTE -> .)
    GT              reduce using rule 95 (saveCTE -> .)
    LT              reduce using rule 95 (saveCTE -> .)
    GTE             reduce using rule 95 (saveCTE -> .)
    LTE             reduce using rule 95 (saveCTE -> .)
    NE              reduce using rule 95 (saveCTE -> .)
    AND             reduce using rule 95 (saveCTE -> .)
    OR              reduce using rule 95 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 95 (saveCTE -> .) ]

    saveCTE                        shift and go to state 106

state 66

    (113) arr -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 107


state 67

    (64) exp -> nexp . generateQuadOR
    (65) exp -> nexp . generateQuadOR OR saveOperator nexp
    (66) generateQuadOR -> .

    OR              reduce using rule 66 (generateQuadOR -> .)
    RBRACKET        reduce using rule 66 (generateQuadOR -> .)
    RPAREN          reduce using rule 66 (generateQuadOR -> .)
    COMMA           reduce using rule 66 (generateQuadOR -> .)
    SEMMICOLON      reduce using rule 66 (generateQuadOR -> .)
    TO              reduce using rule 66 (generateQuadOR -> .)

    generateQuadOR                 shift and go to state 108

state 68

    (67) nexp -> compexp . generateQuadAND
    (68) nexp -> compexp . generateQuadAND AND saveOperator compexp
    (69) generateQuadAND -> .

    AND             reduce using rule 69 (generateQuadAND -> .)
    OR              reduce using rule 69 (generateQuadAND -> .)
    RBRACKET        reduce using rule 69 (generateQuadAND -> .)
    RPAREN          reduce using rule 69 (generateQuadAND -> .)
    COMMA           reduce using rule 69 (generateQuadAND -> .)
    SEMMICOLON      reduce using rule 69 (generateQuadAND -> .)
    TO              reduce using rule 69 (generateQuadAND -> .)

    generateQuadAND                shift and go to state 109

state 69

    (70) compexp -> sumexp .
    (72) compexp1 -> sumexp . GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> sumexp . LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> sumexp . GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> sumexp . LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> sumexp . NE saveOperator sumexp generateQuadCOMPARE

    AND             reduce using rule 70 (compexp -> sumexp .)
    OR              reduce using rule 70 (compexp -> sumexp .)
    RBRACKET        reduce using rule 70 (compexp -> sumexp .)
    RPAREN          reduce using rule 70 (compexp -> sumexp .)
    COMMA           reduce using rule 70 (compexp -> sumexp .)
    SEMMICOLON      reduce using rule 70 (compexp -> sumexp .)
    TO              reduce using rule 70 (compexp -> sumexp .)
    GT              shift and go to state 110
    LT              shift and go to state 111
    GTE             shift and go to state 112
    LTE             shift and go to state 113
    NE              shift and go to state 114


state 70

    (71) compexp -> compexp1 . sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

    sumexp                         shift and go to state 115
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 71

    (78) sumexp -> mulexp .
    (79) sumexp -> mulexp . PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> mulexp . MINUS saveOperator mulexp generateQuadSUM

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 78 (sumexp -> mulexp .)
    LT              reduce using rule 78 (sumexp -> mulexp .)
    GTE             reduce using rule 78 (sumexp -> mulexp .)
    LTE             reduce using rule 78 (sumexp -> mulexp .)
    NE              reduce using rule 78 (sumexp -> mulexp .)
    AND             reduce using rule 78 (sumexp -> mulexp .)
    OR              reduce using rule 78 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 78 (sumexp -> mulexp .)
    RPAREN          reduce using rule 78 (sumexp -> mulexp .)
    COMMA           reduce using rule 78 (sumexp -> mulexp .)
    SEMMICOLON      reduce using rule 78 (sumexp -> mulexp .)
    TO              reduce using rule 78 (sumexp -> mulexp .)
    ID              reduce using rule 78 (sumexp -> mulexp .)
    CTEI            reduce using rule 78 (sumexp -> mulexp .)
    CTEF            reduce using rule 78 (sumexp -> mulexp .)
    CTEC            reduce using rule 78 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 78 (sumexp -> mulexp .)
    LPAREN          reduce using rule 78 (sumexp -> mulexp .)
    MUL             reduce using rule 78 (sumexp -> mulexp .)
    DIV             reduce using rule 78 (sumexp -> mulexp .)
    PLUS            shift and go to state 117
    MINUS           shift and go to state 118

  ! PLUS            [ reduce using rule 78 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 78 (sumexp -> mulexp .) ]


state 72

    (82) mulexp -> pexp .
    (83) mulexp -> pexp . MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> pexp . DIV saveOperator pexp generateQuadMUL

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 82 (mulexp -> pexp .)
    MINUS           reduce using rule 82 (mulexp -> pexp .)
    GT              reduce using rule 82 (mulexp -> pexp .)
    LT              reduce using rule 82 (mulexp -> pexp .)
    GTE             reduce using rule 82 (mulexp -> pexp .)
    LTE             reduce using rule 82 (mulexp -> pexp .)
    NE              reduce using rule 82 (mulexp -> pexp .)
    AND             reduce using rule 82 (mulexp -> pexp .)
    OR              reduce using rule 82 (mulexp -> pexp .)
    RBRACKET        reduce using rule 82 (mulexp -> pexp .)
    RPAREN          reduce using rule 82 (mulexp -> pexp .)
    COMMA           reduce using rule 82 (mulexp -> pexp .)
    SEMMICOLON      reduce using rule 82 (mulexp -> pexp .)
    TO              reduce using rule 82 (mulexp -> pexp .)
    ID              reduce using rule 82 (mulexp -> pexp .)
    CTEI            reduce using rule 82 (mulexp -> pexp .)
    CTEF            reduce using rule 82 (mulexp -> pexp .)
    CTEC            reduce using rule 82 (mulexp -> pexp .)
    CTESTRING       reduce using rule 82 (mulexp -> pexp .)
    LPAREN          reduce using rule 82 (mulexp -> pexp .)
    MUL             shift and go to state 119
    DIV             shift and go to state 120

  ! MUL             [ reduce using rule 82 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 82 (mulexp -> pexp .) ]


state 73

    (86) pexp -> ID . add_id2
    (93) pexp -> ID . arr add_id3
    (26) functionCall -> ID . validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (23) add_id2 -> .
    (112) arr -> . LBRACKET CTEI RBRACKET
    (113) arr -> . LBRACKET exp RBRACKET
    (27) validateFunctionID -> .

  ! reduce/reduce conflict for LPAREN resolved using rule 23 (add_id2 -> .)
    MUL             reduce using rule 23 (add_id2 -> .)
    DIV             reduce using rule 23 (add_id2 -> .)
    PLUS            reduce using rule 23 (add_id2 -> .)
    MINUS           reduce using rule 23 (add_id2 -> .)
    GT              reduce using rule 23 (add_id2 -> .)
    LT              reduce using rule 23 (add_id2 -> .)
    GTE             reduce using rule 23 (add_id2 -> .)
    LTE             reduce using rule 23 (add_id2 -> .)
    NE              reduce using rule 23 (add_id2 -> .)
    AND             reduce using rule 23 (add_id2 -> .)
    OR              reduce using rule 23 (add_id2 -> .)
    RBRACKET        reduce using rule 23 (add_id2 -> .)
    RPAREN          reduce using rule 23 (add_id2 -> .)
    COMMA           reduce using rule 23 (add_id2 -> .)
    SEMMICOLON      reduce using rule 23 (add_id2 -> .)
    TO              reduce using rule 23 (add_id2 -> .)
    ID              reduce using rule 23 (add_id2 -> .)
    CTEI            reduce using rule 23 (add_id2 -> .)
    CTEF            reduce using rule 23 (add_id2 -> .)
    CTEC            reduce using rule 23 (add_id2 -> .)
    CTESTRING       reduce using rule 23 (add_id2 -> .)
    LPAREN          reduce using rule 23 (add_id2 -> .)
    LBRACKET        shift and go to state 55

  ! LPAREN          [ reduce using rule 27 (validateFunctionID -> .) ]

    add_id2                        shift and go to state 121
    arr                            shift and go to state 122
    validateFunctionID             shift and go to state 123

state 74

    (88) pexp -> CTEF . saveCTE
    (95) saveCTE -> .

    MUL             reduce using rule 95 (saveCTE -> .)
    DIV             reduce using rule 95 (saveCTE -> .)
    PLUS            reduce using rule 95 (saveCTE -> .)
    MINUS           reduce using rule 95 (saveCTE -> .)
    GT              reduce using rule 95 (saveCTE -> .)
    LT              reduce using rule 95 (saveCTE -> .)
    GTE             reduce using rule 95 (saveCTE -> .)
    LTE             reduce using rule 95 (saveCTE -> .)
    NE              reduce using rule 95 (saveCTE -> .)
    AND             reduce using rule 95 (saveCTE -> .)
    OR              reduce using rule 95 (saveCTE -> .)
    RBRACKET        reduce using rule 95 (saveCTE -> .)
    RPAREN          reduce using rule 95 (saveCTE -> .)
    COMMA           reduce using rule 95 (saveCTE -> .)
    SEMMICOLON      reduce using rule 95 (saveCTE -> .)
    TO              reduce using rule 95 (saveCTE -> .)
    ID              reduce using rule 95 (saveCTE -> .)
    CTEI            reduce using rule 95 (saveCTE -> .)
    CTEF            reduce using rule 95 (saveCTE -> .)
    CTEC            reduce using rule 95 (saveCTE -> .)
    CTESTRING       reduce using rule 95 (saveCTE -> .)
    LPAREN          reduce using rule 95 (saveCTE -> .)

    saveCTE                        shift and go to state 124

state 75

    (89) pexp -> CTEC . saveCTE
    (95) saveCTE -> .

    MUL             reduce using rule 95 (saveCTE -> .)
    DIV             reduce using rule 95 (saveCTE -> .)
    PLUS            reduce using rule 95 (saveCTE -> .)
    MINUS           reduce using rule 95 (saveCTE -> .)
    GT              reduce using rule 95 (saveCTE -> .)
    LT              reduce using rule 95 (saveCTE -> .)
    GTE             reduce using rule 95 (saveCTE -> .)
    LTE             reduce using rule 95 (saveCTE -> .)
    NE              reduce using rule 95 (saveCTE -> .)
    AND             reduce using rule 95 (saveCTE -> .)
    OR              reduce using rule 95 (saveCTE -> .)
    RBRACKET        reduce using rule 95 (saveCTE -> .)
    RPAREN          reduce using rule 95 (saveCTE -> .)
    COMMA           reduce using rule 95 (saveCTE -> .)
    SEMMICOLON      reduce using rule 95 (saveCTE -> .)
    TO              reduce using rule 95 (saveCTE -> .)
    ID              reduce using rule 95 (saveCTE -> .)
    CTEI            reduce using rule 95 (saveCTE -> .)
    CTEF            reduce using rule 95 (saveCTE -> .)
    CTEC            reduce using rule 95 (saveCTE -> .)
    CTESTRING       reduce using rule 95 (saveCTE -> .)
    LPAREN          reduce using rule 95 (saveCTE -> .)

    saveCTE                        shift and go to state 125

state 76

    (90) pexp -> CTESTRING . saveCTE
    (95) saveCTE -> .

    MUL             reduce using rule 95 (saveCTE -> .)
    DIV             reduce using rule 95 (saveCTE -> .)
    PLUS            reduce using rule 95 (saveCTE -> .)
    MINUS           reduce using rule 95 (saveCTE -> .)
    GT              reduce using rule 95 (saveCTE -> .)
    LT              reduce using rule 95 (saveCTE -> .)
    GTE             reduce using rule 95 (saveCTE -> .)
    LTE             reduce using rule 95 (saveCTE -> .)
    NE              reduce using rule 95 (saveCTE -> .)
    AND             reduce using rule 95 (saveCTE -> .)
    OR              reduce using rule 95 (saveCTE -> .)
    RBRACKET        reduce using rule 95 (saveCTE -> .)
    RPAREN          reduce using rule 95 (saveCTE -> .)
    COMMA           reduce using rule 95 (saveCTE -> .)
    SEMMICOLON      reduce using rule 95 (saveCTE -> .)
    TO              reduce using rule 95 (saveCTE -> .)
    ID              reduce using rule 95 (saveCTE -> .)
    CTEI            reduce using rule 95 (saveCTE -> .)
    CTEF            reduce using rule 95 (saveCTE -> .)
    CTEC            reduce using rule 95 (saveCTE -> .)
    CTESTRING       reduce using rule 95 (saveCTE -> .)
    LPAREN          reduce using rule 95 (saveCTE -> .)

    saveCTE                        shift and go to state 126

state 77

    (91) pexp -> functionCall .

    MUL             reduce using rule 91 (pexp -> functionCall .)
    DIV             reduce using rule 91 (pexp -> functionCall .)
    PLUS            reduce using rule 91 (pexp -> functionCall .)
    MINUS           reduce using rule 91 (pexp -> functionCall .)
    GT              reduce using rule 91 (pexp -> functionCall .)
    LT              reduce using rule 91 (pexp -> functionCall .)
    GTE             reduce using rule 91 (pexp -> functionCall .)
    LTE             reduce using rule 91 (pexp -> functionCall .)
    NE              reduce using rule 91 (pexp -> functionCall .)
    AND             reduce using rule 91 (pexp -> functionCall .)
    OR              reduce using rule 91 (pexp -> functionCall .)
    RBRACKET        reduce using rule 91 (pexp -> functionCall .)
    RPAREN          reduce using rule 91 (pexp -> functionCall .)
    COMMA           reduce using rule 91 (pexp -> functionCall .)
    SEMMICOLON      reduce using rule 91 (pexp -> functionCall .)
    TO              reduce using rule 91 (pexp -> functionCall .)
    ID              reduce using rule 91 (pexp -> functionCall .)
    CTEI            reduce using rule 91 (pexp -> functionCall .)
    CTEF            reduce using rule 91 (pexp -> functionCall .)
    CTEC            reduce using rule 91 (pexp -> functionCall .)
    CTESTRING       reduce using rule 91 (pexp -> functionCall .)
    LPAREN          reduce using rule 91 (pexp -> functionCall .)


state 78

    (92) pexp -> LPAREN . exp RPAREN
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)

    exp                            shift and go to state 127
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 79

    (94) pexp -> empty .

    MUL             reduce using rule 94 (pexp -> empty .)
    DIV             reduce using rule 94 (pexp -> empty .)
    PLUS            reduce using rule 94 (pexp -> empty .)
    MINUS           reduce using rule 94 (pexp -> empty .)
    GT              reduce using rule 94 (pexp -> empty .)
    LT              reduce using rule 94 (pexp -> empty .)
    GTE             reduce using rule 94 (pexp -> empty .)
    LTE             reduce using rule 94 (pexp -> empty .)
    NE              reduce using rule 94 (pexp -> empty .)
    AND             reduce using rule 94 (pexp -> empty .)
    OR              reduce using rule 94 (pexp -> empty .)
    RBRACKET        reduce using rule 94 (pexp -> empty .)
    RPAREN          reduce using rule 94 (pexp -> empty .)
    COMMA           reduce using rule 94 (pexp -> empty .)
    SEMMICOLON      reduce using rule 94 (pexp -> empty .)
    TO              reduce using rule 94 (pexp -> empty .)
    ID              reduce using rule 94 (pexp -> empty .)
    CTEI            reduce using rule 94 (pexp -> empty .)
    CTEF            reduce using rule 94 (pexp -> empty .)
    CTEC            reduce using rule 94 (pexp -> empty .)
    CTESTRING       reduce using rule 94 (pexp -> empty .)
    LPAREN          reduce using rule 94 (pexp -> empty .)


state 80

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements . RCURLY

    RCURLY          shift and go to state 128


state 81

    (10) statements -> assign . SEMMICOLON statements

    SEMMICOLON      shift and go to state 129


state 82

    (11) statements -> functionCall . SEMMICOLON statements

    SEMMICOLON      shift and go to state 130


state 83

    (12) statements -> read . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    SEMMICOLON      reduce using rule 139 (empty -> .)

    read                           shift and go to state 83
    statements                     shift and go to state 131
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 84

    (13) statements -> write . statements SEMMICOLON statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    SEMMICOLON      reduce using rule 139 (empty -> .)

    write                          shift and go to state 84
    statements                     shift and go to state 132
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 85

    (14) statements -> for . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    for                            shift and go to state 85
    statements                     shift and go to state 133
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 86

    (15) statements -> while . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    while                          shift and go to state 86
    statements                     shift and go to state 134
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 87

    (16) statements -> if . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    if                             shift and go to state 87
    statements                     shift and go to state 135
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 88

    (17) statements -> return . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    return                         shift and go to state 88
    statements                     shift and go to state 136
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    empty                          shift and go to state 89

state 89

    (18) statements -> empty .

    RCURLY          reduce using rule 18 (statements -> empty .)
    SEMMICOLON      reduce using rule 18 (statements -> empty .)


state 90

    (19) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> ID . add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> ID . validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (23) add_id2 -> .
    (27) validateFunctionID -> .

    EQUALS          reduce using rule 23 (add_id2 -> .)
    LBRACKET        reduce using rule 23 (add_id2 -> .)
    LPAREN          reduce using rule 27 (validateFunctionID -> .)

    add_id2                        shift and go to state 137
    validateFunctionID             shift and go to state 123

state 91

    (37) read -> READ . operatorRead LPAREN paramReadAux RPAREN
    (42) operatorRead -> .

    LPAREN          reduce using rule 42 (operatorRead -> .)

    operatorRead                   shift and go to state 138

state 92

    (44) write -> WRITE . writeOperator LPAREN paramWrite RPAREN
    (49) writeOperator -> .

    LPAREN          reduce using rule 49 (writeOperator -> .)

    writeOperator                  shift and go to state 139

state 93

    (52) for -> FOR . forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (53) forOP -> .

    ID              reduce using rule 53 (forOP -> .)

    forOP                          shift and go to state 140

state 94

    (55) while -> WHILE . whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (56) whileOP -> .

    LPAREN          reduce using rule 56 (whileOP -> .)

    whileOP                        shift and go to state 141

state 95

    (58) if -> IF . LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    LPAREN          shift and go to state 142


state 96

    (137) return -> RETURN . LPAREN exp RPAREN SEMMICOLON
    (138) return -> RETURN . LPAREN exp RPAREN

    LPAREN          shift and go to state 143


state 97

    (119) functions1 -> ID saveFunction LPAREN parameters . RPAREN vars LCURLY setStartDirection statements RCURLY

    RPAREN          shift and go to state 144


state 98

    (123) parameters -> paramsAux .

    RPAREN          reduce using rule 123 (parameters -> paramsAux .)


state 99

    (124) parameters -> empty .

    RPAREN          reduce using rule 124 (parameters -> empty .)


state 100

    (125) paramsAux -> INT . saveTypeVar TWOPOINTS ID addParameter nextParam
    (108) saveTypeVar -> .

    TWOPOINTS       reduce using rule 108 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 145

state 101

    (126) paramsAux -> FLOAT . saveTypeVar TWOPOINTS ID addParameter nextParam
    (108) saveTypeVar -> .

    TWOPOINTS       reduce using rule 108 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 146

state 102

    (127) paramsAux -> CHAR . saveTypeVar TWOPOINTS ID addParameter nextParam
    (108) saveTypeVar -> .

    TWOPOINTS       reduce using rule 108 (saveTypeVar -> .)

    saveTypeVar                    shift and go to state 147

state 103

    (103) var1 -> ID COMMA var1 addVar .

    SEMMICOLON      reduce using rule 103 (var1 -> ID COMMA var1 addVar .)


state 104

    (105) var1 -> ID arr COMMA var1 . addVar
    (107) addVar -> .

    SEMMICOLON      reduce using rule 107 (addVar -> .)

    addVar                         shift and go to state 148

state 105

    (112) arr -> LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    SEMMICOLON      reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 112 (arr -> LBRACKET CTEI RBRACKET .)


state 106

    (87) pexp -> CTEI saveCTE .

    MUL             reduce using rule 87 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 87 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 87 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 87 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 87 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 87 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 87 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 87 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 87 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 87 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 87 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 87 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 87 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 87 (pexp -> CTEI saveCTE .)
    SEMMICOLON      reduce using rule 87 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 87 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 87 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 87 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 87 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 87 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 87 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 87 (pexp -> CTEI saveCTE .)


state 107

    (113) arr -> LBRACKET exp RBRACKET .

    COMMA           reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    SEMMICOLON      reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 113 (arr -> LBRACKET exp RBRACKET .)


state 108

    (64) exp -> nexp generateQuadOR .
    (65) exp -> nexp generateQuadOR . OR saveOperator nexp

    RBRACKET        reduce using rule 64 (exp -> nexp generateQuadOR .)
    RPAREN          reduce using rule 64 (exp -> nexp generateQuadOR .)
    COMMA           reduce using rule 64 (exp -> nexp generateQuadOR .)
    SEMMICOLON      reduce using rule 64 (exp -> nexp generateQuadOR .)
    TO              reduce using rule 64 (exp -> nexp generateQuadOR .)
    OR              shift and go to state 149


state 109

    (67) nexp -> compexp generateQuadAND .
    (68) nexp -> compexp generateQuadAND . AND saveOperator compexp

    OR              reduce using rule 67 (nexp -> compexp generateQuadAND .)
    RBRACKET        reduce using rule 67 (nexp -> compexp generateQuadAND .)
    RPAREN          reduce using rule 67 (nexp -> compexp generateQuadAND .)
    COMMA           reduce using rule 67 (nexp -> compexp generateQuadAND .)
    SEMMICOLON      reduce using rule 67 (nexp -> compexp generateQuadAND .)
    TO              reduce using rule 67 (nexp -> compexp generateQuadAND .)
    AND             shift and go to state 150


state 110

    (72) compexp1 -> sumexp GT . saveOperator sumexp generateQuadCOMPARE
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 151

state 111

    (73) compexp1 -> sumexp LT . saveOperator sumexp generateQuadCOMPARE
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 152

state 112

    (74) compexp1 -> sumexp GTE . saveOperator sumexp generateQuadCOMPARE
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 153

state 113

    (75) compexp1 -> sumexp LTE . saveOperator sumexp generateQuadCOMPARE
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 154

state 114

    (76) compexp1 -> sumexp NE . saveOperator sumexp generateQuadCOMPARE
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 155

state 115

    (71) compexp -> compexp1 sumexp .

    AND             reduce using rule 71 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 71 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 71 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 71 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 71 (compexp -> compexp1 sumexp .)
    SEMMICOLON      reduce using rule 71 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 71 (compexp -> compexp1 sumexp .)


state 116

    (87) pexp -> CTEI . saveCTE
    (95) saveCTE -> .

    MUL             reduce using rule 95 (saveCTE -> .)
    DIV             reduce using rule 95 (saveCTE -> .)
    PLUS            reduce using rule 95 (saveCTE -> .)
    MINUS           reduce using rule 95 (saveCTE -> .)
    AND             reduce using rule 95 (saveCTE -> .)
    OR              reduce using rule 95 (saveCTE -> .)
    RBRACKET        reduce using rule 95 (saveCTE -> .)
    RPAREN          reduce using rule 95 (saveCTE -> .)
    COMMA           reduce using rule 95 (saveCTE -> .)
    SEMMICOLON      reduce using rule 95 (saveCTE -> .)
    TO              reduce using rule 95 (saveCTE -> .)
    GT              reduce using rule 95 (saveCTE -> .)
    LT              reduce using rule 95 (saveCTE -> .)
    GTE             reduce using rule 95 (saveCTE -> .)
    LTE             reduce using rule 95 (saveCTE -> .)
    NE              reduce using rule 95 (saveCTE -> .)
    ID              reduce using rule 95 (saveCTE -> .)
    CTEI            reduce using rule 95 (saveCTE -> .)
    CTEF            reduce using rule 95 (saveCTE -> .)
    CTEC            reduce using rule 95 (saveCTE -> .)
    CTESTRING       reduce using rule 95 (saveCTE -> .)
    LPAREN          reduce using rule 95 (saveCTE -> .)

    saveCTE                        shift and go to state 106

state 117

    (79) sumexp -> mulexp PLUS . saveOperator mulexp generateQuadSUM
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    GT              reduce using rule 96 (saveOperator -> .)
    LT              reduce using rule 96 (saveOperator -> .)
    GTE             reduce using rule 96 (saveOperator -> .)
    LTE             reduce using rule 96 (saveOperator -> .)
    NE              reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 156

state 118

    (80) sumexp -> mulexp MINUS . saveOperator mulexp generateQuadSUM
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    GT              reduce using rule 96 (saveOperator -> .)
    LT              reduce using rule 96 (saveOperator -> .)
    GTE             reduce using rule 96 (saveOperator -> .)
    LTE             reduce using rule 96 (saveOperator -> .)
    NE              reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 157

state 119

    (83) mulexp -> pexp MUL . saveOperator pexp generateQuadMUL
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    GT              reduce using rule 96 (saveOperator -> .)
    LT              reduce using rule 96 (saveOperator -> .)
    GTE             reduce using rule 96 (saveOperator -> .)
    LTE             reduce using rule 96 (saveOperator -> .)
    NE              reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 158

state 120

    (84) mulexp -> pexp DIV . saveOperator pexp generateQuadMUL
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    GT              reduce using rule 96 (saveOperator -> .)
    LT              reduce using rule 96 (saveOperator -> .)
    GTE             reduce using rule 96 (saveOperator -> .)
    LTE             reduce using rule 96 (saveOperator -> .)
    NE              reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 159

state 121

    (86) pexp -> ID add_id2 .

    MUL             reduce using rule 86 (pexp -> ID add_id2 .)
    DIV             reduce using rule 86 (pexp -> ID add_id2 .)
    PLUS            reduce using rule 86 (pexp -> ID add_id2 .)
    MINUS           reduce using rule 86 (pexp -> ID add_id2 .)
    GT              reduce using rule 86 (pexp -> ID add_id2 .)
    LT              reduce using rule 86 (pexp -> ID add_id2 .)
    GTE             reduce using rule 86 (pexp -> ID add_id2 .)
    LTE             reduce using rule 86 (pexp -> ID add_id2 .)
    NE              reduce using rule 86 (pexp -> ID add_id2 .)
    AND             reduce using rule 86 (pexp -> ID add_id2 .)
    OR              reduce using rule 86 (pexp -> ID add_id2 .)
    RBRACKET        reduce using rule 86 (pexp -> ID add_id2 .)
    RPAREN          reduce using rule 86 (pexp -> ID add_id2 .)
    COMMA           reduce using rule 86 (pexp -> ID add_id2 .)
    SEMMICOLON      reduce using rule 86 (pexp -> ID add_id2 .)
    TO              reduce using rule 86 (pexp -> ID add_id2 .)
    ID              reduce using rule 86 (pexp -> ID add_id2 .)
    CTEI            reduce using rule 86 (pexp -> ID add_id2 .)
    CTEF            reduce using rule 86 (pexp -> ID add_id2 .)
    CTEC            reduce using rule 86 (pexp -> ID add_id2 .)
    CTESTRING       reduce using rule 86 (pexp -> ID add_id2 .)
    LPAREN          reduce using rule 86 (pexp -> ID add_id2 .)


state 122

    (93) pexp -> ID arr . add_id3
    (24) add_id3 -> .

    MUL             reduce using rule 24 (add_id3 -> .)
    DIV             reduce using rule 24 (add_id3 -> .)
    PLUS            reduce using rule 24 (add_id3 -> .)
    MINUS           reduce using rule 24 (add_id3 -> .)
    GT              reduce using rule 24 (add_id3 -> .)
    LT              reduce using rule 24 (add_id3 -> .)
    GTE             reduce using rule 24 (add_id3 -> .)
    LTE             reduce using rule 24 (add_id3 -> .)
    NE              reduce using rule 24 (add_id3 -> .)
    AND             reduce using rule 24 (add_id3 -> .)
    OR              reduce using rule 24 (add_id3 -> .)
    RBRACKET        reduce using rule 24 (add_id3 -> .)
    RPAREN          reduce using rule 24 (add_id3 -> .)
    COMMA           reduce using rule 24 (add_id3 -> .)
    SEMMICOLON      reduce using rule 24 (add_id3 -> .)
    TO              reduce using rule 24 (add_id3 -> .)
    ID              reduce using rule 24 (add_id3 -> .)
    CTEI            reduce using rule 24 (add_id3 -> .)
    CTEF            reduce using rule 24 (add_id3 -> .)
    CTEC            reduce using rule 24 (add_id3 -> .)
    CTESTRING       reduce using rule 24 (add_id3 -> .)
    LPAREN          reduce using rule 24 (add_id3 -> .)

    add_id3                        shift and go to state 160

state 123

    (26) functionCall -> ID validateFunctionID . functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (36) functionERA -> .

    LPAREN          reduce using rule 36 (functionERA -> .)

    functionERA                    shift and go to state 161

state 124

    (88) pexp -> CTEF saveCTE .

    MUL             reduce using rule 88 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 88 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 88 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 88 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 88 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 88 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 88 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 88 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 88 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 88 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 88 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 88 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 88 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 88 (pexp -> CTEF saveCTE .)
    SEMMICOLON      reduce using rule 88 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 88 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 88 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 88 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 88 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 88 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 88 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 88 (pexp -> CTEF saveCTE .)


state 125

    (89) pexp -> CTEC saveCTE .

    MUL             reduce using rule 89 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 89 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 89 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 89 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 89 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 89 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 89 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 89 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 89 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 89 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 89 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 89 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 89 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 89 (pexp -> CTEC saveCTE .)
    SEMMICOLON      reduce using rule 89 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 89 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 89 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 89 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 89 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 89 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 89 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 89 (pexp -> CTEC saveCTE .)


state 126

    (90) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    SEMMICOLON      reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 90 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 90 (pexp -> CTESTRING saveCTE .)


state 127

    (92) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 162


state 128

    (7) principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .

    $end            reduce using rule 7 (principal -> PRINCIPAL saveFunction LPAREN RPAREN LCURLY vars statements RCURLY .)


state 129

    (10) statements -> assign SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    assign                         shift and go to state 81
    statements                     shift and go to state 163
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 130

    (11) statements -> functionCall SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    functionCall                   shift and go to state 82
    statements                     shift and go to state 164
    assign                         shift and go to state 81
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 131

    (12) statements -> read statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 165


state 132

    (13) statements -> write statements . SEMMICOLON statements

    SEMMICOLON      shift and go to state 166


state 133

    (14) statements -> for statements .

    RCURLY          reduce using rule 14 (statements -> for statements .)
    SEMMICOLON      reduce using rule 14 (statements -> for statements .)


state 134

    (15) statements -> while statements .

    RCURLY          reduce using rule 15 (statements -> while statements .)
    SEMMICOLON      reduce using rule 15 (statements -> while statements .)


state 135

    (16) statements -> if statements .

    RCURLY          reduce using rule 16 (statements -> if statements .)
    SEMMICOLON      reduce using rule 16 (statements -> if statements .)


state 136

    (17) statements -> return statements .

    RCURLY          reduce using rule 17 (statements -> return statements .)
    SEMMICOLON      reduce using rule 17 (statements -> return statements .)


state 137

    (19) assign -> ID add_id2 . EQUALS saveOperator exp generateAssignQuad
    (20) assign -> ID add_id2 . arr EQUALS saveOperator exp generateAssignQuad
    (112) arr -> . LBRACKET CTEI RBRACKET
    (113) arr -> . LBRACKET exp RBRACKET

    EQUALS          shift and go to state 167
    LBRACKET        shift and go to state 55

    arr                            shift and go to state 168

state 138

    (37) read -> READ operatorRead . LPAREN paramReadAux RPAREN

    LPAREN          shift and go to state 169


state 139

    (44) write -> WRITE writeOperator . LPAREN paramWrite RPAREN

    LPAREN          shift and go to state 170


state 140

    (52) for -> FOR forOP . assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad

    ID              shift and go to state 172

    assign                         shift and go to state 171

state 141

    (55) while -> WHILE whileOP . LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    LPAREN          shift and go to state 173


state 142

    (58) if -> IF LPAREN . exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)

    exp                            shift and go to state 174
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 143

    (137) return -> RETURN LPAREN . exp RPAREN SEMMICOLON
    (138) return -> RETURN LPAREN . exp RPAREN
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)

    exp                            shift and go to state 175
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 144

    (119) functions1 -> ID saveFunction LPAREN parameters RPAREN . vars LCURLY setStartDirection statements RCURLY
    (97) vars -> . var
    (98) vars -> . empty
    (99) var -> . VARS var2
    (139) empty -> .

    VARS            shift and go to state 12
    LCURLY          reduce using rule 139 (empty -> .)

    vars                           shift and go to state 176
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 145

    (125) paramsAux -> INT saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 177


state 146

    (126) paramsAux -> FLOAT saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 178


state 147

    (127) paramsAux -> CHAR saveTypeVar . TWOPOINTS ID addParameter nextParam

    TWOPOINTS       shift and go to state 179


state 148

    (105) var1 -> ID arr COMMA var1 addVar .

    SEMMICOLON      reduce using rule 105 (var1 -> ID arr COMMA var1 addVar .)


state 149

    (65) exp -> nexp generateQuadOR OR . saveOperator nexp
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    GT              reduce using rule 96 (saveOperator -> .)
    LT              reduce using rule 96 (saveOperator -> .)
    GTE             reduce using rule 96 (saveOperator -> .)
    LTE             reduce using rule 96 (saveOperator -> .)
    NE              reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 180

state 150

    (68) nexp -> compexp generateQuadAND AND . saveOperator compexp
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    GT              reduce using rule 96 (saveOperator -> .)
    LT              reduce using rule 96 (saveOperator -> .)
    GTE             reduce using rule 96 (saveOperator -> .)
    LTE             reduce using rule 96 (saveOperator -> .)
    NE              reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    RBRACKET        reduce using rule 96 (saveOperator -> .)
    RPAREN          reduce using rule 96 (saveOperator -> .)
    COMMA           reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 181

state 151

    (72) compexp1 -> sumexp GT saveOperator . sumexp generateQuadCOMPARE
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    sumexp                         shift and go to state 182
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 152

    (73) compexp1 -> sumexp LT saveOperator . sumexp generateQuadCOMPARE
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    sumexp                         shift and go to state 183
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 153

    (74) compexp1 -> sumexp GTE saveOperator . sumexp generateQuadCOMPARE
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    sumexp                         shift and go to state 184
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 154

    (75) compexp1 -> sumexp LTE saveOperator . sumexp generateQuadCOMPARE
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    sumexp                         shift and go to state 185
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 155

    (76) compexp1 -> sumexp NE saveOperator . sumexp generateQuadCOMPARE
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    sumexp                         shift and go to state 186
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 156

    (79) sumexp -> mulexp PLUS saveOperator . mulexp generateQuadSUM
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    mulexp                         shift and go to state 187
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 157

    (80) sumexp -> mulexp MINUS saveOperator . mulexp generateQuadSUM
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    mulexp                         shift and go to state 188
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 158

    (83) mulexp -> pexp MUL saveOperator . pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    pexp                           shift and go to state 189
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 159

    (84) mulexp -> pexp DIV saveOperator . pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)

  ! ID              [ reduce using rule 139 (empty -> .) ]
  ! CTEI            [ reduce using rule 139 (empty -> .) ]
  ! CTEF            [ reduce using rule 139 (empty -> .) ]
  ! CTEC            [ reduce using rule 139 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 139 (empty -> .) ]
  ! LPAREN          [ reduce using rule 139 (empty -> .) ]

    pexp                           shift and go to state 190
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 160

    (93) pexp -> ID arr add_id3 .

    MUL             reduce using rule 93 (pexp -> ID arr add_id3 .)
    DIV             reduce using rule 93 (pexp -> ID arr add_id3 .)
    PLUS            reduce using rule 93 (pexp -> ID arr add_id3 .)
    MINUS           reduce using rule 93 (pexp -> ID arr add_id3 .)
    GT              reduce using rule 93 (pexp -> ID arr add_id3 .)
    LT              reduce using rule 93 (pexp -> ID arr add_id3 .)
    GTE             reduce using rule 93 (pexp -> ID arr add_id3 .)
    LTE             reduce using rule 93 (pexp -> ID arr add_id3 .)
    NE              reduce using rule 93 (pexp -> ID arr add_id3 .)
    AND             reduce using rule 93 (pexp -> ID arr add_id3 .)
    OR              reduce using rule 93 (pexp -> ID arr add_id3 .)
    RBRACKET        reduce using rule 93 (pexp -> ID arr add_id3 .)
    RPAREN          reduce using rule 93 (pexp -> ID arr add_id3 .)
    COMMA           reduce using rule 93 (pexp -> ID arr add_id3 .)
    SEMMICOLON      reduce using rule 93 (pexp -> ID arr add_id3 .)
    TO              reduce using rule 93 (pexp -> ID arr add_id3 .)
    ID              reduce using rule 93 (pexp -> ID arr add_id3 .)
    CTEI            reduce using rule 93 (pexp -> ID arr add_id3 .)
    CTEF            reduce using rule 93 (pexp -> ID arr add_id3 .)
    CTEC            reduce using rule 93 (pexp -> ID arr add_id3 .)
    CTESTRING       reduce using rule 93 (pexp -> ID arr add_id3 .)
    LPAREN          reduce using rule 93 (pexp -> ID arr add_id3 .)


state 161

    (26) functionCall -> ID validateFunctionID functionERA . LPAREN expAux verifyParams RPAREN generateQuadGOSUB

    LPAREN          shift and go to state 191


state 162

    (92) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    SEMMICOLON      reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 92 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 92 (pexp -> LPAREN exp RPAREN .)


state 163

    (10) statements -> assign SEMMICOLON statements .

    RCURLY          reduce using rule 10 (statements -> assign SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 10 (statements -> assign SEMMICOLON statements .)


state 164

    (11) statements -> functionCall SEMMICOLON statements .

    RCURLY          reduce using rule 11 (statements -> functionCall SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 11 (statements -> functionCall SEMMICOLON statements .)


state 165

    (12) statements -> read statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    read                           shift and go to state 83
    statements                     shift and go to state 192
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 166

    (13) statements -> write statements SEMMICOLON . statements
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    write                          shift and go to state 84
    statements                     shift and go to state 193
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 167

    (19) assign -> ID add_id2 EQUALS . saveOperator exp generateAssignQuad
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    GT              reduce using rule 96 (saveOperator -> .)
    LT              reduce using rule 96 (saveOperator -> .)
    GTE             reduce using rule 96 (saveOperator -> .)
    LTE             reduce using rule 96 (saveOperator -> .)
    NE              reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 194

state 168

    (20) assign -> ID add_id2 arr . EQUALS saveOperator exp generateAssignQuad

    EQUALS          shift and go to state 195


state 169

    (37) read -> READ operatorRead LPAREN . paramReadAux RPAREN
    (40) paramReadAux -> . exp generateQuadREAD
    (41) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)

    paramReadAux                   shift and go to state 196
    exp                            shift and go to state 197
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 170

    (44) write -> WRITE writeOperator LPAREN . paramWrite RPAREN
    (45) paramWrite -> . paramWriteAux
    (46) paramWrite -> . empty
    (47) paramWriteAux -> . exp generateQuadPRINT
    (48) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (139) empty -> .
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 139 (empty -> .)
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78

    paramWrite                     shift and go to state 198
    paramWriteAux                  shift and go to state 199
    empty                          shift and go to state 200
    exp                            shift and go to state 201
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77

state 171

    (52) for -> FOR forOP assign . TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    TO              shift and go to state 202


state 172

    (19) assign -> ID . add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> ID . add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (23) add_id2 -> .

    EQUALS          reduce using rule 23 (add_id2 -> .)
    LBRACKET        reduce using rule 23 (add_id2 -> .)

    add_id2                        shift and go to state 137

state 173

    (55) while -> WHILE whileOP LPAREN . exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)

    exp                            shift and go to state 203
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 174

    (58) if -> IF LPAREN exp . RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF

    RPAREN          shift and go to state 204


state 175

    (137) return -> RETURN LPAREN exp . RPAREN SEMMICOLON
    (138) return -> RETURN LPAREN exp . RPAREN

    RPAREN          shift and go to state 205


state 176

    (119) functions1 -> ID saveFunction LPAREN parameters RPAREN vars . LCURLY setStartDirection statements RCURLY

    LCURLY          shift and go to state 206


state 177

    (125) paramsAux -> INT saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 207


state 178

    (126) paramsAux -> FLOAT saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 208


state 179

    (127) paramsAux -> CHAR saveTypeVar TWOPOINTS . ID addParameter nextParam

    ID              shift and go to state 209


state 180

    (65) exp -> nexp generateQuadOR OR saveOperator . nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

    nexp                           shift and go to state 210
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 181

    (68) nexp -> compexp generateQuadAND AND saveOperator . compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    RBRACKET        reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

    compexp                        shift and go to state 211
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 182

    (72) compexp1 -> sumexp GT saveOperator sumexp . generateQuadCOMPARE
    (77) generateQuadCOMPARE -> .

    ID              reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 77 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 77 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 77 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 77 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 77 (generateQuadCOMPARE -> .)
    AND             reduce using rule 77 (generateQuadCOMPARE -> .)
    OR              reduce using rule 77 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 77 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 77 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 77 (generateQuadCOMPARE -> .)
    TO              reduce using rule 77 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 212

state 183

    (73) compexp1 -> sumexp LT saveOperator sumexp . generateQuadCOMPARE
    (77) generateQuadCOMPARE -> .

    ID              reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 77 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 77 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 77 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 77 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 77 (generateQuadCOMPARE -> .)
    AND             reduce using rule 77 (generateQuadCOMPARE -> .)
    OR              reduce using rule 77 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 77 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 77 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 77 (generateQuadCOMPARE -> .)
    TO              reduce using rule 77 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 213

state 184

    (74) compexp1 -> sumexp GTE saveOperator sumexp . generateQuadCOMPARE
    (77) generateQuadCOMPARE -> .

    ID              reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 77 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 77 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 77 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 77 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 77 (generateQuadCOMPARE -> .)
    AND             reduce using rule 77 (generateQuadCOMPARE -> .)
    OR              reduce using rule 77 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 77 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 77 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 77 (generateQuadCOMPARE -> .)
    TO              reduce using rule 77 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 214

state 185

    (75) compexp1 -> sumexp LTE saveOperator sumexp . generateQuadCOMPARE
    (77) generateQuadCOMPARE -> .

    ID              reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 77 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 77 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 77 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 77 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 77 (generateQuadCOMPARE -> .)
    AND             reduce using rule 77 (generateQuadCOMPARE -> .)
    OR              reduce using rule 77 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 77 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 77 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 77 (generateQuadCOMPARE -> .)
    TO              reduce using rule 77 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 215

state 186

    (76) compexp1 -> sumexp NE saveOperator sumexp . generateQuadCOMPARE
    (77) generateQuadCOMPARE -> .

    ID              reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEI            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEF            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTEC            reduce using rule 77 (generateQuadCOMPARE -> .)
    CTESTRING       reduce using rule 77 (generateQuadCOMPARE -> .)
    LPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    PLUS            reduce using rule 77 (generateQuadCOMPARE -> .)
    MINUS           reduce using rule 77 (generateQuadCOMPARE -> .)
    MUL             reduce using rule 77 (generateQuadCOMPARE -> .)
    DIV             reduce using rule 77 (generateQuadCOMPARE -> .)
    AND             reduce using rule 77 (generateQuadCOMPARE -> .)
    OR              reduce using rule 77 (generateQuadCOMPARE -> .)
    RBRACKET        reduce using rule 77 (generateQuadCOMPARE -> .)
    RPAREN          reduce using rule 77 (generateQuadCOMPARE -> .)
    COMMA           reduce using rule 77 (generateQuadCOMPARE -> .)
    SEMMICOLON      reduce using rule 77 (generateQuadCOMPARE -> .)
    TO              reduce using rule 77 (generateQuadCOMPARE -> .)

    generateQuadCOMPARE            shift and go to state 216

state 187

    (79) sumexp -> mulexp PLUS saveOperator mulexp . generateQuadSUM
    (81) generateQuadSUM -> .

    GT              reduce using rule 81 (generateQuadSUM -> .)
    LT              reduce using rule 81 (generateQuadSUM -> .)
    GTE             reduce using rule 81 (generateQuadSUM -> .)
    LTE             reduce using rule 81 (generateQuadSUM -> .)
    NE              reduce using rule 81 (generateQuadSUM -> .)
    AND             reduce using rule 81 (generateQuadSUM -> .)
    OR              reduce using rule 81 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 81 (generateQuadSUM -> .)
    RPAREN          reduce using rule 81 (generateQuadSUM -> .)
    COMMA           reduce using rule 81 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 81 (generateQuadSUM -> .)
    TO              reduce using rule 81 (generateQuadSUM -> .)
    ID              reduce using rule 81 (generateQuadSUM -> .)
    CTEI            reduce using rule 81 (generateQuadSUM -> .)
    CTEF            reduce using rule 81 (generateQuadSUM -> .)
    CTEC            reduce using rule 81 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 81 (generateQuadSUM -> .)
    LPAREN          reduce using rule 81 (generateQuadSUM -> .)
    PLUS            reduce using rule 81 (generateQuadSUM -> .)
    MINUS           reduce using rule 81 (generateQuadSUM -> .)
    MUL             reduce using rule 81 (generateQuadSUM -> .)
    DIV             reduce using rule 81 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 217

state 188

    (80) sumexp -> mulexp MINUS saveOperator mulexp . generateQuadSUM
    (81) generateQuadSUM -> .

    GT              reduce using rule 81 (generateQuadSUM -> .)
    LT              reduce using rule 81 (generateQuadSUM -> .)
    GTE             reduce using rule 81 (generateQuadSUM -> .)
    LTE             reduce using rule 81 (generateQuadSUM -> .)
    NE              reduce using rule 81 (generateQuadSUM -> .)
    AND             reduce using rule 81 (generateQuadSUM -> .)
    OR              reduce using rule 81 (generateQuadSUM -> .)
    RBRACKET        reduce using rule 81 (generateQuadSUM -> .)
    RPAREN          reduce using rule 81 (generateQuadSUM -> .)
    COMMA           reduce using rule 81 (generateQuadSUM -> .)
    SEMMICOLON      reduce using rule 81 (generateQuadSUM -> .)
    TO              reduce using rule 81 (generateQuadSUM -> .)
    ID              reduce using rule 81 (generateQuadSUM -> .)
    CTEI            reduce using rule 81 (generateQuadSUM -> .)
    CTEF            reduce using rule 81 (generateQuadSUM -> .)
    CTEC            reduce using rule 81 (generateQuadSUM -> .)
    CTESTRING       reduce using rule 81 (generateQuadSUM -> .)
    LPAREN          reduce using rule 81 (generateQuadSUM -> .)
    PLUS            reduce using rule 81 (generateQuadSUM -> .)
    MINUS           reduce using rule 81 (generateQuadSUM -> .)
    MUL             reduce using rule 81 (generateQuadSUM -> .)
    DIV             reduce using rule 81 (generateQuadSUM -> .)

    generateQuadSUM                shift and go to state 218

state 189

    (83) mulexp -> pexp MUL saveOperator pexp . generateQuadMUL
    (85) generateQuadMUL -> .

    PLUS            reduce using rule 85 (generateQuadMUL -> .)
    MINUS           reduce using rule 85 (generateQuadMUL -> .)
    GT              reduce using rule 85 (generateQuadMUL -> .)
    LT              reduce using rule 85 (generateQuadMUL -> .)
    GTE             reduce using rule 85 (generateQuadMUL -> .)
    LTE             reduce using rule 85 (generateQuadMUL -> .)
    NE              reduce using rule 85 (generateQuadMUL -> .)
    AND             reduce using rule 85 (generateQuadMUL -> .)
    OR              reduce using rule 85 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 85 (generateQuadMUL -> .)
    RPAREN          reduce using rule 85 (generateQuadMUL -> .)
    COMMA           reduce using rule 85 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 85 (generateQuadMUL -> .)
    TO              reduce using rule 85 (generateQuadMUL -> .)
    ID              reduce using rule 85 (generateQuadMUL -> .)
    CTEI            reduce using rule 85 (generateQuadMUL -> .)
    CTEF            reduce using rule 85 (generateQuadMUL -> .)
    CTEC            reduce using rule 85 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 85 (generateQuadMUL -> .)
    LPAREN          reduce using rule 85 (generateQuadMUL -> .)
    MUL             reduce using rule 85 (generateQuadMUL -> .)
    DIV             reduce using rule 85 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 219

state 190

    (84) mulexp -> pexp DIV saveOperator pexp . generateQuadMUL
    (85) generateQuadMUL -> .

    PLUS            reduce using rule 85 (generateQuadMUL -> .)
    MINUS           reduce using rule 85 (generateQuadMUL -> .)
    GT              reduce using rule 85 (generateQuadMUL -> .)
    LT              reduce using rule 85 (generateQuadMUL -> .)
    GTE             reduce using rule 85 (generateQuadMUL -> .)
    LTE             reduce using rule 85 (generateQuadMUL -> .)
    NE              reduce using rule 85 (generateQuadMUL -> .)
    AND             reduce using rule 85 (generateQuadMUL -> .)
    OR              reduce using rule 85 (generateQuadMUL -> .)
    RBRACKET        reduce using rule 85 (generateQuadMUL -> .)
    RPAREN          reduce using rule 85 (generateQuadMUL -> .)
    COMMA           reduce using rule 85 (generateQuadMUL -> .)
    SEMMICOLON      reduce using rule 85 (generateQuadMUL -> .)
    TO              reduce using rule 85 (generateQuadMUL -> .)
    ID              reduce using rule 85 (generateQuadMUL -> .)
    CTEI            reduce using rule 85 (generateQuadMUL -> .)
    CTEF            reduce using rule 85 (generateQuadMUL -> .)
    CTEC            reduce using rule 85 (generateQuadMUL -> .)
    CTESTRING       reduce using rule 85 (generateQuadMUL -> .)
    LPAREN          reduce using rule 85 (generateQuadMUL -> .)
    MUL             reduce using rule 85 (generateQuadMUL -> .)
    DIV             reduce using rule 85 (generateQuadMUL -> .)

    generateQuadMUL                shift and go to state 220

state 191

    (26) functionCall -> ID validateFunctionID functionERA LPAREN . expAux verifyParams RPAREN generateQuadGOSUB
    (31) expAux -> . exp generateQuadPARAM paramsCount
    (32) expAux -> . exp generateQuadPARAM COMMA paramsCount expAux
    (33) expAux -> . empty
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (139) empty -> .
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 139 (empty -> .)
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78

    expAux                         shift and go to state 221
    exp                            shift and go to state 222
    empty                          shift and go to state 223
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77

state 192

    (12) statements -> read statements SEMMICOLON statements .

    RCURLY          reduce using rule 12 (statements -> read statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 12 (statements -> read statements SEMMICOLON statements .)


state 193

    (13) statements -> write statements SEMMICOLON statements .

    RCURLY          reduce using rule 13 (statements -> write statements SEMMICOLON statements .)
    SEMMICOLON      reduce using rule 13 (statements -> write statements SEMMICOLON statements .)


state 194

    (19) assign -> ID add_id2 EQUALS saveOperator . exp generateAssignQuad
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

    exp                            shift and go to state 224
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 195

    (20) assign -> ID add_id2 arr EQUALS . saveOperator exp generateAssignQuad
    (96) saveOperator -> .

    ID              reduce using rule 96 (saveOperator -> .)
    CTEI            reduce using rule 96 (saveOperator -> .)
    CTEF            reduce using rule 96 (saveOperator -> .)
    CTEC            reduce using rule 96 (saveOperator -> .)
    CTESTRING       reduce using rule 96 (saveOperator -> .)
    LPAREN          reduce using rule 96 (saveOperator -> .)
    OR              reduce using rule 96 (saveOperator -> .)
    AND             reduce using rule 96 (saveOperator -> .)
    GT              reduce using rule 96 (saveOperator -> .)
    LT              reduce using rule 96 (saveOperator -> .)
    GTE             reduce using rule 96 (saveOperator -> .)
    LTE             reduce using rule 96 (saveOperator -> .)
    NE              reduce using rule 96 (saveOperator -> .)
    PLUS            reduce using rule 96 (saveOperator -> .)
    MINUS           reduce using rule 96 (saveOperator -> .)
    MUL             reduce using rule 96 (saveOperator -> .)
    DIV             reduce using rule 96 (saveOperator -> .)
    SEMMICOLON      reduce using rule 96 (saveOperator -> .)
    TO              reduce using rule 96 (saveOperator -> .)

    saveOperator                   shift and go to state 225

state 196

    (37) read -> READ operatorRead LPAREN paramReadAux . RPAREN

    RPAREN          shift and go to state 226


state 197

    (40) paramReadAux -> exp . generateQuadREAD
    (41) paramReadAux -> exp . generateQuadREAD COMMA operatorRead paramReadAux
    (43) generateQuadREAD -> .

    COMMA           reduce using rule 43 (generateQuadREAD -> .)
    RPAREN          reduce using rule 43 (generateQuadREAD -> .)

    generateQuadREAD               shift and go to state 227

state 198

    (44) write -> WRITE writeOperator LPAREN paramWrite . RPAREN

    RPAREN          shift and go to state 228


state 199

    (45) paramWrite -> paramWriteAux .

    RPAREN          reduce using rule 45 (paramWrite -> paramWriteAux .)


state 200

    (46) paramWrite -> empty .
    (94) pexp -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 46 (paramWrite -> empty .)
    RPAREN          reduce using rule 46 (paramWrite -> empty .)
    MUL             reduce using rule 94 (pexp -> empty .)
    DIV             reduce using rule 94 (pexp -> empty .)
    PLUS            reduce using rule 94 (pexp -> empty .)
    MINUS           reduce using rule 94 (pexp -> empty .)
    GT              reduce using rule 94 (pexp -> empty .)
    LT              reduce using rule 94 (pexp -> empty .)
    GTE             reduce using rule 94 (pexp -> empty .)
    LTE             reduce using rule 94 (pexp -> empty .)
    NE              reduce using rule 94 (pexp -> empty .)
    AND             reduce using rule 94 (pexp -> empty .)
    OR              reduce using rule 94 (pexp -> empty .)
    COMMA           reduce using rule 94 (pexp -> empty .)

  ! RPAREN          [ reduce using rule 94 (pexp -> empty .) ]


state 201

    (47) paramWriteAux -> exp . generateQuadPRINT
    (48) paramWriteAux -> exp . generateQuadPRINT COMMA writeOperator paramWriteAux
    (50) generateQuadPRINT -> .

    COMMA           reduce using rule 50 (generateQuadPRINT -> .)
    RPAREN          reduce using rule 50 (generateQuadPRINT -> .)

    generateQuadPRINT              shift and go to state 229

state 202

    (52) for -> FOR forOP assign TO . CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    CTEI            shift and go to state 230


state 203

    (55) while -> WHILE whileOP LPAREN exp . RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    RPAREN          shift and go to state 231


state 204

    (58) if -> IF LPAREN exp RPAREN . generateQuadIF THEN LCURLY statements RCURLY else endIF
    (61) generateQuadIF -> .

    THEN            reduce using rule 61 (generateQuadIF -> .)

    generateQuadIF                 shift and go to state 232

state 205

    (137) return -> RETURN LPAREN exp RPAREN . SEMMICOLON
    (138) return -> RETURN LPAREN exp RPAREN .

  ! shift/reduce conflict for SEMMICOLON resolved as shift
    SEMMICOLON      shift and go to state 233
    ID              reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .)
    READ            reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .)
    WRITE           reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .)
    FOR             reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .)
    WHILE           reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .)
    IF              reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .)
    RETURN          reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .)
    RCURLY          reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .)

  ! SEMMICOLON      [ reduce using rule 138 (return -> RETURN LPAREN exp RPAREN .) ]


state 206

    (119) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY . setStartDirection statements RCURLY
    (121) setStartDirection -> .

    ID              reduce using rule 121 (setStartDirection -> .)
    READ            reduce using rule 121 (setStartDirection -> .)
    WRITE           reduce using rule 121 (setStartDirection -> .)
    FOR             reduce using rule 121 (setStartDirection -> .)
    WHILE           reduce using rule 121 (setStartDirection -> .)
    IF              reduce using rule 121 (setStartDirection -> .)
    RETURN          reduce using rule 121 (setStartDirection -> .)
    RCURLY          reduce using rule 121 (setStartDirection -> .)

    setStartDirection              shift and go to state 234

state 207

    (125) paramsAux -> INT saveTypeVar TWOPOINTS ID . addParameter nextParam
    (122) addParameter -> .

    COMMA           reduce using rule 122 (addParameter -> .)
    RPAREN          reduce using rule 122 (addParameter -> .)

    addParameter                   shift and go to state 235

state 208

    (126) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID . addParameter nextParam
    (122) addParameter -> .

    COMMA           reduce using rule 122 (addParameter -> .)
    RPAREN          reduce using rule 122 (addParameter -> .)

    addParameter                   shift and go to state 236

state 209

    (127) paramsAux -> CHAR saveTypeVar TWOPOINTS ID . addParameter nextParam
    (122) addParameter -> .

    COMMA           reduce using rule 122 (addParameter -> .)
    RPAREN          reduce using rule 122 (addParameter -> .)

    addParameter                   shift and go to state 237

state 210

    (65) exp -> nexp generateQuadOR OR saveOperator nexp .

    RBRACKET        reduce using rule 65 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    RPAREN          reduce using rule 65 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    COMMA           reduce using rule 65 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    SEMMICOLON      reduce using rule 65 (exp -> nexp generateQuadOR OR saveOperator nexp .)
    TO              reduce using rule 65 (exp -> nexp generateQuadOR OR saveOperator nexp .)


state 211

    (68) nexp -> compexp generateQuadAND AND saveOperator compexp .

    OR              reduce using rule 68 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RBRACKET        reduce using rule 68 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    RPAREN          reduce using rule 68 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    COMMA           reduce using rule 68 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    SEMMICOLON      reduce using rule 68 (nexp -> compexp generateQuadAND AND saveOperator compexp .)
    TO              reduce using rule 68 (nexp -> compexp generateQuadAND AND saveOperator compexp .)


state 212

    (72) compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 72 (compexp1 -> sumexp GT saveOperator sumexp generateQuadCOMPARE .)


state 213

    (73) compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 73 (compexp1 -> sumexp LT saveOperator sumexp generateQuadCOMPARE .)


state 214

    (74) compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 74 (compexp1 -> sumexp GTE saveOperator sumexp generateQuadCOMPARE .)


state 215

    (75) compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 75 (compexp1 -> sumexp LTE saveOperator sumexp generateQuadCOMPARE .)


state 216

    (76) compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .

    ID              reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEI            reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEF            reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTEC            reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    CTESTRING       reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    LPAREN          reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    PLUS            reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    MINUS           reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    MUL             reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    DIV             reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    AND             reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    OR              reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    RBRACKET        reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    RPAREN          reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    COMMA           reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    SEMMICOLON      reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)
    TO              reduce using rule 76 (compexp1 -> sumexp NE saveOperator sumexp generateQuadCOMPARE .)


state 217

    (79) sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    PLUS            reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    MINUS           reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    MUL             reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)
    DIV             reduce using rule 79 (sumexp -> mulexp PLUS saveOperator mulexp generateQuadSUM .)


state 218

    (80) sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .

    GT              reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LT              reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    GTE             reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LTE             reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    NE              reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    AND             reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    OR              reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RBRACKET        reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    RPAREN          reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    COMMA           reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    SEMMICOLON      reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    TO              reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    ID              reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEI            reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEF            reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTEC            reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    CTESTRING       reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    LPAREN          reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    PLUS            reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    MINUS           reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    MUL             reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)
    DIV             reduce using rule 80 (sumexp -> mulexp MINUS saveOperator mulexp generateQuadSUM .)


state 219

    (83) mulexp -> pexp MUL saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    MUL             reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)
    DIV             reduce using rule 83 (mulexp -> pexp MUL saveOperator pexp generateQuadMUL .)


state 220

    (84) mulexp -> pexp DIV saveOperator pexp generateQuadMUL .

    PLUS            reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MINUS           reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GT              reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LT              reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    GTE             reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LTE             reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    NE              reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    AND             reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    OR              reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RBRACKET        reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    RPAREN          reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    COMMA           reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    SEMMICOLON      reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    TO              reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    ID              reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEI            reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEF            reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTEC            reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    CTESTRING       reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    LPAREN          reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    MUL             reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)
    DIV             reduce using rule 84 (mulexp -> pexp DIV saveOperator pexp generateQuadMUL .)


state 221

    (26) functionCall -> ID validateFunctionID functionERA LPAREN expAux . verifyParams RPAREN generateQuadGOSUB
    (28) verifyParams -> .

    RPAREN          reduce using rule 28 (verifyParams -> .)

    verifyParams                   shift and go to state 238

state 222

    (31) expAux -> exp . generateQuadPARAM paramsCount
    (32) expAux -> exp . generateQuadPARAM COMMA paramsCount expAux
    (30) generateQuadPARAM -> .

    COMMA           reduce using rule 30 (generateQuadPARAM -> .)
    RPAREN          reduce using rule 30 (generateQuadPARAM -> .)

    generateQuadPARAM              shift and go to state 239

state 223

    (33) expAux -> empty .
    (94) pexp -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 33 (expAux -> empty .)
    RPAREN          reduce using rule 33 (expAux -> empty .)
    MUL             reduce using rule 94 (pexp -> empty .)
    DIV             reduce using rule 94 (pexp -> empty .)
    PLUS            reduce using rule 94 (pexp -> empty .)
    MINUS           reduce using rule 94 (pexp -> empty .)
    GT              reduce using rule 94 (pexp -> empty .)
    LT              reduce using rule 94 (pexp -> empty .)
    GTE             reduce using rule 94 (pexp -> empty .)
    LTE             reduce using rule 94 (pexp -> empty .)
    NE              reduce using rule 94 (pexp -> empty .)
    AND             reduce using rule 94 (pexp -> empty .)
    OR              reduce using rule 94 (pexp -> empty .)
    COMMA           reduce using rule 94 (pexp -> empty .)

  ! RPAREN          [ reduce using rule 94 (pexp -> empty .) ]


state 224

    (19) assign -> ID add_id2 EQUALS saveOperator exp . generateAssignQuad
    (21) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 21 (generateAssignQuad -> .)
    TO              reduce using rule 21 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 240

state 225

    (20) assign -> ID add_id2 arr EQUALS saveOperator . exp generateAssignQuad
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)
    TO              reduce using rule 139 (empty -> .)

    exp                            shift and go to state 241
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 226

    (37) read -> READ operatorRead LPAREN paramReadAux RPAREN .

    ID              reduce using rule 37 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    READ            reduce using rule 37 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    WRITE           reduce using rule 37 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    FOR             reduce using rule 37 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    WHILE           reduce using rule 37 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    IF              reduce using rule 37 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    RETURN          reduce using rule 37 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)
    SEMMICOLON      reduce using rule 37 (read -> READ operatorRead LPAREN paramReadAux RPAREN .)


state 227

    (40) paramReadAux -> exp generateQuadREAD .
    (41) paramReadAux -> exp generateQuadREAD . COMMA operatorRead paramReadAux

    RPAREN          reduce using rule 40 (paramReadAux -> exp generateQuadREAD .)
    COMMA           shift and go to state 242


state 228

    (44) write -> WRITE writeOperator LPAREN paramWrite RPAREN .

    ID              reduce using rule 44 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    READ            reduce using rule 44 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WRITE           reduce using rule 44 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    FOR             reduce using rule 44 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    WHILE           reduce using rule 44 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    IF              reduce using rule 44 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    RETURN          reduce using rule 44 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)
    SEMMICOLON      reduce using rule 44 (write -> WRITE writeOperator LPAREN paramWrite RPAREN .)


state 229

    (47) paramWriteAux -> exp generateQuadPRINT .
    (48) paramWriteAux -> exp generateQuadPRINT . COMMA writeOperator paramWriteAux

    RPAREN          reduce using rule 47 (paramWriteAux -> exp generateQuadPRINT .)
    COMMA           shift and go to state 243


state 230

    (52) for -> FOR forOP assign TO CTEI . DO generateQuadFOR LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 244


state 231

    (55) while -> WHILE whileOP LPAREN exp RPAREN . DO generateQuadWHILE LCURLY statements RCURLY LoopEnd

    DO              shift and go to state 245


state 232

    (58) if -> IF LPAREN exp RPAREN generateQuadIF . THEN LCURLY statements RCURLY else endIF

    THEN            shift and go to state 246


state 233

    (137) return -> RETURN LPAREN exp RPAREN SEMMICOLON .

    ID              reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    READ            reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    WRITE           reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    FOR             reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    WHILE           reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    IF              reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    RETURN          reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    RCURLY          reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)
    SEMMICOLON      reduce using rule 137 (return -> RETURN LPAREN exp RPAREN SEMMICOLON .)


state 234

    (119) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)

    statements                     shift and go to state 247
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 235

    (125) paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter . nextParam
    (128) nextParam -> . COMMA paramsAux
    (129) nextParam -> . empty
    (139) empty -> .

    COMMA           shift and go to state 249
    RPAREN          reduce using rule 139 (empty -> .)

    nextParam                      shift and go to state 248
    empty                          shift and go to state 250

state 236

    (126) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter . nextParam
    (128) nextParam -> . COMMA paramsAux
    (129) nextParam -> . empty
    (139) empty -> .

    COMMA           shift and go to state 249
    RPAREN          reduce using rule 139 (empty -> .)

    nextParam                      shift and go to state 251
    empty                          shift and go to state 250

state 237

    (127) paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter . nextParam
    (128) nextParam -> . COMMA paramsAux
    (129) nextParam -> . empty
    (139) empty -> .

    COMMA           shift and go to state 249
    RPAREN          reduce using rule 139 (empty -> .)

    nextParam                      shift and go to state 252
    empty                          shift and go to state 250

state 238

    (26) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams . RPAREN generateQuadGOSUB

    RPAREN          shift and go to state 253


state 239

    (31) expAux -> exp generateQuadPARAM . paramsCount
    (32) expAux -> exp generateQuadPARAM . COMMA paramsCount expAux
    (29) paramsCount -> .

    COMMA           shift and go to state 255
    RPAREN          reduce using rule 29 (paramsCount -> .)

    paramsCount                    shift and go to state 254

state 240

    (19) assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 19 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 19 (assign -> ID add_id2 EQUALS saveOperator exp generateAssignQuad .)


state 241

    (20) assign -> ID add_id2 arr EQUALS saveOperator exp . generateAssignQuad
    (21) generateAssignQuad -> .

    SEMMICOLON      reduce using rule 21 (generateAssignQuad -> .)
    TO              reduce using rule 21 (generateAssignQuad -> .)

    generateAssignQuad             shift and go to state 256

state 242

    (41) paramReadAux -> exp generateQuadREAD COMMA . operatorRead paramReadAux
    (42) operatorRead -> .

    ID              reduce using rule 42 (operatorRead -> .)
    CTEI            reduce using rule 42 (operatorRead -> .)
    CTEF            reduce using rule 42 (operatorRead -> .)
    CTEC            reduce using rule 42 (operatorRead -> .)
    CTESTRING       reduce using rule 42 (operatorRead -> .)
    LPAREN          reduce using rule 42 (operatorRead -> .)
    COMMA           reduce using rule 42 (operatorRead -> .)
    OR              reduce using rule 42 (operatorRead -> .)
    AND             reduce using rule 42 (operatorRead -> .)
    GT              reduce using rule 42 (operatorRead -> .)
    LT              reduce using rule 42 (operatorRead -> .)
    GTE             reduce using rule 42 (operatorRead -> .)
    LTE             reduce using rule 42 (operatorRead -> .)
    NE              reduce using rule 42 (operatorRead -> .)
    PLUS            reduce using rule 42 (operatorRead -> .)
    MINUS           reduce using rule 42 (operatorRead -> .)
    MUL             reduce using rule 42 (operatorRead -> .)
    DIV             reduce using rule 42 (operatorRead -> .)
    RPAREN          reduce using rule 42 (operatorRead -> .)

    operatorRead                   shift and go to state 257

state 243

    (48) paramWriteAux -> exp generateQuadPRINT COMMA . writeOperator paramWriteAux
    (49) writeOperator -> .

    ID              reduce using rule 49 (writeOperator -> .)
    CTEI            reduce using rule 49 (writeOperator -> .)
    CTEF            reduce using rule 49 (writeOperator -> .)
    CTEC            reduce using rule 49 (writeOperator -> .)
    CTESTRING       reduce using rule 49 (writeOperator -> .)
    LPAREN          reduce using rule 49 (writeOperator -> .)
    COMMA           reduce using rule 49 (writeOperator -> .)
    OR              reduce using rule 49 (writeOperator -> .)
    AND             reduce using rule 49 (writeOperator -> .)
    GT              reduce using rule 49 (writeOperator -> .)
    LT              reduce using rule 49 (writeOperator -> .)
    GTE             reduce using rule 49 (writeOperator -> .)
    LTE             reduce using rule 49 (writeOperator -> .)
    NE              reduce using rule 49 (writeOperator -> .)
    PLUS            reduce using rule 49 (writeOperator -> .)
    MINUS           reduce using rule 49 (writeOperator -> .)
    MUL             reduce using rule 49 (writeOperator -> .)
    DIV             reduce using rule 49 (writeOperator -> .)
    RPAREN          reduce using rule 49 (writeOperator -> .)

    writeOperator                  shift and go to state 258

state 244

    (52) for -> FOR forOP assign TO CTEI DO . generateQuadFOR LCURLY statements RCURLY LoopEnd
    (54) generateQuadFOR -> .

    LCURLY          reduce using rule 54 (generateQuadFOR -> .)

    generateQuadFOR                shift and go to state 259

state 245

    (55) while -> WHILE whileOP LPAREN exp RPAREN DO . generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (57) generateQuadWHILE -> .

    LCURLY          reduce using rule 57 (generateQuadWHILE -> .)

    generateQuadWHILE              shift and go to state 260

state 246

    (58) if -> IF LPAREN exp RPAREN generateQuadIF THEN . LCURLY statements RCURLY else endIF

    LCURLY          shift and go to state 261


state 247

    (119) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements . RCURLY

    RCURLY          shift and go to state 262


state 248

    (125) paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 125 (paramsAux -> INT saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 249

    (128) nextParam -> COMMA . paramsAux
    (125) paramsAux -> . INT saveTypeVar TWOPOINTS ID addParameter nextParam
    (126) paramsAux -> . FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam
    (127) paramsAux -> . CHAR saveTypeVar TWOPOINTS ID addParameter nextParam

    INT             shift and go to state 100
    FLOAT           shift and go to state 101
    CHAR            shift and go to state 102

    paramsAux                      shift and go to state 263

state 250

    (129) nextParam -> empty .

    RPAREN          reduce using rule 129 (nextParam -> empty .)


state 251

    (126) paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 126 (paramsAux -> FLOAT saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 252

    (127) paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam .

    RPAREN          reduce using rule 127 (paramsAux -> CHAR saveTypeVar TWOPOINTS ID addParameter nextParam .)


state 253

    (26) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN . generateQuadGOSUB
    (34) generateQuadGOSUB -> .

    MUL             reduce using rule 34 (generateQuadGOSUB -> .)
    DIV             reduce using rule 34 (generateQuadGOSUB -> .)
    PLUS            reduce using rule 34 (generateQuadGOSUB -> .)
    MINUS           reduce using rule 34 (generateQuadGOSUB -> .)
    GT              reduce using rule 34 (generateQuadGOSUB -> .)
    LT              reduce using rule 34 (generateQuadGOSUB -> .)
    GTE             reduce using rule 34 (generateQuadGOSUB -> .)
    LTE             reduce using rule 34 (generateQuadGOSUB -> .)
    NE              reduce using rule 34 (generateQuadGOSUB -> .)
    AND             reduce using rule 34 (generateQuadGOSUB -> .)
    OR              reduce using rule 34 (generateQuadGOSUB -> .)
    RBRACKET        reduce using rule 34 (generateQuadGOSUB -> .)
    SEMMICOLON      reduce using rule 34 (generateQuadGOSUB -> .)
    RPAREN          reduce using rule 34 (generateQuadGOSUB -> .)
    COMMA           reduce using rule 34 (generateQuadGOSUB -> .)
    TO              reduce using rule 34 (generateQuadGOSUB -> .)
    ID              reduce using rule 34 (generateQuadGOSUB -> .)
    CTEI            reduce using rule 34 (generateQuadGOSUB -> .)
    CTEF            reduce using rule 34 (generateQuadGOSUB -> .)
    CTEC            reduce using rule 34 (generateQuadGOSUB -> .)
    CTESTRING       reduce using rule 34 (generateQuadGOSUB -> .)
    LPAREN          reduce using rule 34 (generateQuadGOSUB -> .)

    generateQuadGOSUB              shift and go to state 264

state 254

    (31) expAux -> exp generateQuadPARAM paramsCount .

    RPAREN          reduce using rule 31 (expAux -> exp generateQuadPARAM paramsCount .)


state 255

    (32) expAux -> exp generateQuadPARAM COMMA . paramsCount expAux
    (29) paramsCount -> .

    ID              reduce using rule 29 (paramsCount -> .)
    CTEI            reduce using rule 29 (paramsCount -> .)
    CTEF            reduce using rule 29 (paramsCount -> .)
    CTEC            reduce using rule 29 (paramsCount -> .)
    CTESTRING       reduce using rule 29 (paramsCount -> .)
    LPAREN          reduce using rule 29 (paramsCount -> .)
    COMMA           reduce using rule 29 (paramsCount -> .)
    OR              reduce using rule 29 (paramsCount -> .)
    AND             reduce using rule 29 (paramsCount -> .)
    GT              reduce using rule 29 (paramsCount -> .)
    LT              reduce using rule 29 (paramsCount -> .)
    GTE             reduce using rule 29 (paramsCount -> .)
    LTE             reduce using rule 29 (paramsCount -> .)
    NE              reduce using rule 29 (paramsCount -> .)
    PLUS            reduce using rule 29 (paramsCount -> .)
    MINUS           reduce using rule 29 (paramsCount -> .)
    MUL             reduce using rule 29 (paramsCount -> .)
    DIV             reduce using rule 29 (paramsCount -> .)
    RPAREN          reduce using rule 29 (paramsCount -> .)

    paramsCount                    shift and go to state 265

state 256

    (20) assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .

    SEMMICOLON      reduce using rule 20 (assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .)
    TO              reduce using rule 20 (assign -> ID add_id2 arr EQUALS saveOperator exp generateAssignQuad .)


state 257

    (41) paramReadAux -> exp generateQuadREAD COMMA operatorRead . paramReadAux
    (40) paramReadAux -> . exp generateQuadREAD
    (41) paramReadAux -> . exp generateQuadREAD COMMA operatorRead paramReadAux
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)

    exp                            shift and go to state 197
    paramReadAux                   shift and go to state 266
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 258

    (48) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator . paramWriteAux
    (47) paramWriteAux -> . exp generateQuadPRINT
    (48) paramWriteAux -> . exp generateQuadPRINT COMMA writeOperator paramWriteAux
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (139) empty -> .

    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    RPAREN          reduce using rule 139 (empty -> .)

    exp                            shift and go to state 201
    paramWriteAux                  shift and go to state 267
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77
    empty                          shift and go to state 79

state 259

    (52) for -> FOR forOP assign TO CTEI DO generateQuadFOR . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 268


state 260

    (55) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE . LCURLY statements RCURLY LoopEnd

    LCURLY          shift and go to state 269


state 261

    (58) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY . statements RCURLY else endIF
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)

    statements                     shift and go to state 270
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 262

    (119) functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .

    FUNCTION        reduce using rule 119 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    PRINCIPAL       reduce using rule 119 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)
    $end            reduce using rule 119 (functions1 -> ID saveFunction LPAREN parameters RPAREN vars LCURLY setStartDirection statements RCURLY .)


state 263

    (128) nextParam -> COMMA paramsAux .

    RPAREN          reduce using rule 128 (nextParam -> COMMA paramsAux .)


state 264

    (26) functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .

    MUL             reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    DIV             reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    PLUS            reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    MINUS           reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    GT              reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    LT              reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    GTE             reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    LTE             reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    NE              reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    AND             reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    OR              reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    RBRACKET        reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    SEMMICOLON      reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    RPAREN          reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    COMMA           reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    TO              reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    ID              reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEI            reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEF            reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    CTEC            reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    CTESTRING       reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)
    LPAREN          reduce using rule 26 (functionCall -> ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB .)


state 265

    (32) expAux -> exp generateQuadPARAM COMMA paramsCount . expAux
    (31) expAux -> . exp generateQuadPARAM paramsCount
    (32) expAux -> . exp generateQuadPARAM COMMA paramsCount expAux
    (33) expAux -> . empty
    (64) exp -> . nexp generateQuadOR
    (65) exp -> . nexp generateQuadOR OR saveOperator nexp
    (139) empty -> .
    (67) nexp -> . compexp generateQuadAND
    (68) nexp -> . compexp generateQuadAND AND saveOperator compexp
    (70) compexp -> . sumexp
    (71) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS saveOperator mulexp generateQuadSUM
    (80) sumexp -> . mulexp MINUS saveOperator mulexp generateQuadSUM
    (72) compexp1 -> . sumexp GT saveOperator sumexp generateQuadCOMPARE
    (73) compexp1 -> . sumexp LT saveOperator sumexp generateQuadCOMPARE
    (74) compexp1 -> . sumexp GTE saveOperator sumexp generateQuadCOMPARE
    (75) compexp1 -> . sumexp LTE saveOperator sumexp generateQuadCOMPARE
    (76) compexp1 -> . sumexp NE saveOperator sumexp generateQuadCOMPARE
    (82) mulexp -> . pexp
    (83) mulexp -> . pexp MUL saveOperator pexp generateQuadMUL
    (84) mulexp -> . pexp DIV saveOperator pexp generateQuadMUL
    (86) pexp -> . ID add_id2
    (87) pexp -> . CTEI saveCTE
    (88) pexp -> . CTEF saveCTE
    (89) pexp -> . CTEC saveCTE
    (90) pexp -> . CTESTRING saveCTE
    (91) pexp -> . functionCall
    (92) pexp -> . LPAREN exp RPAREN
    (93) pexp -> . ID arr add_id3
    (94) pexp -> . empty
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB

    RPAREN          reduce using rule 139 (empty -> .)
    MUL             reduce using rule 139 (empty -> .)
    DIV             reduce using rule 139 (empty -> .)
    PLUS            reduce using rule 139 (empty -> .)
    MINUS           reduce using rule 139 (empty -> .)
    GT              reduce using rule 139 (empty -> .)
    LT              reduce using rule 139 (empty -> .)
    GTE             reduce using rule 139 (empty -> .)
    LTE             reduce using rule 139 (empty -> .)
    NE              reduce using rule 139 (empty -> .)
    AND             reduce using rule 139 (empty -> .)
    OR              reduce using rule 139 (empty -> .)
    COMMA           reduce using rule 139 (empty -> .)
    ID              shift and go to state 73
    CTEI            shift and go to state 116
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78

    exp                            shift and go to state 222
    expAux                         shift and go to state 271
    empty                          shift and go to state 223
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    functionCall                   shift and go to state 77

state 266

    (41) paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .

    RPAREN          reduce using rule 41 (paramReadAux -> exp generateQuadREAD COMMA operatorRead paramReadAux .)


state 267

    (48) paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .

    RPAREN          reduce using rule 48 (paramWriteAux -> exp generateQuadPRINT COMMA writeOperator paramWriteAux .)


state 268

    (52) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY . statements RCURLY LoopEnd
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)

    assign                         shift and go to state 81
    statements                     shift and go to state 272
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 269

    (55) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY . statements RCURLY LoopEnd
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)

    statements                     shift and go to state 273
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 270

    (58) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements . RCURLY else endIF

    RCURLY          shift and go to state 274


state 271

    (32) expAux -> exp generateQuadPARAM COMMA paramsCount expAux .

    RPAREN          reduce using rule 32 (expAux -> exp generateQuadPARAM COMMA paramsCount expAux .)


state 272

    (52) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 275


state 273

    (55) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements . RCURLY LoopEnd

    RCURLY          shift and go to state 276


state 274

    (58) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY . else endIF
    (59) else -> . ELSE generateQuadELSE LCURLY statements RCURLY
    (60) else -> . empty
    (139) empty -> .

    ELSE            shift and go to state 278
    ID              reduce using rule 139 (empty -> .)
    READ            reduce using rule 139 (empty -> .)
    WRITE           reduce using rule 139 (empty -> .)
    FOR             reduce using rule 139 (empty -> .)
    WHILE           reduce using rule 139 (empty -> .)
    IF              reduce using rule 139 (empty -> .)
    RETURN          reduce using rule 139 (empty -> .)
    RCURLY          reduce using rule 139 (empty -> .)
    SEMMICOLON      reduce using rule 139 (empty -> .)

    else                           shift and go to state 277
    empty                          shift and go to state 279

state 275

    (52) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY . LoopEnd
    (51) LoopEnd -> .

    ID              reduce using rule 51 (LoopEnd -> .)
    READ            reduce using rule 51 (LoopEnd -> .)
    WRITE           reduce using rule 51 (LoopEnd -> .)
    FOR             reduce using rule 51 (LoopEnd -> .)
    WHILE           reduce using rule 51 (LoopEnd -> .)
    IF              reduce using rule 51 (LoopEnd -> .)
    RETURN          reduce using rule 51 (LoopEnd -> .)
    RCURLY          reduce using rule 51 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 51 (LoopEnd -> .)

    LoopEnd                        shift and go to state 280

state 276

    (55) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY . LoopEnd
    (51) LoopEnd -> .

    ID              reduce using rule 51 (LoopEnd -> .)
    READ            reduce using rule 51 (LoopEnd -> .)
    WRITE           reduce using rule 51 (LoopEnd -> .)
    FOR             reduce using rule 51 (LoopEnd -> .)
    WHILE           reduce using rule 51 (LoopEnd -> .)
    IF              reduce using rule 51 (LoopEnd -> .)
    RETURN          reduce using rule 51 (LoopEnd -> .)
    RCURLY          reduce using rule 51 (LoopEnd -> .)
    SEMMICOLON      reduce using rule 51 (LoopEnd -> .)

    LoopEnd                        shift and go to state 281

state 277

    (58) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else . endIF
    (62) endIF -> .

    ID              reduce using rule 62 (endIF -> .)
    READ            reduce using rule 62 (endIF -> .)
    WRITE           reduce using rule 62 (endIF -> .)
    FOR             reduce using rule 62 (endIF -> .)
    WHILE           reduce using rule 62 (endIF -> .)
    IF              reduce using rule 62 (endIF -> .)
    RETURN          reduce using rule 62 (endIF -> .)
    RCURLY          reduce using rule 62 (endIF -> .)
    SEMMICOLON      reduce using rule 62 (endIF -> .)

    endIF                          shift and go to state 282

state 278

    (59) else -> ELSE . generateQuadELSE LCURLY statements RCURLY
    (63) generateQuadELSE -> .

    LCURLY          reduce using rule 63 (generateQuadELSE -> .)

    generateQuadELSE               shift and go to state 283

state 279

    (60) else -> empty .

    ID              reduce using rule 60 (else -> empty .)
    READ            reduce using rule 60 (else -> empty .)
    WRITE           reduce using rule 60 (else -> empty .)
    FOR             reduce using rule 60 (else -> empty .)
    WHILE           reduce using rule 60 (else -> empty .)
    IF              reduce using rule 60 (else -> empty .)
    RETURN          reduce using rule 60 (else -> empty .)
    RCURLY          reduce using rule 60 (else -> empty .)
    SEMMICOLON      reduce using rule 60 (else -> empty .)


state 280

    (52) for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 52 (for -> FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd .)


state 281

    (55) while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .

    ID              reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    READ            reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WRITE           reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    FOR             reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    WHILE           reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    IF              reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RETURN          reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    RCURLY          reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)
    SEMMICOLON      reduce using rule 55 (while -> WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd .)


state 282

    (58) if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .

    ID              reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    READ            reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WRITE           reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    FOR             reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    WHILE           reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    IF              reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RETURN          reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    RCURLY          reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)
    SEMMICOLON      reduce using rule 58 (if -> IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF .)


state 283

    (59) else -> ELSE generateQuadELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 284


state 284

    (59) else -> ELSE generateQuadELSE LCURLY . statements RCURLY
    (10) statements -> . assign SEMMICOLON statements
    (11) statements -> . functionCall SEMMICOLON statements
    (12) statements -> . read statements SEMMICOLON statements
    (13) statements -> . write statements SEMMICOLON statements
    (14) statements -> . for statements
    (15) statements -> . while statements
    (16) statements -> . if statements
    (17) statements -> . return statements
    (18) statements -> . empty
    (19) assign -> . ID add_id2 EQUALS saveOperator exp generateAssignQuad
    (20) assign -> . ID add_id2 arr EQUALS saveOperator exp generateAssignQuad
    (26) functionCall -> . ID validateFunctionID functionERA LPAREN expAux verifyParams RPAREN generateQuadGOSUB
    (37) read -> . READ operatorRead LPAREN paramReadAux RPAREN
    (44) write -> . WRITE writeOperator LPAREN paramWrite RPAREN
    (52) for -> . FOR forOP assign TO CTEI DO generateQuadFOR LCURLY statements RCURLY LoopEnd
    (55) while -> . WHILE whileOP LPAREN exp RPAREN DO generateQuadWHILE LCURLY statements RCURLY LoopEnd
    (58) if -> . IF LPAREN exp RPAREN generateQuadIF THEN LCURLY statements RCURLY else endIF
    (137) return -> . RETURN LPAREN exp RPAREN SEMMICOLON
    (138) return -> . RETURN LPAREN exp RPAREN
    (139) empty -> .

    ID              shift and go to state 90
    READ            shift and go to state 91
    WRITE           shift and go to state 92
    FOR             shift and go to state 93
    WHILE           shift and go to state 94
    IF              shift and go to state 95
    RETURN          shift and go to state 96
    RCURLY          reduce using rule 139 (empty -> .)

    statements                     shift and go to state 285
    assign                         shift and go to state 81
    functionCall                   shift and go to state 82
    read                           shift and go to state 83
    write                          shift and go to state 84
    for                            shift and go to state 85
    while                          shift and go to state 86
    if                             shift and go to state 87
    return                         shift and go to state 88
    empty                          shift and go to state 89

state 285

    (59) else -> ELSE generateQuadELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 286


state 286

    (59) else -> ELSE generateQuadELSE LCURLY statements RCURLY .

    ID              reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    READ            reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WRITE           reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    WHILE           reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    IF              reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)
    SEMMICOLON      reduce using rule 59 (else -> ELSE generateQuadELSE LCURLY statements RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINCIPAL in state 5 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MUL in state 72 resolved as shift
WARNING: shift/reduce conflict for DIV in state 72 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 151 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 151 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 151 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 151 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 152 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 152 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 152 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 152 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 152 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 152 resolved as shift
WARNING: shift/reduce conflict for ID in state 153 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 153 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 153 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 153 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 153 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 153 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 154 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 154 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 154 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 154 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 155 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 155 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 155 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 155 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 156 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 156 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 156 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 156 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 157 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 157 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 157 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 157 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 157 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 158 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 158 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 158 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 158 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 159 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 159 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 159 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 159 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 159 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 159 resolved as shift
WARNING: shift/reduce conflict for SEMMICOLON in state 205 resolved as shift
WARNING: reduce/reduce conflict in state 73 resolved using rule (add_id2 -> <empty>)
WARNING: rejected rule (validateFunctionID -> <empty>) in state 73
WARNING: reduce/reduce conflict in state 200 resolved using rule (paramWrite -> empty)
WARNING: rejected rule (pexp -> empty) in state 200
WARNING: reduce/reduce conflict in state 223 resolved using rule (expAux -> empty)
WARNING: rejected rule (pexp -> empty) in state 223
